{"version":3,"sources":["onePokemonStat/DisplayOnePokemon.js","App.js","serviceWorker.js","index.js"],"names":["DisplayOnePokemon","props","handlePokemonNameChange","e","setState","pokemonName","target","value","searchPokemon","Axios","get","state","then","res","pokemonNameAPI","data","species","name","pokemonImgAPI","sprites","front_default","pokemonHpAPI","stats","base_stat","pokemonAttackAPI","pokemonDefenseAPI","pokemonTypeAPI","types","type","pokemonChosen","console","log","className","onChange","this","onClick","src","Component","App","apiResponse","fetch","text","catch","err","callAPI","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAgEeA,E,YA3DX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAaVC,wBAA0B,SAACC,GACvB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAfvB,EAkBnBC,cAAgB,WACZC,IAAMC,IAAN,uDAA0D,EAAKC,MAAMN,cAChEO,MAAK,SAAAC,GACF,EAAKT,SAAS,CAAEU,eAAgBD,EAAIE,KAAKC,QAAQC,OACjD,EAAKb,SAAS,CAAEc,cAAeL,EAAIE,KAAKI,QAAQC,gBAChD,EAAKhB,SAAS,CAAEiB,aAAcR,EAAIE,KAAKO,MAAM,GAAGC,YAChD,EAAKnB,SAAS,CAAEoB,iBAAkBX,EAAIE,KAAKO,MAAM,GAAGC,YACpD,EAAKnB,SAAS,CAAEqB,kBAAmBZ,EAAIE,KAAKO,MAAM,GAAGC,YACrD,EAAKnB,SAAS,CAAEsB,eAAgBb,EAAIE,KAAKY,MAAM,GAAGC,KAAKX,OACvD,EAAKb,SAAS,CAAEyB,eAAe,IAC/BC,QAAQC,IAAIlB,OA1BpB,EAAKF,MAAQ,CACTkB,eAAe,EACfxB,YAAa,GACbS,eAAgB,GAChBI,cAAe,GACfG,aAAc,GACdG,iBAAkB,GAClBC,kBAAmB,GACnBC,eAAgB,IAVL,E,sEAiCf,OACI,yBAAKM,UAAU,qBACX,yBAAKA,UAAU,gBACX,6CACA,2BAAOJ,KAAK,OAAOK,SAAUC,KAAKhC,wBAAyBK,MAAO2B,KAAKvB,MAAMN,cAC7E,4BAAQ8B,QAASD,KAAK1B,eAAtB,mBAEJ,yBAAKwB,UAAU,kBACRE,KAAKvB,MAAMkB,cAGV,oCACI,4BAAKK,KAAKvB,MAAMG,gBAChB,yBAAKsB,IAAKF,KAAKvB,MAAMO,gBACrB,qCAAWgB,KAAKvB,MAAMe,gBACtB,mCAASQ,KAAKvB,MAAMU,cACpB,uCAAaa,KAAKvB,MAAMa,kBACxB,wCAAcU,KAAKvB,MAAMc,oBAR7B,6D,GA3CQY,aC2BjBC,E,YA1Bb,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CAAE4B,YAAa,IAFX,E,uEAKR,IAAD,OACRC,MAAM,yCACH5B,MAAK,SAAAC,GAAG,OAAIA,EAAI4B,UAChB7B,MAAK,SAAAC,GAAG,OAAI,EAAKT,SAAS,CAAEmC,YAAa1B,OACzC6B,OAAM,SAAAC,GAAG,OAAIA,O,0CAIhBT,KAAKU,Y,+BAIL,OACE,yBAAKZ,UAAU,OACb,uBAAGA,UAAU,aAAaE,KAAKvB,MAAM4B,aACrC,kBAAC,EAAD,W,GArBUF,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.fe13690f.chunk.js","sourcesContent":["import \"./DisplayOnePokemon.css\";\r\nimport React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nclass DisplayOnePokemon extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pokemonChosen: false,\r\n            pokemonName: \"\",\r\n            pokemonNameAPI: \"\",\r\n            pokemonImgAPI: \"\",\r\n            pokemonHpAPI: \"\",\r\n            pokemonAttackAPI: \"\",\r\n            pokemonDefenseAPI: \"\",\r\n            pokemonTypeAPI: \"\"\r\n        };\r\n    }\r\n\r\n    handlePokemonNameChange = (e) => {\r\n        this.setState({ pokemonName: e.target.value });\r\n    }\r\n    //https://pokeapi.co/api/v2/pokemon/${this.state.pokemonName}\r\n    searchPokemon = () => {\r\n        Axios.get(`http://localhost:5000/getPokemon/pokemonStat/${this.state.pokemonName}`)\r\n            .then(res => {\r\n                this.setState({ pokemonNameAPI: res.data.species.name });\r\n                this.setState({ pokemonImgAPI: res.data.sprites.front_default });\r\n                this.setState({ pokemonHpAPI: res.data.stats[0].base_stat });\r\n                this.setState({ pokemonAttackAPI: res.data.stats[1].base_stat });\r\n                this.setState({ pokemonDefenseAPI: res.data.stats[2].base_stat });\r\n                this.setState({ pokemonTypeAPI: res.data.types[0].type.name });\r\n                this.setState({ pokemonChosen: true });\r\n                console.log(res);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"DisplayOnePokemon\">\r\n                <div className=\"TitleSection\">\r\n                    <h1>Pokemon Stats</h1>\r\n                    <input type=\"text\" onChange={this.handlePokemonNameChange} value={this.state.pokemonName} />\r\n                    <button onClick={this.searchPokemon}>Search Pokemon</button>\r\n                </div>\r\n                <div className=\"DisplaySection\">\r\n                    {!(this.state.pokemonChosen) ? (\r\n                        <h1>Please choose a Pokemon</h1>\r\n                    ) : (\r\n                        <>\r\n                            <h1>{this.state.pokemonNameAPI}</h1>\r\n                            <img src={this.state.pokemonImgAPI} />\r\n                            <h3>Type: {this.state.pokemonTypeAPI}</h3>\r\n                            <h4>Hp: {this.state.pokemonHpAPI}</h4>\r\n                            <h4>Attack: {this.state.pokemonAttackAPI}</h4>\r\n                            <h4>Defense: {this.state.pokemonDefenseAPI}</h4>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayOnePokemon;","import React, { useEffect, useState, Component } from 'react';\r\nimport './App.css';\r\nimport DisplayOnePokemon from './onePokemonStat/DisplayOnePokemon';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { apiResponse: \"\" };\r\n  }\r\n\r\n  callAPI() {\r\n    fetch(\"http://localhost:5000/testAPI/testAPI\")\r\n      .then(res => res.text())\r\n      .then(res => this.setState({ apiResponse: res }))\r\n      .catch(err => err);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <p className=\"App-intro\">{this.state.apiResponse}</p>\r\n        <DisplayOnePokemon />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import DisplayOnePokemon from './onePokemonStat/DisplayOnePokemon.js';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n//ReactDOM.render(<DisplayOnePokemon />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}