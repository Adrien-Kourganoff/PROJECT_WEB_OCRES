{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","Tawk.js","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","Tawk","position","this","getPosition","open","initialise","createStyles","split","vertical","horizontal","container","document","createElement","style","Object","keys","forEach","key","body","appendChild","buttonContainer","classList","add","chatIcon","closeIcon","messageContainer","createMessageContainerContent","addEventListener","toggleOpen","bind","styleTag","head","innerHTML","title","textContent","form","email","required","id","type","placeholder","message","btn","submit","event","preventDefault","remove","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b232005.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export class Tawk {\r\n    constructor({ position = 'bottom-right' } = {}) {\r\n        this.position = this.getPosition(position);\r\n        this.open = false;\r\n        this.initialise();\r\n        this.createStyles();\r\n    }\r\n\r\n    getPosition(position) {\r\n        const [vertical, horizontal] = position.split('-');\r\n        return {\r\n            [vertical]: '30px',\r\n            [horizontal]: '30px',\r\n        };\r\n    }\r\n\r\n    initialise() {\r\n        const container = document.createElement('div');\r\n        container.style.position = 'fixed';\r\n        Object.keys(this.position)\r\n            .forEach(key => container.style[key] = this.position[key]);\r\n        document.body.appendChild(container);\r\n\r\n        const buttonContainer = document.createElement('div');\r\n        buttonContainer.classList.add('button-container');\r\n\r\n        const chatIcon = document.createElement('img');\r\n        chatIcon.src = 'whatsapp.svg'\r\n        chatIcon.classList.add('icon');\r\n        this.chatIcon = chatIcon;\r\n\r\n        const closeIcon = document.createElement('img');\r\n        closeIcon.src = 'cancel.svg';\r\n        closeIcon.classList.add('icon', 'hidden');\r\n        this.closeIcon = closeIcon;\r\n\r\n        this.messageContainer = document.createElement('div');\r\n        this.messageContainer.classList.add('hidden', 'message-container');\r\n\r\n        this.createMessageContainerContent();\r\n\r\n        buttonContainer.appendChild(this.chatIcon);\r\n        buttonContainer.appendChild(this.closeIcon);\r\n\r\n        buttonContainer.addEventListener('click', this.toggleOpen.bind(this));\r\n\r\n        container.appendChild(this.messageContainer);\r\n        container.appendChild(buttonContainer);\r\n\r\n    }\r\n\r\n    createStyles() {\r\n        const styleTag = document.createElement('style');\r\n        document.head.appendChild(styleTag);\r\n\r\n        styleTag.innerHTML = `\r\n            .icon {\r\n            cursor: pointer;\r\n            width: 70 %;\r\n            position: absolute;\r\n            top: 9px;\r\n            left: 9px;\r\n            transition: transform .3s ease;\r\n            }\r\n\r\n            .hidden {\r\n            transform: scale(0);\r\n            }\r\n\r\n            .button-container {\r\n            background-color: #04b73f;\r\n            width: 60px;\r\n            height: 60px;\r\n            border-radius: 50%;\r\n            }\r\n\r\n            .message-container {\r\n            box-shadow: 0 0 18px 8px rgba(0, 0, 0, 0.1);\r\n            width: 400px;\r\n            right: -25px;\r\n            bottom: 75px;\r\n            max-height: 400px;\r\n            position: absolute;\r\n            transition: max-height .2s ease;\r\n            font-family: Helvetica, Arial, sans-serif;\r\n            }\r\n\r\n            .message-container.hidden {\r\n            max-height: 0px;\r\n            }\r\n\r\n            .message-container h2 {\r\n            margin: 0;\r\n            padding: 20px;\r\n            color: #fff;\r\n            background-color: #04b73f;\r\n            }\r\n\r\n            .message-container .content {\r\n                margin: 20px 10px;\r\n                border: 1px solid #dbdbdb;\r\n                padding: 10px;\r\n                display: flex;\r\n                background-color: #fff;\r\n                flex-direction: column;\r\n            }\r\n\r\n            .message-container form * {\r\n            margin: 5px 0;\r\n            }\r\n\r\n            .message-container form input {\r\n            padding: 10px;\r\n            }\r\n\r\n            .message-container form textarea {\r\n            height: 100px;\r\n            padding: 10px;\r\n            }\r\n\r\n            .message-container form textarea::placeholder {\r\n            font-family: Helvetica, Arial, sans-serif;\r\n            }\r\n\r\n            .message-container form button {\r\n            cursor: pointer;\r\n            background-color: #04b73f;\r\n            color: #fff;\r\n            border: 0;\r\n            border-radius: 4px;\r\n            padding: 10px;\r\n            }\r\n\r\n            .message-container form button:hover {\r\n            background-color: #16632f;\r\n            }\r\n        `\r\n            ;\r\n    }\r\n\r\n    createMessageContainerContent() {\r\n        this.messageContainer.innerHTML = '';\r\n        const title = document.createElement('h2');\r\n        title.textContent = `We're not here, drop us an email`;\r\n\r\n        const form = document.createElement('form');\r\n        form.classList.add('content');\r\n        const email = document.createElement('input');\r\n        email.required = true;\r\n        email.id = 'email';\r\n        email.type = 'email';\r\n        email.placeholder = 'enter your email address';\r\n\r\n        const message = document.createElement('textarea');\r\n        message.required = true;\r\n        message.id = 'message';\r\n        message.placeholder = 'Your message';\r\n\r\n        const btn = document.createElement('button');\r\n        btn.textContent = 'Submit';\r\n\r\n        form.appendChild(email);\r\n        form.appendChild(message);\r\n        form.appendChild(btn);\r\n        form.addEventListener('submit', this.submit.bind(this));\r\n\r\n        this.messageContainer.appendChild(title);\r\n        this.messageContainer.appendChild(form);\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    toggleOpen() {\r\n        this.open = !this.open;\r\n        if (this.open) {\r\n            this.chatIcon.classList.add('hidden');\r\n            this.closeIcon.classList.remove('hidden');\r\n            this.messageContainer.classList.remove('hidden');\r\n        } else {\r\n            this.createMessageContainerContent();\r\n            this.chatIcon.classList.remove('hidden');\r\n            this.closeIcon.classList.add('hidden');\r\n            this.messageContainer.classList.add('hidden');\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Tawk } from './Tawk';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nconst tawk = new Tawk();\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}