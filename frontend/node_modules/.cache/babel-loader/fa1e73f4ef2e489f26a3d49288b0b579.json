{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = void 0;\nvar defaults = {\n  parser: require(\"../parsers/esprima\"),\n  tabWidth: 4,\n  useTabs: false,\n  reuseWhitespace: true,\n  lineTerminator: require(\"os\").EOL || \"\\n\",\n  wrapColumn: 74,\n  sourceFileName: null,\n  sourceMapName: null,\n  sourceRoot: null,\n  inputSourceMap: null,\n  range: false,\n  tolerant: true,\n  quote: null,\n  trailingComma: false,\n  arrayBracketSpacing: false,\n  objectCurlySpacing: true,\n  arrowParensAlways: false,\n  flowObjectCommas: true,\n  tokens: true\n};\nvar hasOwn = defaults.hasOwnProperty; // Copy options and fill in default values.\n\nfunction normalize(opts) {\n  var options = opts || defaults;\n\n  function get(key) {\n    return hasOwn.call(options, key) ? options[key] : defaults[key];\n  }\n\n  return {\n    tabWidth: +get(\"tabWidth\"),\n    useTabs: !!get(\"useTabs\"),\n    reuseWhitespace: !!get(\"reuseWhitespace\"),\n    lineTerminator: get(\"lineTerminator\"),\n    wrapColumn: Math.max(get(\"wrapColumn\"), 0),\n    sourceFileName: get(\"sourceFileName\"),\n    sourceMapName: get(\"sourceMapName\"),\n    sourceRoot: get(\"sourceRoot\"),\n    inputSourceMap: get(\"inputSourceMap\"),\n    parser: get(\"esprima\") || get(\"parser\"),\n    range: get(\"range\"),\n    tolerant: get(\"tolerant\"),\n    quote: get(\"quote\"),\n    trailingComma: get(\"trailingComma\"),\n    arrayBracketSpacing: get(\"arrayBracketSpacing\"),\n    objectCurlySpacing: get(\"objectCurlySpacing\"),\n    arrowParensAlways: get(\"arrowParensAlways\"),\n    flowObjectCommas: get(\"flowObjectCommas\"),\n    tokens: !!get(\"tokens\")\n  };\n}\n\nexports.normalize = normalize;","map":{"version":3,"sources":["C:/Users/tara0/OneDrive/Bureau/Travail/Ing 4/Techno web/PROJECT_WEB_OCRES/frontend/node_modules/jscodeshift/node_modules/recast/lib/options.js"],"names":["Object","defineProperty","exports","value","normalize","defaults","parser","require","tabWidth","useTabs","reuseWhitespace","lineTerminator","EOL","wrapColumn","sourceFileName","sourceMapName","sourceRoot","inputSourceMap","range","tolerant","quote","trailingComma","arrayBracketSpacing","objectCurlySpacing","arrowParensAlways","flowObjectCommas","tokens","hasOwn","hasOwnProperty","opts","options","get","key","call","Math","max"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.normalize = void 0;\r\nvar defaults = {\r\n    parser: require(\"../parsers/esprima\"),\r\n    tabWidth: 4,\r\n    useTabs: false,\r\n    reuseWhitespace: true,\r\n    lineTerminator: require(\"os\").EOL || \"\\n\",\r\n    wrapColumn: 74,\r\n    sourceFileName: null,\r\n    sourceMapName: null,\r\n    sourceRoot: null,\r\n    inputSourceMap: null,\r\n    range: false,\r\n    tolerant: true,\r\n    quote: null,\r\n    trailingComma: false,\r\n    arrayBracketSpacing: false,\r\n    objectCurlySpacing: true,\r\n    arrowParensAlways: false,\r\n    flowObjectCommas: true,\r\n    tokens: true,\r\n};\r\nvar hasOwn = defaults.hasOwnProperty;\r\n// Copy options and fill in default values.\r\nfunction normalize(opts) {\r\n    var options = opts || defaults;\r\n    function get(key) {\r\n        return hasOwn.call(options, key) ? options[key] : defaults[key];\r\n    }\r\n    return {\r\n        tabWidth: +get(\"tabWidth\"),\r\n        useTabs: !!get(\"useTabs\"),\r\n        reuseWhitespace: !!get(\"reuseWhitespace\"),\r\n        lineTerminator: get(\"lineTerminator\"),\r\n        wrapColumn: Math.max(get(\"wrapColumn\"), 0),\r\n        sourceFileName: get(\"sourceFileName\"),\r\n        sourceMapName: get(\"sourceMapName\"),\r\n        sourceRoot: get(\"sourceRoot\"),\r\n        inputSourceMap: get(\"inputSourceMap\"),\r\n        parser: get(\"esprima\") || get(\"parser\"),\r\n        range: get(\"range\"),\r\n        tolerant: get(\"tolerant\"),\r\n        quote: get(\"quote\"),\r\n        trailingComma: get(\"trailingComma\"),\r\n        arrayBracketSpacing: get(\"arrayBracketSpacing\"),\r\n        objectCurlySpacing: get(\"objectCurlySpacing\"),\r\n        arrowParensAlways: get(\"arrowParensAlways\"),\r\n        flowObjectCommas: get(\"flowObjectCommas\"),\r\n        tokens: !!get(\"tokens\"),\r\n    };\r\n}\r\nexports.normalize = normalize;\r\n"]},"metadata":{},"sourceType":"script"}