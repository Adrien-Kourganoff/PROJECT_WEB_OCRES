{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar core_operators_1 = require(\"./core-operators\");\n\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\n\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\n\nfunction default_1(fork) {\n  var types = fork.use(types_1.default);\n  var Type = types.Type;\n  var def = Type.def;\n  var or = Type.or;\n  var shared = fork.use(shared_1.default);\n  var defaults = shared.defaults;\n  var geq = shared.geq; // Abstract supertype of all syntactic entities that are allowed to have a\n  // .loc field.\n\n  def(\"Printable\").field(\"loc\", or(def(\"SourceLocation\"), null), defaults[\"null\"], true);\n  def(\"Node\").bases(\"Printable\").field(\"type\", String).field(\"comments\", or([def(\"Comment\")], null), defaults[\"null\"], true);\n  def(\"SourceLocation\").field(\"start\", def(\"Position\")).field(\"end\", def(\"Position\")).field(\"source\", or(String, null), defaults[\"null\"]);\n  def(\"Position\").field(\"line\", geq(1)).field(\"column\", geq(0));\n  def(\"File\").bases(\"Node\").build(\"program\", \"name\").field(\"program\", def(\"Program\")).field(\"name\", or(String, null), defaults[\"null\"]);\n  def(\"Program\").bases(\"Node\").build(\"body\").field(\"body\", [def(\"Statement\")]);\n  def(\"Function\").bases(\"Node\").field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"params\", [def(\"Pattern\")]).field(\"body\", def(\"BlockStatement\")).field(\"generator\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]);\n  def(\"Statement\").bases(\"Node\"); // The empty .build() here means that an EmptyStatement can be constructed\n  // (i.e. it's not abstract) but that it needs no arguments.\n\n  def(\"EmptyStatement\").bases(\"Statement\").build();\n  def(\"BlockStatement\").bases(\"Statement\").build(\"body\").field(\"body\", [def(\"Statement\")]); // TODO Figure out how to silently coerce Expressions to\n  // ExpressionStatements where a Statement was expected.\n\n  def(\"ExpressionStatement\").bases(\"Statement\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"IfStatement\").bases(\"Statement\").build(\"test\", \"consequent\", \"alternate\").field(\"test\", def(\"Expression\")).field(\"consequent\", def(\"Statement\")).field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n  def(\"LabeledStatement\").bases(\"Statement\").build(\"label\", \"body\").field(\"label\", def(\"Identifier\")).field(\"body\", def(\"Statement\"));\n  def(\"BreakStatement\").bases(\"Statement\").build(\"label\").field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n  def(\"ContinueStatement\").bases(\"Statement\").build(\"label\").field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n  def(\"WithStatement\").bases(\"Statement\").build(\"object\", \"body\").field(\"object\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n  def(\"SwitchStatement\").bases(\"Statement\").build(\"discriminant\", \"cases\", \"lexical\").field(\"discriminant\", def(\"Expression\")).field(\"cases\", [def(\"SwitchCase\")]).field(\"lexical\", Boolean, defaults[\"false\"]);\n  def(\"ReturnStatement\").bases(\"Statement\").build(\"argument\").field(\"argument\", or(def(\"Expression\"), null));\n  def(\"ThrowStatement\").bases(\"Statement\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  def(\"TryStatement\").bases(\"Statement\").build(\"block\", \"handler\", \"finalizer\").field(\"block\", def(\"BlockStatement\")).field(\"handler\", or(def(\"CatchClause\"), null), function () {\n    return this.handlers && this.handlers[0] || null;\n  }).field(\"handlers\", [def(\"CatchClause\")], function () {\n    return this.handler ? [this.handler] : [];\n  }, true) // Indicates this field is hidden from eachField iteration.\n  .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray).field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n  def(\"CatchClause\").bases(\"Node\").build(\"param\", \"guard\", \"body\").field(\"param\", def(\"Pattern\")).field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"]).field(\"body\", def(\"BlockStatement\"));\n  def(\"WhileStatement\").bases(\"Statement\").build(\"test\", \"body\").field(\"test\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n  def(\"DoWhileStatement\").bases(\"Statement\").build(\"body\", \"test\").field(\"body\", def(\"Statement\")).field(\"test\", def(\"Expression\"));\n  def(\"ForStatement\").bases(\"Statement\").build(\"init\", \"test\", \"update\", \"body\").field(\"init\", or(def(\"VariableDeclaration\"), def(\"Expression\"), null)).field(\"test\", or(def(\"Expression\"), null)).field(\"update\", or(def(\"Expression\"), null)).field(\"body\", def(\"Statement\"));\n  def(\"ForInStatement\").bases(\"Statement\").build(\"left\", \"right\", \"body\").field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\"))).field(\"right\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n  def(\"DebuggerStatement\").bases(\"Statement\").build();\n  def(\"Declaration\").bases(\"Statement\");\n  def(\"FunctionDeclaration\").bases(\"Function\", \"Declaration\").build(\"id\", \"params\", \"body\").field(\"id\", def(\"Identifier\"));\n  def(\"FunctionExpression\").bases(\"Function\", \"Expression\").build(\"id\", \"params\", \"body\");\n  def(\"VariableDeclaration\").bases(\"Declaration\").build(\"kind\", \"declarations\").field(\"kind\", or(\"var\", \"let\", \"const\")).field(\"declarations\", [def(\"VariableDeclarator\")]);\n  def(\"VariableDeclarator\").bases(\"Node\").build(\"id\", \"init\").field(\"id\", def(\"Pattern\")).field(\"init\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"Expression\").bases(\"Node\");\n  def(\"ThisExpression\").bases(\"Expression\").build();\n  def(\"ArrayExpression\").bases(\"Expression\").build(\"elements\").field(\"elements\", [or(def(\"Expression\"), null)]);\n  def(\"ObjectExpression\").bases(\"Expression\").build(\"properties\").field(\"properties\", [def(\"Property\")]); // TODO Not in the Mozilla Parser API, but used by Esprima.\n\n  def(\"Property\").bases(\"Node\") // Want to be able to visit Property Nodes.\n  .build(\"kind\", \"key\", \"value\").field(\"kind\", or(\"init\", \"get\", \"set\")).field(\"key\", or(def(\"Literal\"), def(\"Identifier\"))).field(\"value\", def(\"Expression\"));\n  def(\"SequenceExpression\").bases(\"Expression\").build(\"expressions\").field(\"expressions\", [def(\"Expression\")]);\n  var UnaryOperator = or(\"-\", \"+\", \"!\", \"~\", \"typeof\", \"void\", \"delete\");\n  def(\"UnaryExpression\").bases(\"Expression\").build(\"operator\", \"argument\", \"prefix\").field(\"operator\", UnaryOperator).field(\"argument\", def(\"Expression\")) // Esprima doesn't bother with this field, presumably because it's\n  // always true for unary operators.\n  .field(\"prefix\", Boolean, defaults[\"true\"]);\n  var BinaryOperator = or.apply(void 0, core_operators_1.BinaryOperators);\n  def(\"BinaryExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", BinaryOperator).field(\"left\", def(\"Expression\")).field(\"right\", def(\"Expression\"));\n  var AssignmentOperator = or.apply(void 0, core_operators_1.AssignmentOperators);\n  def(\"AssignmentExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", AssignmentOperator).field(\"left\", or(def(\"Pattern\"), def(\"MemberExpression\"))).field(\"right\", def(\"Expression\"));\n  var UpdateOperator = or(\"++\", \"--\");\n  def(\"UpdateExpression\").bases(\"Expression\").build(\"operator\", \"argument\", \"prefix\").field(\"operator\", UpdateOperator).field(\"argument\", def(\"Expression\")).field(\"prefix\", Boolean);\n  var LogicalOperator = or.apply(void 0, core_operators_1.LogicalOperators);\n  def(\"LogicalExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", LogicalOperator).field(\"left\", def(\"Expression\")).field(\"right\", def(\"Expression\"));\n  def(\"ConditionalExpression\").bases(\"Expression\").build(\"test\", \"consequent\", \"alternate\").field(\"test\", def(\"Expression\")).field(\"consequent\", def(\"Expression\")).field(\"alternate\", def(\"Expression\"));\n  def(\"NewExpression\").bases(\"Expression\").build(\"callee\", \"arguments\").field(\"callee\", def(\"Expression\")) // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n  // null)], but null values don't really make sense at the call site.\n  // TODO Report this nonsense.\n  .field(\"arguments\", [def(\"Expression\")]);\n  def(\"CallExpression\").bases(\"Expression\").build(\"callee\", \"arguments\").field(\"callee\", def(\"Expression\")) // See comment for NewExpression above.\n  .field(\"arguments\", [def(\"Expression\")]);\n  def(\"MemberExpression\").bases(\"Expression\").build(\"object\", \"property\", \"computed\").field(\"object\", def(\"Expression\")).field(\"property\", or(def(\"Identifier\"), def(\"Expression\"))).field(\"computed\", Boolean, function () {\n    var type = this.property.type;\n\n    if (type === 'Literal' || type === 'MemberExpression' || type === 'BinaryExpression') {\n      return true;\n    }\n\n    return false;\n  });\n  def(\"Pattern\").bases(\"Node\");\n  def(\"SwitchCase\").bases(\"Node\").build(\"test\", \"consequent\").field(\"test\", or(def(\"Expression\"), null)).field(\"consequent\", [def(\"Statement\")]);\n  def(\"Identifier\").bases(\"Expression\", \"Pattern\").build(\"name\").field(\"name\", String).field(\"optional\", Boolean, defaults[\"false\"]);\n  def(\"Literal\").bases(\"Expression\").build(\"value\").field(\"value\", or(String, Boolean, null, Number, RegExp)).field(\"regex\", or({\n    pattern: String,\n    flags: String\n  }, null), function () {\n    if (this.value instanceof RegExp) {\n      var flags = \"\";\n      if (this.value.ignoreCase) flags += \"i\";\n      if (this.value.multiline) flags += \"m\";\n      if (this.value.global) flags += \"g\";\n      return {\n        pattern: this.value.source,\n        flags: flags\n      };\n    }\n\n    return null;\n  }); // Abstract (non-buildable) comment supertype. Not a Node.\n\n  def(\"Comment\").bases(\"Printable\").field(\"value\", String) // A .leading comment comes before the node, whereas a .trailing\n  // comment comes after it. These two fields should not both be true,\n  // but they might both be false when the comment falls inside a node\n  // and the node has no children for the comment to lead or trail,\n  // e.g. { /*dangling*/ }.\n  .field(\"leading\", Boolean, defaults[\"true\"]).field(\"trailing\", Boolean, defaults[\"false\"]);\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["C:/Users/tara0/OneDrive/Bureau/Travail/Ing 4/Techno web/PROJECT_WEB_OCRES/frontend/node_modules/ast-types/def/core.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","core_operators_1","types_1","__importDefault","shared_1","default_1","fork","types","use","default","Type","def","or","shared","defaults","geq","field","bases","String","build","Boolean","handlers","handler","emptyArray","UnaryOperator","BinaryOperator","apply","BinaryOperators","AssignmentOperator","AssignmentOperators","UpdateOperator","LogicalOperator","LogicalOperators","type","property","Number","RegExp","pattern","flags","ignoreCase","multiline","global","source","module"],"mappings":"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","sourcesContent":["\"use strict\";;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_operators_1 = require(\"./core-operators\");\r\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\r\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\r\nfunction default_1(fork) {\r\n    var types = fork.use(types_1.default);\r\n    var Type = types.Type;\r\n    var def = Type.def;\r\n    var or = Type.or;\r\n    var shared = fork.use(shared_1.default);\r\n    var defaults = shared.defaults;\r\n    var geq = shared.geq;\r\n    // Abstract supertype of all syntactic entities that are allowed to have a\r\n    // .loc field.\r\n    def(\"Printable\")\r\n        .field(\"loc\", or(def(\"SourceLocation\"), null), defaults[\"null\"], true);\r\n    def(\"Node\")\r\n        .bases(\"Printable\")\r\n        .field(\"type\", String)\r\n        .field(\"comments\", or([def(\"Comment\")], null), defaults[\"null\"], true);\r\n    def(\"SourceLocation\")\r\n        .field(\"start\", def(\"Position\"))\r\n        .field(\"end\", def(\"Position\"))\r\n        .field(\"source\", or(String, null), defaults[\"null\"]);\r\n    def(\"Position\")\r\n        .field(\"line\", geq(1))\r\n        .field(\"column\", geq(0));\r\n    def(\"File\")\r\n        .bases(\"Node\")\r\n        .build(\"program\", \"name\")\r\n        .field(\"program\", def(\"Program\"))\r\n        .field(\"name\", or(String, null), defaults[\"null\"]);\r\n    def(\"Program\")\r\n        .bases(\"Node\")\r\n        .build(\"body\")\r\n        .field(\"body\", [def(\"Statement\")]);\r\n    def(\"Function\")\r\n        .bases(\"Node\")\r\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\r\n        .field(\"params\", [def(\"Pattern\")])\r\n        .field(\"body\", def(\"BlockStatement\"))\r\n        .field(\"generator\", Boolean, defaults[\"false\"])\r\n        .field(\"async\", Boolean, defaults[\"false\"]);\r\n    def(\"Statement\").bases(\"Node\");\r\n    // The empty .build() here means that an EmptyStatement can be constructed\r\n    // (i.e. it's not abstract) but that it needs no arguments.\r\n    def(\"EmptyStatement\").bases(\"Statement\").build();\r\n    def(\"BlockStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"body\")\r\n        .field(\"body\", [def(\"Statement\")]);\r\n    // TODO Figure out how to silently coerce Expressions to\r\n    // ExpressionStatements where a Statement was expected.\r\n    def(\"ExpressionStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"expression\")\r\n        .field(\"expression\", def(\"Expression\"));\r\n    def(\"IfStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"test\", \"consequent\", \"alternate\")\r\n        .field(\"test\", def(\"Expression\"))\r\n        .field(\"consequent\", def(\"Statement\"))\r\n        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\r\n    def(\"LabeledStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"label\", \"body\")\r\n        .field(\"label\", def(\"Identifier\"))\r\n        .field(\"body\", def(\"Statement\"));\r\n    def(\"BreakStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"label\")\r\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\r\n    def(\"ContinueStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"label\")\r\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\r\n    def(\"WithStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"object\", \"body\")\r\n        .field(\"object\", def(\"Expression\"))\r\n        .field(\"body\", def(\"Statement\"));\r\n    def(\"SwitchStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"discriminant\", \"cases\", \"lexical\")\r\n        .field(\"discriminant\", def(\"Expression\"))\r\n        .field(\"cases\", [def(\"SwitchCase\")])\r\n        .field(\"lexical\", Boolean, defaults[\"false\"]);\r\n    def(\"ReturnStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"argument\")\r\n        .field(\"argument\", or(def(\"Expression\"), null));\r\n    def(\"ThrowStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"argument\")\r\n        .field(\"argument\", def(\"Expression\"));\r\n    def(\"TryStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"block\", \"handler\", \"finalizer\")\r\n        .field(\"block\", def(\"BlockStatement\"))\r\n        .field(\"handler\", or(def(\"CatchClause\"), null), function () {\r\n        return this.handlers && this.handlers[0] || null;\r\n    })\r\n        .field(\"handlers\", [def(\"CatchClause\")], function () {\r\n        return this.handler ? [this.handler] : [];\r\n    }, true) // Indicates this field is hidden from eachField iteration.\r\n        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\r\n        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\r\n    def(\"CatchClause\")\r\n        .bases(\"Node\")\r\n        .build(\"param\", \"guard\", \"body\")\r\n        .field(\"param\", def(\"Pattern\"))\r\n        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\r\n        .field(\"body\", def(\"BlockStatement\"));\r\n    def(\"WhileStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"test\", \"body\")\r\n        .field(\"test\", def(\"Expression\"))\r\n        .field(\"body\", def(\"Statement\"));\r\n    def(\"DoWhileStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"body\", \"test\")\r\n        .field(\"body\", def(\"Statement\"))\r\n        .field(\"test\", def(\"Expression\"));\r\n    def(\"ForStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"init\", \"test\", \"update\", \"body\")\r\n        .field(\"init\", or(def(\"VariableDeclaration\"), def(\"Expression\"), null))\r\n        .field(\"test\", or(def(\"Expression\"), null))\r\n        .field(\"update\", or(def(\"Expression\"), null))\r\n        .field(\"body\", def(\"Statement\"));\r\n    def(\"ForInStatement\")\r\n        .bases(\"Statement\")\r\n        .build(\"left\", \"right\", \"body\")\r\n        .field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\")))\r\n        .field(\"right\", def(\"Expression\"))\r\n        .field(\"body\", def(\"Statement\"));\r\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\r\n    def(\"Declaration\").bases(\"Statement\");\r\n    def(\"FunctionDeclaration\")\r\n        .bases(\"Function\", \"Declaration\")\r\n        .build(\"id\", \"params\", \"body\")\r\n        .field(\"id\", def(\"Identifier\"));\r\n    def(\"FunctionExpression\")\r\n        .bases(\"Function\", \"Expression\")\r\n        .build(\"id\", \"params\", \"body\");\r\n    def(\"VariableDeclaration\")\r\n        .bases(\"Declaration\")\r\n        .build(\"kind\", \"declarations\")\r\n        .field(\"kind\", or(\"var\", \"let\", \"const\"))\r\n        .field(\"declarations\", [def(\"VariableDeclarator\")]);\r\n    def(\"VariableDeclarator\")\r\n        .bases(\"Node\")\r\n        .build(\"id\", \"init\")\r\n        .field(\"id\", def(\"Pattern\"))\r\n        .field(\"init\", or(def(\"Expression\"), null), defaults[\"null\"]);\r\n    def(\"Expression\").bases(\"Node\");\r\n    def(\"ThisExpression\").bases(\"Expression\").build();\r\n    def(\"ArrayExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"elements\")\r\n        .field(\"elements\", [or(def(\"Expression\"), null)]);\r\n    def(\"ObjectExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"properties\")\r\n        .field(\"properties\", [def(\"Property\")]);\r\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\r\n    def(\"Property\")\r\n        .bases(\"Node\") // Want to be able to visit Property Nodes.\r\n        .build(\"kind\", \"key\", \"value\")\r\n        .field(\"kind\", or(\"init\", \"get\", \"set\"))\r\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\r\n        .field(\"value\", def(\"Expression\"));\r\n    def(\"SequenceExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"expressions\")\r\n        .field(\"expressions\", [def(\"Expression\")]);\r\n    var UnaryOperator = or(\"-\", \"+\", \"!\", \"~\", \"typeof\", \"void\", \"delete\");\r\n    def(\"UnaryExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"operator\", \"argument\", \"prefix\")\r\n        .field(\"operator\", UnaryOperator)\r\n        .field(\"argument\", def(\"Expression\"))\r\n        // Esprima doesn't bother with this field, presumably because it's\r\n        // always true for unary operators.\r\n        .field(\"prefix\", Boolean, defaults[\"true\"]);\r\n    var BinaryOperator = or.apply(void 0, core_operators_1.BinaryOperators);\r\n    def(\"BinaryExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"operator\", \"left\", \"right\")\r\n        .field(\"operator\", BinaryOperator)\r\n        .field(\"left\", def(\"Expression\"))\r\n        .field(\"right\", def(\"Expression\"));\r\n    var AssignmentOperator = or.apply(void 0, core_operators_1.AssignmentOperators);\r\n    def(\"AssignmentExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"operator\", \"left\", \"right\")\r\n        .field(\"operator\", AssignmentOperator)\r\n        .field(\"left\", or(def(\"Pattern\"), def(\"MemberExpression\")))\r\n        .field(\"right\", def(\"Expression\"));\r\n    var UpdateOperator = or(\"++\", \"--\");\r\n    def(\"UpdateExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"operator\", \"argument\", \"prefix\")\r\n        .field(\"operator\", UpdateOperator)\r\n        .field(\"argument\", def(\"Expression\"))\r\n        .field(\"prefix\", Boolean);\r\n    var LogicalOperator = or.apply(void 0, core_operators_1.LogicalOperators);\r\n    def(\"LogicalExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"operator\", \"left\", \"right\")\r\n        .field(\"operator\", LogicalOperator)\r\n        .field(\"left\", def(\"Expression\"))\r\n        .field(\"right\", def(\"Expression\"));\r\n    def(\"ConditionalExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"test\", \"consequent\", \"alternate\")\r\n        .field(\"test\", def(\"Expression\"))\r\n        .field(\"consequent\", def(\"Expression\"))\r\n        .field(\"alternate\", def(\"Expression\"));\r\n    def(\"NewExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"callee\", \"arguments\")\r\n        .field(\"callee\", def(\"Expression\"))\r\n        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\r\n        // null)], but null values don't really make sense at the call site.\r\n        // TODO Report this nonsense.\r\n        .field(\"arguments\", [def(\"Expression\")]);\r\n    def(\"CallExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"callee\", \"arguments\")\r\n        .field(\"callee\", def(\"Expression\"))\r\n        // See comment for NewExpression above.\r\n        .field(\"arguments\", [def(\"Expression\")]);\r\n    def(\"MemberExpression\")\r\n        .bases(\"Expression\")\r\n        .build(\"object\", \"property\", \"computed\")\r\n        .field(\"object\", def(\"Expression\"))\r\n        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\r\n        .field(\"computed\", Boolean, function () {\r\n        var type = this.property.type;\r\n        if (type === 'Literal' ||\r\n            type === 'MemberExpression' ||\r\n            type === 'BinaryExpression') {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    def(\"Pattern\").bases(\"Node\");\r\n    def(\"SwitchCase\")\r\n        .bases(\"Node\")\r\n        .build(\"test\", \"consequent\")\r\n        .field(\"test\", or(def(\"Expression\"), null))\r\n        .field(\"consequent\", [def(\"Statement\")]);\r\n    def(\"Identifier\")\r\n        .bases(\"Expression\", \"Pattern\")\r\n        .build(\"name\")\r\n        .field(\"name\", String)\r\n        .field(\"optional\", Boolean, defaults[\"false\"]);\r\n    def(\"Literal\")\r\n        .bases(\"Expression\")\r\n        .build(\"value\")\r\n        .field(\"value\", or(String, Boolean, null, Number, RegExp))\r\n        .field(\"regex\", or({\r\n        pattern: String,\r\n        flags: String\r\n    }, null), function () {\r\n        if (this.value instanceof RegExp) {\r\n            var flags = \"\";\r\n            if (this.value.ignoreCase)\r\n                flags += \"i\";\r\n            if (this.value.multiline)\r\n                flags += \"m\";\r\n            if (this.value.global)\r\n                flags += \"g\";\r\n            return {\r\n                pattern: this.value.source,\r\n                flags: flags\r\n            };\r\n        }\r\n        return null;\r\n    });\r\n    // Abstract (non-buildable) comment supertype. Not a Node.\r\n    def(\"Comment\")\r\n        .bases(\"Printable\")\r\n        .field(\"value\", String)\r\n        // A .leading comment comes before the node, whereas a .trailing\r\n        // comment comes after it. These two fields should not both be true,\r\n        // but they might both be false when the comment falls inside a node\r\n        // and the node has no children for the comment to lead or trail,\r\n        // e.g. { /*dangling*/ }.\r\n        .field(\"leading\", Boolean, defaults[\"true\"])\r\n        .field(\"trailing\", Boolean, defaults[\"false\"]);\r\n}\r\nexports.default = default_1;\r\nmodule.exports = exports[\"default\"];\r\n"]},"metadata":{},"sourceType":"script"}