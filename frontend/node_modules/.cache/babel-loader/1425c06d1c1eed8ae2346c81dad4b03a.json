{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treto\\\\OneDrive\\\\Documents\\\\ING 4\\\\WEB\\\\PROJECT_WEB_OCRES\\\\frontend\\\\src\\\\components\\\\nextWorker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  default: axios\n} = require('axios'); //Give the next workers for the next events\n\n\nexport default function NextWorker() {\n  _s();\n\n  const [events, setEvents] = useState([]);\n\n  const fetchEvents = async () => {\n    await axios.get('http://localhost:9000/events').then(all => setEvents(all.data));\n  };\n\n  useEffect(() => {\n    fetchEvents(); //console.log( {events} );\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list_events\",\n    children: events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"eventTitle\",\n        children: event.event\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"couvreurs\",\n        children: [\"Couvert par : \", event.couvreurs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"position\",\n        children: [\"Lieu : \", event.position.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n} // ----------------------------- MongoDB ----------------------------------\n\n_s(NextWorker, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n\n_c = NextWorker;\n\nconst {\n  MongoClient\n} = require(\"mongodb\");\n\nconst url = \"mongodb+srv://admin:admin@cluster0.2ztwl.mongodb.net/?retryWrites=true&w=majority\";\nconst client = new MongoClient(url);\n\nasync function run() {\n  try {\n    console.log(\"oui\");\n    await client.connect();\n    console.log(\"Connected correctly to server\");\n    const db = client.db(\"test\"); // Use the collection \"people\"\n\n    const col = db.collection(\"people\"); // Construct a document                                                                                                                                                              \n\n    let personDocument = {\n      \"name\": {\n        \"first\": \"Thomas\",\n        \"last\": \"Retout\"\n      },\n      \"birth\": new Date(2000, 2, 12),\n      // June 23, 1912                                                                                                                                 \n      \"death\": new Date(2086, 10, 7),\n      // June 7, 1954                                                                                                                                  \n      \"contribs\": [\"Turing machine\", \"IoT\", \"Javascript\"],\n      \"views\": 120\n    }; // Insert a single document, wait for promise so we can read it back\n\n    const p = await col.insertOne(personDocument); // Find one document\n\n    const myFDoc = await col.findOne(); //Find and update a doc\n    //const myDoc = await col.findOneAndUpdate({views: 120},{$set: {\"views\" : \"357\"}});\n    // Print to the console\n\n    console.log(myFDoc);\n  } catch (err) {\n    console.log(err.stack);\n  } finally {\n    await client.close();\n  }\n}\n\nrun().catch(console.dir); // ------------------------------------------------------------------------\n\nvar _c;\n\n$RefreshReg$(_c, \"NextWorker\");","map":{"version":3,"sources":["C:/Users/treto/OneDrive/Documents/ING 4/WEB/PROJECT_WEB_OCRES/frontend/src/components/nextWorker.js"],"names":["React","useState","useEffect","default","axios","require","NextWorker","events","setEvents","fetchEvents","get","then","all","data","map","event","couvreurs","position","name","MongoClient","url","client","run","console","log","connect","db","col","collection","personDocument","Date","p","insertOne","myFDoc","findOne","err","stack","close","catch","dir"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nconst { default: axios } = require('axios');\r\n\r\n\r\n//Give the next workers for the next events\r\nexport default function NextWorker(){\r\n\r\n    const [events, setEvents] = useState([]);\r\n\r\n    const fetchEvents = async () => {\r\n        await axios.get('http://localhost:9000/events').then(all => setEvents(all.data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchEvents();\r\n        //console.log( {events} );\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <div className='list_events'>\r\n            {events.map(event => (\r\n                <div className='event'>\r\n                    <h3 className='eventTitle'>{event.event}</h3>\r\n                    <h5 className='couvreurs'>Couvert par : {event.couvreurs}</h5>\r\n                    <h5 className='position'>Lieu : {event.position.name}</h5>\r\n                </div>\r\n            ))}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n// ----------------------------- MongoDB ----------------------------------\r\nconst { MongoClient } = require(\"mongodb\");\r\nconst url = \"mongodb+srv://admin:admin@cluster0.2ztwl.mongodb.net/?retryWrites=true&w=majority\";\r\nconst client = new MongoClient(url);\r\n\r\nasync function run() {\r\n    try {\r\n        console.log(\"oui\");\r\n        await client.connect();\r\n        console.log(\"Connected correctly to server\");\r\n        const db = client.db(\"test\");\r\n         // Use the collection \"people\"\r\n         const col = db.collection(\"people\");\r\n         // Construct a document                                                                                                                                                              \r\n         let personDocument = {\r\n             \"name\": { \"first\": \"Thomas\", \"last\": \"Retout\" },\r\n             \"birth\": new Date(2000, 2, 12), // June 23, 1912                                                                                                                                 \r\n             \"death\": new Date(2086, 10, 7),  // June 7, 1954                                                                                                                                  \r\n             \"contribs\": [ \"Turing machine\", \"IoT\", \"Javascript\" ],\r\n             \"views\": 120\r\n         }\r\n         // Insert a single document, wait for promise so we can read it back\r\n         const p = await col.insertOne(personDocument);\r\n         // Find one document\r\n         const myFDoc = await col.findOne();\r\n         //Find and update a doc\r\n         //const myDoc = await col.findOneAndUpdate({views: 120},{$set: {\"views\" : \"357\"}});\r\n         // Print to the console\r\n         console.log(myFDoc);\r\n    } catch (err) {\r\n        console.log(err.stack);\r\n    }\r\n    finally {\r\n        await client.close();\r\n    }\r\n}\r\nrun().catch(console.dir);\r\n// ------------------------------------------------------------------------"]},"metadata":{},"sourceType":"module"}