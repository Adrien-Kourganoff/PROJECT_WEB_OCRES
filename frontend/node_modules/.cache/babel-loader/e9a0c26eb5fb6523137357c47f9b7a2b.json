{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, _ref) {\n    let {\n      code,\n      reasonCode,\n      template\n    } = _ref;\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, _ref2) {\n    let {\n      code,\n      template\n    } = _ref2;\n\n    for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      params[_key2 - 2] = arguments[_key2];\n    }\n\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      params[_key3 - 3] = arguments[_key3];\n    }\n\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral(_ref3) {\n    let {\n      pattern,\n      flags\n    } = _ref3;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 87 && token <= 122;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 86;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 52 && token <= 122;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 52 && token <= 126;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 27 && token <= 31;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 119 && token <= 121;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 84 && token <= 86;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 52 && token <= 86;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 35 && token <= 53;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 32;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 111 && token <= 113;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 114 && token <= 120;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 51;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\nfunction isTokenType(obj) {\n  return typeof obj === \"number\";\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[132].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 129;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref4) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref4;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(129);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(128, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(128, this.readWord1());\n    } else {\n      this.finishOp(25, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(29, 2);\n    } else {\n      this.finishOp(50, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(26, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 49 : 48;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 51;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 31 : 28;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(28, 3);\n      } else {\n        this.finishOp(code === 124 ? 37 : 38, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(35, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(28, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 39 : 41, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(40, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(32, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(28, 2);\n    } else {\n      this.finishOp(47, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(28, 3);\n        return;\n      }\n\n      this.finishOp(46, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(45, 2);\n      return;\n    }\n\n    this.finishOp(43, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(28, size + 1);\n        return;\n      }\n\n      this.finishOp(46, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(45, 2);\n      return;\n    }\n\n    this.finishOp(44, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(42, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 27 : 33, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(28, 3);\n      } else {\n        this.finishOp(36, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(22);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(34, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(24);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(127, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(125, str);\n      return;\n    }\n\n    this.finishToken(124, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(125, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(126, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(124, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(123, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(20)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(23);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(22);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(20, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(122, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    switch (type) {\n      case 8:\n        context.pop();\n        break;\n\n      case 5:\n      case 7:\n      case 23:\n        context.push(types.brace);\n        break;\n\n      case 22:\n        if (context[context.length - 1] === types.template) {\n          context.pop();\n        } else {\n          context.push(types.template);\n        }\n\n        break;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, template) {\n    if (!this.eatContextual(token)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(129) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos) {\n    let messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\"\n    };\n\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\n\n    if (!andThrow) {\n      return hasErrors;\n    } else if (hasErrors) {\n      if (shorthandAssign >= 0) {\n        this.unexpected(shorthandAssign);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n    let endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 91;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 123 && type !== 13 && type !== 26) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(101);\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(48)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(48)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(43)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(74)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(62)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(117)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(120)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(121)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(119)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(76)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(123)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(77)) {\n        this.next();\n\n        if (!this.isContextual(120) && !this.match(81)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(115, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(76);\n\n    if (this.eat(59)) {\n      if (this.match(62) || this.match(74)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(69) || this.isLet() || (this.isContextual(120) || this.isContextual(119)) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(68) || this.match(62) || this.match(74) || this.isContextual(121)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(49) || this.match(5) || this.isContextual(119) || this.isContextual(120) || this.isContextual(121)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(102);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(75)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(108)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(104)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(27);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(120);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(27);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(27)) {\n      this.eat(27);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(43) || this.match(132)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(44)) {\n        this.expect(12);\n      }\n    } while (!this.match(44));\n\n    this.expect(44);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(43);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(44)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(44)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(44);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(43);\n\n    while (!this.match(44)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(44)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(44);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(119);\n    node.extends = [];\n\n    if (this.eat(75)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(124) || this.match(123) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(43) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(72)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref5) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref5;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(109)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(98)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(43)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(92) || this.isContextual(97)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(8) && !this.match(9)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(43) || this.match(10)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(81);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 72;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(72)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 43:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(72)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 123:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 79:\n      case 80:\n        node.value = this.match(79);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 47:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(124)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(125)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case 124:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 125:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 82:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 78:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 72:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 49:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 81:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(119)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(41);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(41)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(39);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(39)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 122 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(47)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(119)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(116)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(74) || tokenIsIdentifier(this.state.type) || this.match(62) || this.match(68) || this.match(76)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 116) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 116) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(116)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(120)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(121)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(119)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(116)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(120) && this.lookahead().type === 49) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(115)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(122, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 44 : 43, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"TypeCastExpression\") {\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(43) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(43)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(43)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(43)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(104)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(43)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(43) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.PatternIsOptional);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(27) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(81)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(120)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 49) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 49) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(87) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(87)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 72:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(43)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(132) || this.match(43))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(43)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(43)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(43)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(43)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, _ref6) {\n    let {\n      enumName,\n      memberName\n    } = _ref6;\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, _ref7) {\n    let {\n      enumName,\n      memberName\n    } = _ref7;\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, _ref8) {\n    let {\n      enumName,\n      memberName\n    } = _ref8;\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, _ref9) {\n    let {\n      enumName\n    } = _ref9;\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, _ref10) {\n    let {\n      enumName,\n      suppliedType\n    } = _ref10;\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, _ref11) {\n    let {\n      enumName,\n      explicitType,\n      memberName\n    } = _ref11;\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, _ref12) {\n    let {\n      enumName,\n      memberName\n    } = _ref12;\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref13) {\n    let {\n      enumName\n    } = _ref13;\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 124:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 123:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 79:\n      case 80:\n        {\n          const literal = this.parseBooleanLiteral(this.match(79));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(27) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers(_ref14) {\n    let {\n      enumName,\n      explicitType\n    } = _ref14;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref15) {\n    let {\n      enumName\n    } = _ref15;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref16) {\n    let {\n      enumName\n    } = _ref16;\n\n    if (this.eatContextual(95)) {\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, _ref17) {\n    let {\n      enumName,\n      nameLoc\n    } = _ref17;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(132);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(131, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(123, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(130, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(130)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case 132:\n      case 123:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(5)) {\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(27) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(133)) {\n      this.expect(133);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(50) && !this.match(133)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(50);\n    this.expect(133);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(133)) {\n      this.expect(133);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(133);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 132:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(50)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 131:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(43)) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(131)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(132)) {\n      return this.jsxParseElement();\n    } else if (this.match(43) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(132);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(133);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(132);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 50 && prevType === 132) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 132) {\n      context.push(types.j_expr, types.j_oTag);\n    } else if (type === 133) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === 50 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(49) || this.match(21) || this.match(128) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(44);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(43);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(44);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(77);\n    this.expect(10);\n\n    if (!this.match(123)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.match(43)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.match(43)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(81);\n\n    if (this.match(77)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(75);\n    node.default = this.tsEatThenParseType(27);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(43)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(43) || this.match(132)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 69) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(43)) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(43)) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(43)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(71)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(43)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(47)) {\n      return this.isContextual(112);\n    }\n\n    if (this.isContextual(112)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(52);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(52);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(47)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(112);\n    } else if (this.eatContextual(112)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(87) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(47)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 124:\n        case 125:\n        case 123:\n        case 79:\n        case 80:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(107) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 123:\n      case 124:\n      case 125:\n      case 79:\n      case 80:\n        return this.tsParseLiteralTypeNode();\n\n      case 47:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 124 && nextToken.type !== 125) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 72:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 81:\n        return this.tsParseTypeQuery();\n\n      case 77:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 22:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 82 || type === 78) {\n            const nodeType = type === 82 ? \"TSVoidKeyword\" : type === 78 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(106);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(106) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 41);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 39);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(43)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(72)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(5)) {\n          ++braceStackCounter;\n        } else if (this.match(8)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(0)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(0)) {\n          ++braceStackCounter;\n        } else if (this.match(3)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(27)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(72)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(107) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 100) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(72)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(75)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(114) && this.lookahead().type === 71;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(71)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(44);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.match(43)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(75)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(27);\n\n      if (this.isContextual(105) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(123) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(27)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(103)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(123)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(27);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(110) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(110);\n    this.expect(10);\n\n    if (!this.match(123)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(93)) {\n      starttype = 68;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 62:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 74:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 69:\n          if (this.match(69) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(69);\n            this.expectContextual(116);\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 68:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 103:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n\n        default:\n          {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(nany, this.state.value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(74) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || tokenIsIdentifier(this.state.type)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(123)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(43)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(43);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expect(44);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(33)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(43)) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(22)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(43)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(52) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(87)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(49) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(120) && ahead.type !== 12 && ahead.type !== 91 && ahead.type !== 27) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 27) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(77)) {\n      this.next();\n\n      if (this.isContextual(120) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(27)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(87)) {\n      const decl = node;\n      this.expectContextual(118);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(120) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(114) && this.lookahead().type === 74;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(119)) {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 69) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 116) {\n        const node = this.startNode();\n        this.next();\n        this.expectContextual(116);\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(98) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(115);\n\n    if (isDeclare && (this.isContextual(115) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(104)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(33)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(27)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(27)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(43)) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(104)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(33)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(132) || this.match(43))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(43)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(node.start, TSErrors.ReservedArrowTypeParam);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(43)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription) {\n    var _expr$extra2;\n\n    for (var _len9 = arguments.length, args = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n      args[_key9 - 2] = arguments[_key9];\n    }\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 72:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(43)) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(43) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(33) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(44, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(43, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 43) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 44) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(43)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        args[_key10 - 1] = arguments[_key10];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(74)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(119)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 74);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const pos = leftOfAs.start;\n\n    if (this.isContextual(87)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(87)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = this.parseIdentifier();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = this.parseIdentifier();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = this.parseIdentifier();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(pos, isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports);\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(87)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n    }\n  }\n\n};\n\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(134)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(134);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(134, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(93)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 134) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(75) || this.match(134) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(91) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(59)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(134), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(91) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(91);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(48)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(24) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(24)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(27)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription) {\n    let bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n    let checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n    let disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n    let strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(12)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(129)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(99)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(27)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProto >= startPos) {\n          refExpressionErrors.doubleProto = -1;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= startPos) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(128) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      const {\n        start\n      } = left;\n\n      if (minPrec >= tokenOperatorPrecedence(52) || !this.prodParam.hasIn || !this.match(52)) {\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(52))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 35) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 37 || op === 38;\n        const coalesce = op === 36;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(38);\n        }\n\n        this.next();\n\n        if (op === 35 && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.state.type === 90 && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 37 || nextOp === 38) || logical && nextOp === 36) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 35:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(99)) {\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      start\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(start, ErrorMessages.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(51)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(90);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(32);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(66)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(83);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(48);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(15)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(22)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(18)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(128) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(3);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 73:\n        return this.parseSuper();\n\n      case 77:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 72:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 84:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 50:\n      case 29:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 124:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 125:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 126:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 123:\n        return this.parseStringLiteral(this.state.value);\n\n      case 78:\n        return this.parseNullLiteral();\n\n      case 79:\n        return this.parseBooleanLiteral(true);\n\n      case 80:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 62:\n        return this.parseFunctionOrFunctionSent();\n\n      case 24:\n        this.parseDecorators();\n\n      case 74:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 71:\n        return this.parseNewOrNewTarget();\n\n      case 22:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case 128:\n        {\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 31:\n        {\n          return this.parseTopicReferenceThenEqualsSign(48, \"%\");\n        }\n\n      case 30:\n        {\n          return this.parseTopicReferenceThenEqualsSign(40, \"^\");\n        }\n\n      case 40:\n      case 48:\n      case 25:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 43:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(117) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 62) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 84) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc.column--;\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const start = this.state.start;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenLabelName(tokenType) === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === 25;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(96)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(94)) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(11)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(18)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(22);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(23);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(8);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(49));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(24)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(24)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(49);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(49);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(49)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(27) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 124:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 123:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 125:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 126:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 128:\n            {\n              const privateKeyPos = this.state.start + 1;\n              this.raise(privateKeyPos, ErrorMessages.UnexpectedPrivateField);\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 128) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(0) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(122);\n      }\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(49)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(47) || this.match(10) || this.match(0) || this.match(22) || this.match(127) || this.match(50) || this.hasPlugin(\"v8intrinsic\") && this.match(48);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(49);\n\n      switch (this.state.type) {\n        case 13:\n        case 129:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(19)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (type === 128) {\n      {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: getExportedToken(25),\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: getExportedToken(122),\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n        i++;\n        continue;\n      }\n    }\n\n    if (typeof type === \"number\") {\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 129;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(26)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(93)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(24)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 68;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 54:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 57:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 58:\n        return this.parseDebuggerStatement(node);\n\n      case 84:\n        return this.parseDoStatement(node);\n\n      case 85:\n        return this.parseForStatement(node);\n\n      case 62:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 74:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 63:\n        return this.parseIfStatement(node);\n\n      case 64:\n        return this.parseReturnStatement(node);\n\n      case 65:\n        return this.parseSwitchStatement(node);\n\n      case 66:\n        return this.parseThrowStatement(node);\n\n      case 67:\n        return this.parseTryStatement(node);\n\n      case 69:\n      case 68:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 86:\n        return this.parseWhileStatement(node);\n\n      case 70:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 77:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 76:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 77) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(74);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(24)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(76)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(86);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(90)) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(93);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(68) || this.match(69) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(52) || this.isContextual(95)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(89);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(95);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(52)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(60) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(55) || this.match(59)) {\n        const isCase = this.match(55);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(56)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(61) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(65) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(52);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(27)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(52) || this.isContextual(95))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(52) || this.isContextual(95)))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(49) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(49);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(27) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(24)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(98);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(49)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(128);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(128);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(49);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(128);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(49) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(128);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === 122 || type === 123) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === 128) {\n      if (value === \"constructor\") {\n        this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(27) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(75) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(59)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(49);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(87)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(89)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(62) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(74)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(24)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(69) || this.match(68) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 89 && !this.state.containsEsc || type === 93) {\n        return false;\n      }\n\n      if ((type === 120 || type === 119) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 91 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(59)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(59) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(91)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 24) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return type === 68 || type === 69 || type === 62 || type === 74 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(120);\n      const isString = this.match(123);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(87)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(123)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(123)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(91);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(123)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(123)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(123)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(70) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(123)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(88) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(49)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(87);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(123);\n      const isMaybeTypeOnly = this.isContextual(120);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(87)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"sources":["C:/Users/tara0/OneDrive/Bureau/Travail/Ing 4/Techno web/PROJECT_WEB_OCRES/frontend/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","constructor","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","name","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","templates","keys","forEach","template","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","token","preserveSpace","types","brace","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","getExportedToken","isTokenType","obj","context","pop","j_expr","j_oTag","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","missingPlugin","expectOnePlugin","names","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","reportReservedArrowTypeParam","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","_resultError$pos","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","pipeProposal","parseTopicReference","lookaheadCh","codePointAt","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","privateKeyPos","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","checkHackPipeBodyEarlyErrors","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\r\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\r\nfunction isNewLine(code) {\r\n  switch (code) {\r\n    case 10:\r\n    case 13:\r\n    case 8232:\r\n    case 8233:\r\n      return true;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n}\r\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\r\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\r\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\r\nfunction isWhitespace(code) {\r\n  switch (code) {\r\n    case 0x0009:\r\n    case 0x000b:\r\n    case 0x000c:\r\n    case 32:\r\n    case 160:\r\n    case 5760:\r\n    case 0x2000:\r\n    case 0x2001:\r\n    case 0x2002:\r\n    case 0x2003:\r\n    case 0x2004:\r\n    case 0x2005:\r\n    case 0x2006:\r\n    case 0x2007:\r\n    case 0x2008:\r\n    case 0x2009:\r\n    case 0x200a:\r\n    case 0x202f:\r\n    case 0x205f:\r\n    case 0x3000:\r\n    case 0xfeff:\r\n      return true;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nclass Position {\r\n  constructor(line, col) {\r\n    this.line = void 0;\r\n    this.column = void 0;\r\n    this.line = line;\r\n    this.column = col;\r\n  }\r\n\r\n}\r\nclass SourceLocation {\r\n  constructor(start, end) {\r\n    this.start = void 0;\r\n    this.end = void 0;\r\n    this.filename = void 0;\r\n    this.identifierName = void 0;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n}\r\nfunction getLineInfo(input, offset) {\r\n  let line = 1;\r\n  let lineStart = 0;\r\n  let match;\r\n  lineBreakG.lastIndex = 0;\r\n\r\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\r\n    line++;\r\n    lineStart = lineBreakG.lastIndex;\r\n  }\r\n\r\n  return new Position(line, offset - lineStart);\r\n}\r\n\r\nclass BaseParser {\r\n  constructor() {\r\n    this.sawUnambiguousESM = false;\r\n    this.ambiguousScriptDifferentAst = false;\r\n  }\r\n\r\n  hasPlugin(name) {\r\n    return this.plugins.has(name);\r\n  }\r\n\r\n  getPluginOption(plugin, name) {\r\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\r\n  }\r\n\r\n}\r\n\r\nfunction setTrailingComments(node, comments) {\r\n  if (node.trailingComments === undefined) {\r\n    node.trailingComments = comments;\r\n  } else {\r\n    node.trailingComments.unshift(...comments);\r\n  }\r\n}\r\n\r\nfunction setLeadingComments(node, comments) {\r\n  if (node.leadingComments === undefined) {\r\n    node.leadingComments = comments;\r\n  } else {\r\n    node.leadingComments.unshift(...comments);\r\n  }\r\n}\r\n\r\nfunction setInnerComments(node, comments) {\r\n  if (node.innerComments === undefined) {\r\n    node.innerComments = comments;\r\n  } else {\r\n    node.innerComments.unshift(...comments);\r\n  }\r\n}\r\n\r\nfunction adjustInnerComments(node, elements, commentWS) {\r\n  let lastElement = null;\r\n  let i = elements.length;\r\n\r\n  while (lastElement === null && i > 0) {\r\n    lastElement = elements[--i];\r\n  }\r\n\r\n  if (lastElement === null || lastElement.start > commentWS.start) {\r\n    setInnerComments(node, commentWS.comments);\r\n  } else {\r\n    setTrailingComments(lastElement, commentWS.comments);\r\n  }\r\n}\r\n\r\nclass CommentsParser extends BaseParser {\r\n  addComment(comment) {\r\n    if (this.filename) comment.loc.filename = this.filename;\r\n    this.state.comments.push(comment);\r\n  }\r\n\r\n  processComment(node) {\r\n    const {\r\n      commentStack\r\n    } = this.state;\r\n    const commentStackLength = commentStack.length;\r\n    if (commentStackLength === 0) return;\r\n    let i = commentStackLength - 1;\r\n    const lastCommentWS = commentStack[i];\r\n\r\n    if (lastCommentWS.start === node.end) {\r\n      lastCommentWS.leadingNode = node;\r\n      i--;\r\n    }\r\n\r\n    const {\r\n      start: nodeStart\r\n    } = node;\r\n\r\n    for (; i >= 0; i--) {\r\n      const commentWS = commentStack[i];\r\n      const commentEnd = commentWS.end;\r\n\r\n      if (commentEnd > nodeStart) {\r\n        commentWS.containingNode = node;\r\n        this.finalizeComment(commentWS);\r\n        commentStack.splice(i, 1);\r\n      } else {\r\n        if (commentEnd === nodeStart) {\r\n          commentWS.trailingNode = node;\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  finalizeComment(commentWS) {\r\n    const {\r\n      comments\r\n    } = commentWS;\r\n\r\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\r\n      if (commentWS.leadingNode !== null) {\r\n        setTrailingComments(commentWS.leadingNode, comments);\r\n      }\r\n\r\n      if (commentWS.trailingNode !== null) {\r\n        setLeadingComments(commentWS.trailingNode, comments);\r\n      }\r\n    } else {\r\n      const {\r\n        containingNode: node,\r\n        start: commentStart\r\n      } = commentWS;\r\n\r\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\r\n        switch (node.type) {\r\n          case \"ObjectExpression\":\r\n          case \"ObjectPattern\":\r\n          case \"RecordExpression\":\r\n            adjustInnerComments(node, node.properties, commentWS);\r\n            break;\r\n\r\n          case \"CallExpression\":\r\n          case \"OptionalCallExpression\":\r\n            adjustInnerComments(node, node.arguments, commentWS);\r\n            break;\r\n\r\n          case \"FunctionDeclaration\":\r\n          case \"FunctionExpression\":\r\n          case \"ArrowFunctionExpression\":\r\n          case \"ObjectMethod\":\r\n          case \"ClassMethod\":\r\n          case \"ClassPrivateMethod\":\r\n            adjustInnerComments(node, node.params, commentWS);\r\n            break;\r\n\r\n          case \"ArrayExpression\":\r\n          case \"ArrayPattern\":\r\n          case \"TupleExpression\":\r\n            adjustInnerComments(node, node.elements, commentWS);\r\n            break;\r\n\r\n          case \"ExportNamedDeclaration\":\r\n          case \"ImportDeclaration\":\r\n            adjustInnerComments(node, node.specifiers, commentWS);\r\n            break;\r\n\r\n          default:\r\n            {\r\n              setInnerComments(node, comments);\r\n            }\r\n        }\r\n      } else {\r\n        setInnerComments(node, comments);\r\n      }\r\n    }\r\n  }\r\n\r\n  finalizeRemainingComments() {\r\n    const {\r\n      commentStack\r\n    } = this.state;\r\n\r\n    for (let i = commentStack.length - 1; i >= 0; i--) {\r\n      this.finalizeComment(commentStack[i]);\r\n    }\r\n\r\n    this.state.commentStack = [];\r\n  }\r\n\r\n  resetPreviousNodeTrailingComments(node) {\r\n    const {\r\n      commentStack\r\n    } = this.state;\r\n    const {\r\n      length\r\n    } = commentStack;\r\n    if (length === 0) return;\r\n    const commentWS = commentStack[length - 1];\r\n\r\n    if (commentWS.leadingNode === node) {\r\n      commentWS.leadingNode = null;\r\n    }\r\n  }\r\n\r\n  takeSurroundingComments(node, start, end) {\r\n    const {\r\n      commentStack\r\n    } = this.state;\r\n    const commentStackLength = commentStack.length;\r\n    if (commentStackLength === 0) return;\r\n    let i = commentStackLength - 1;\r\n\r\n    for (; i >= 0; i--) {\r\n      const commentWS = commentStack[i];\r\n      const commentEnd = commentWS.end;\r\n      const commentStart = commentWS.start;\r\n\r\n      if (commentStart === end) {\r\n        commentWS.leadingNode = node;\r\n      } else if (commentEnd === start) {\r\n        commentWS.trailingNode = node;\r\n      } else if (commentEnd < start) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst ErrorCodes = Object.freeze({\r\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\r\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\r\n});\r\n\r\nconst ErrorMessages = makeErrorTemplates({\r\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\r\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\r\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\r\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\r\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\r\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\r\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\r\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\r\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\r\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\r\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\r\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\r\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\r\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\r\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\r\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\r\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\r\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\r\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\r\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\r\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\r\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\r\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\r\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\r\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\r\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\r\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\r\n  DuplicateProto: \"Redefinition of __proto__ property.\",\r\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\r\n  ElementAfterRest: \"Rest element must be last element.\",\r\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\r\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\r\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\r\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\r\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\r\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\r\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\r\n  IllegalBreakContinue: \"Unsyntactic %0.\",\r\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\r\n  IllegalReturn: \"'return' outside of function.\",\r\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\r\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\r\n  ImportCallArity: \"`import()` requires exactly %0.\",\r\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\r\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\r\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\r\n  InvalidCodePoint: \"Code point out of bounds.\",\r\n  InvalidDecimal: \"Invalid decimal.\",\r\n  InvalidDigit: \"Expected number in radix %0.\",\r\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\r\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\r\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\r\n  InvalidIdentifier: \"Invalid identifier %0.\",\r\n  InvalidLhs: \"Invalid left-hand side in %0.\",\r\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\r\n  InvalidNumber: \"Invalid number.\",\r\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\r\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\r\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\r\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\r\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\r\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\r\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\r\n  LabelRedeclaration: \"Label '%0' is already declared.\",\r\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\r\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\r\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\r\n  MissingClassName: \"A class name is required.\",\r\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\r\n  MissingSemicolon: \"Missing semicolon.\",\r\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\r\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\r\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\r\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\r\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\r\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\r\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\r\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\r\n  NewlineAfterThrow: \"Illegal newline after throw.\",\r\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\r\n  NumberIdentifier: \"Identifier directly after number.\",\r\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\r\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\r\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\r\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\r\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\r\n  ParamDupe: \"Argument name clash.\",\r\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\r\n  PatternHasMethod: \"Object pattern can't contain methods.\",\r\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\r\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\r\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\r\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\r\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\r\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\r\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\r\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\r\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\r\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\r\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\r\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\r\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\r\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\r\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\r\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\r\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\r\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\r\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\r\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\r\n  StaticPrototype: \"Classes may not have static property named prototype.\",\r\n  StrictDelete: \"Deleting local variable in strict mode.\",\r\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\r\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\r\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\r\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\r\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\r\n  StrictWith: \"'with' in strict mode.\",\r\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\r\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\r\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\r\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\r\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\r\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\r\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\r\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\r\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\r\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\r\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\r\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\r\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\r\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\r\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\r\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\r\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\r\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\r\n  UnexpectedToken: \"Unexpected token '%0'.\",\r\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\r\n  UnsupportedBind: \"Binding should be performed on object property.\",\r\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\r\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\r\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\r\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\r\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\r\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\r\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\r\n  UnterminatedComment: \"Unterminated comment.\",\r\n  UnterminatedRegExp: \"Unterminated regular expression.\",\r\n  UnterminatedString: \"Unterminated string constant.\",\r\n  UnterminatedTemplate: \"Unterminated template.\",\r\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\r\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\r\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\r\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\r\n}, ErrorCodes.SyntaxError);\r\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\r\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\r\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\r\n}, ErrorCodes.SourceTypeModuleError);\r\n\r\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\r\n  {\r\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\r\n      return \"OptionalBindingPattern\";\r\n    }\r\n  }\r\n  return reasonCode;\r\n}\r\n\r\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\r\n  const templates = {};\r\n  Object.keys(messages).forEach(reasonCode => {\r\n    templates[reasonCode] = Object.freeze({\r\n      code,\r\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\r\n      template: messages[reasonCode]\r\n    });\r\n  });\r\n  return Object.freeze(templates);\r\n}\r\nclass ParserError extends CommentsParser {\r\n  getLocationForPosition(pos) {\r\n    let loc;\r\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\r\n    return loc;\r\n  }\r\n\r\n  raise(pos, {\r\n    code,\r\n    reasonCode,\r\n    template\r\n  }, ...params) {\r\n    return this.raiseWithData(pos, {\r\n      code,\r\n      reasonCode\r\n    }, template, ...params);\r\n  }\r\n\r\n  raiseOverwrite(pos, {\r\n    code,\r\n    template\r\n  }, ...params) {\r\n    const loc = this.getLocationForPosition(pos);\r\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\r\n\r\n    if (this.options.errorRecovery) {\r\n      const errors = this.state.errors;\r\n\r\n      for (let i = errors.length - 1; i >= 0; i--) {\r\n        const error = errors[i];\r\n\r\n        if (error.pos === pos) {\r\n          return Object.assign(error, {\r\n            message\r\n          });\r\n        } else if (error.pos < pos) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._raise({\r\n      code,\r\n      loc,\r\n      pos\r\n    }, message);\r\n  }\r\n\r\n  raiseWithData(pos, data, errorTemplate, ...params) {\r\n    const loc = this.getLocationForPosition(pos);\r\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\r\n    return this._raise(Object.assign({\r\n      loc,\r\n      pos\r\n    }, data), message);\r\n  }\r\n\r\n  _raise(errorContext, message) {\r\n    const err = new SyntaxError(message);\r\n    Object.assign(err, errorContext);\r\n\r\n    if (this.options.errorRecovery) {\r\n      if (!this.isLookahead) this.state.errors.push(err);\r\n      return err;\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nvar estree = (superClass => class extends superClass {\r\n  parseRegExpLiteral({\r\n    pattern,\r\n    flags\r\n  }) {\r\n    let regex = null;\r\n\r\n    try {\r\n      regex = new RegExp(pattern, flags);\r\n    } catch (e) {}\r\n\r\n    const node = this.estreeParseLiteral(regex);\r\n    node.regex = {\r\n      pattern,\r\n      flags\r\n    };\r\n    return node;\r\n  }\r\n\r\n  parseBigIntLiteral(value) {\r\n    let bigInt;\r\n\r\n    try {\r\n      bigInt = BigInt(value);\r\n    } catch (_unused) {\r\n      bigInt = null;\r\n    }\r\n\r\n    const node = this.estreeParseLiteral(bigInt);\r\n    node.bigint = String(node.value || value);\r\n    return node;\r\n  }\r\n\r\n  parseDecimalLiteral(value) {\r\n    const decimal = null;\r\n    const node = this.estreeParseLiteral(decimal);\r\n    node.decimal = String(node.value || value);\r\n    return node;\r\n  }\r\n\r\n  estreeParseLiteral(value) {\r\n    return this.parseLiteral(value, \"Literal\");\r\n  }\r\n\r\n  parseStringLiteral(value) {\r\n    return this.estreeParseLiteral(value);\r\n  }\r\n\r\n  parseNumericLiteral(value) {\r\n    return this.estreeParseLiteral(value);\r\n  }\r\n\r\n  parseNullLiteral() {\r\n    return this.estreeParseLiteral(null);\r\n  }\r\n\r\n  parseBooleanLiteral(value) {\r\n    return this.estreeParseLiteral(value);\r\n  }\r\n\r\n  directiveToStmt(directive) {\r\n    const directiveLiteral = directive.value;\r\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\r\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\r\n    expression.value = directiveLiteral.extra.expressionValue;\r\n    expression.raw = directiveLiteral.extra.raw;\r\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\r\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\r\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\r\n  }\r\n\r\n  initFunction(node, isAsync) {\r\n    super.initFunction(node, isAsync);\r\n    node.expression = false;\r\n  }\r\n\r\n  checkDeclaration(node) {\r\n    if (node != null && this.isObjectProperty(node)) {\r\n      this.checkDeclaration(node.value);\r\n    } else {\r\n      super.checkDeclaration(node);\r\n    }\r\n  }\r\n\r\n  getObjectOrClassMethodParams(method) {\r\n    return method.value.params;\r\n  }\r\n\r\n  isValidDirective(stmt) {\r\n    var _stmt$expression$extr;\r\n\r\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\r\n  }\r\n\r\n  parseBlockBody(node, ...args) {\r\n    super.parseBlockBody(node, ...args);\r\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\r\n    node.body = directiveStatements.concat(node.body);\r\n    delete node.directives;\r\n  }\r\n\r\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\r\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\r\n\r\n    if (method.typeParameters) {\r\n      method.value.typeParameters = method.typeParameters;\r\n      delete method.typeParameters;\r\n    }\r\n\r\n    classBody.body.push(method);\r\n  }\r\n\r\n  parsePrivateName() {\r\n    const node = super.parsePrivateName();\r\n    {\r\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\r\n        return node;\r\n      }\r\n    }\r\n    return this.convertPrivateNameToPrivateIdentifier(node);\r\n  }\r\n\r\n  convertPrivateNameToPrivateIdentifier(node) {\r\n    const name = super.getPrivateNameSV(node);\r\n    node = node;\r\n    delete node.id;\r\n    node.name = name;\r\n    node.type = \"PrivateIdentifier\";\r\n    return node;\r\n  }\r\n\r\n  isPrivateName(node) {\r\n    {\r\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\r\n        return super.isPrivateName(node);\r\n      }\r\n    }\r\n    return node.type === \"PrivateIdentifier\";\r\n  }\r\n\r\n  getPrivateNameSV(node) {\r\n    {\r\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\r\n        return super.getPrivateNameSV(node);\r\n      }\r\n    }\r\n    return node.name;\r\n  }\r\n\r\n  parseLiteral(value, type) {\r\n    const node = super.parseLiteral(value, type);\r\n    node.raw = node.extra.raw;\r\n    delete node.extra;\r\n    return node;\r\n  }\r\n\r\n  parseFunctionBody(node, allowExpression, isMethod = false) {\r\n    super.parseFunctionBody(node, allowExpression, isMethod);\r\n    node.expression = node.body.type !== \"BlockStatement\";\r\n  }\r\n\r\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\r\n    let funcNode = this.startNode();\r\n    funcNode.kind = node.kind;\r\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\r\n    funcNode.type = \"FunctionExpression\";\r\n    delete funcNode.kind;\r\n    node.value = funcNode;\r\n\r\n    if (type === \"ClassPrivateMethod\") {\r\n      node.computed = false;\r\n    }\r\n\r\n    type = \"MethodDefinition\";\r\n    return this.finishNode(node, type);\r\n  }\r\n\r\n  parseClassProperty(...args) {\r\n    const propertyNode = super.parseClassProperty(...args);\r\n    {\r\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\r\n        return propertyNode;\r\n      }\r\n    }\r\n    propertyNode.type = \"PropertyDefinition\";\r\n    return propertyNode;\r\n  }\r\n\r\n  parseClassPrivateProperty(...args) {\r\n    const propertyNode = super.parseClassPrivateProperty(...args);\r\n    {\r\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\r\n        return propertyNode;\r\n      }\r\n    }\r\n    propertyNode.type = \"PropertyDefinition\";\r\n    propertyNode.computed = false;\r\n    return propertyNode;\r\n  }\r\n\r\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\r\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\r\n\r\n    if (node) {\r\n      node.type = \"Property\";\r\n      if (node.kind === \"method\") node.kind = \"init\";\r\n      node.shorthand = false;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\r\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\r\n\r\n    if (node) {\r\n      node.kind = \"init\";\r\n      node.type = \"Property\";\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  isAssignable(node, isBinding) {\r\n    if (node != null && this.isObjectProperty(node)) {\r\n      return this.isAssignable(node.value, isBinding);\r\n    }\r\n\r\n    return super.isAssignable(node, isBinding);\r\n  }\r\n\r\n  toAssignable(node, isLHS = false) {\r\n    if (node != null && this.isObjectProperty(node)) {\r\n      this.toAssignable(node.value, isLHS);\r\n      return node;\r\n    }\r\n\r\n    return super.toAssignable(node, isLHS);\r\n  }\r\n\r\n  toAssignableObjectExpressionProp(prop, ...args) {\r\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\r\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\r\n    } else if (prop.method) {\r\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\r\n    } else {\r\n      super.toAssignableObjectExpressionProp(prop, ...args);\r\n    }\r\n  }\r\n\r\n  finishCallExpression(node, optional) {\r\n    super.finishCallExpression(node, optional);\r\n\r\n    if (node.callee.type === \"Import\") {\r\n      node.type = \"ImportExpression\";\r\n      node.source = node.arguments[0];\r\n\r\n      if (this.hasPlugin(\"importAssertions\")) {\r\n        var _node$arguments$;\r\n\r\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\r\n      }\r\n\r\n      delete node.arguments;\r\n      delete node.callee;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  toReferencedArguments(node) {\r\n    if (node.type === \"ImportExpression\") {\r\n      return;\r\n    }\r\n\r\n    super.toReferencedArguments(node);\r\n  }\r\n\r\n  parseExport(node) {\r\n    super.parseExport(node);\r\n\r\n    switch (node.type) {\r\n      case \"ExportAllDeclaration\":\r\n        node.exported = null;\r\n        break;\r\n\r\n      case \"ExportNamedDeclaration\":\r\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\r\n          node.type = \"ExportAllDeclaration\";\r\n          node.exported = node.specifiers[0].exported;\r\n          delete node.specifiers;\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\r\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\r\n\r\n    if (state.optionalChainMember) {\r\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\r\n        node.type = node.type.substring(8);\r\n      }\r\n\r\n      if (state.stop) {\r\n        const chain = this.startNodeAtNode(node);\r\n        chain.expression = node;\r\n        return this.finishNode(chain, \"ChainExpression\");\r\n      }\r\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\r\n      node.optional = false;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  hasPropertyAsPrivateName(node) {\r\n    if (node.type === \"ChainExpression\") {\r\n      node = node.expression;\r\n    }\r\n\r\n    return super.hasPropertyAsPrivateName(node);\r\n  }\r\n\r\n  isOptionalChain(node) {\r\n    return node.type === \"ChainExpression\";\r\n  }\r\n\r\n  isObjectProperty(node) {\r\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\r\n  }\r\n\r\n  isObjectMethod(node) {\r\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\r\n  }\r\n\r\n});\r\n\r\nclass TokContext {\r\n  constructor(token, preserveSpace) {\r\n    this.token = void 0;\r\n    this.preserveSpace = void 0;\r\n    this.token = token;\r\n    this.preserveSpace = !!preserveSpace;\r\n  }\r\n\r\n}\r\nconst types = {\r\n  brace: new TokContext(\"{\"),\r\n  template: new TokContext(\"`\", true)\r\n};\r\n\r\nconst beforeExpr = true;\r\nconst startsExpr = true;\r\nconst isLoop = true;\r\nconst isAssign = true;\r\nconst prefix = true;\r\nconst postfix = true;\r\nclass ExportedTokenType {\r\n  constructor(label, conf = {}) {\r\n    this.label = void 0;\r\n    this.keyword = void 0;\r\n    this.beforeExpr = void 0;\r\n    this.startsExpr = void 0;\r\n    this.rightAssociative = void 0;\r\n    this.isLoop = void 0;\r\n    this.isAssign = void 0;\r\n    this.prefix = void 0;\r\n    this.postfix = void 0;\r\n    this.binop = void 0;\r\n    this.label = label;\r\n    this.keyword = conf.keyword;\r\n    this.beforeExpr = !!conf.beforeExpr;\r\n    this.startsExpr = !!conf.startsExpr;\r\n    this.rightAssociative = !!conf.rightAssociative;\r\n    this.isLoop = !!conf.isLoop;\r\n    this.isAssign = !!conf.isAssign;\r\n    this.prefix = !!conf.prefix;\r\n    this.postfix = !!conf.postfix;\r\n    this.binop = conf.binop != null ? conf.binop : null;\r\n    {\r\n      this.updateContext = null;\r\n    }\r\n  }\r\n\r\n}\r\nconst keywords$1 = new Map();\r\n\r\nfunction createKeyword(name, options = {}) {\r\n  options.keyword = name;\r\n  const token = createToken(name, options);\r\n  keywords$1.set(name, token);\r\n  return token;\r\n}\r\n\r\nfunction createBinop(name, binop) {\r\n  return createToken(name, {\r\n    beforeExpr,\r\n    binop\r\n  });\r\n}\r\n\r\nlet tokenTypeCounter = -1;\r\nconst tokenTypes = [];\r\nconst tokenLabels = [];\r\nconst tokenBinops = [];\r\nconst tokenBeforeExprs = [];\r\nconst tokenStartsExprs = [];\r\nconst tokenPrefixes = [];\r\n\r\nfunction createToken(name, options = {}) {\r\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\r\n\r\n  ++tokenTypeCounter;\r\n  tokenLabels.push(name);\r\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\r\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\r\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\r\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\r\n  tokenTypes.push(new ExportedTokenType(name, options));\r\n  return tokenTypeCounter;\r\n}\r\n\r\nfunction createKeywordLike(name, options = {}) {\r\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\r\n\r\n  ++tokenTypeCounter;\r\n  keywords$1.set(name, tokenTypeCounter);\r\n  tokenLabels.push(name);\r\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\r\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\r\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\r\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\r\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\r\n  return tokenTypeCounter;\r\n}\r\n\r\nconst tt = {\r\n  bracketL: createToken(\"[\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  bracketHashL: createToken(\"#[\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  bracketBarL: createToken(\"[|\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  bracketR: createToken(\"]\"),\r\n  bracketBarR: createToken(\"|]\"),\r\n  braceL: createToken(\"{\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  braceBarL: createToken(\"{|\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  braceHashL: createToken(\"#{\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  braceR: createToken(\"}\", {\r\n    beforeExpr\r\n  }),\r\n  braceBarR: createToken(\"|}\"),\r\n  parenL: createToken(\"(\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  parenR: createToken(\")\"),\r\n  comma: createToken(\",\", {\r\n    beforeExpr\r\n  }),\r\n  semi: createToken(\";\", {\r\n    beforeExpr\r\n  }),\r\n  colon: createToken(\":\", {\r\n    beforeExpr\r\n  }),\r\n  doubleColon: createToken(\"::\", {\r\n    beforeExpr\r\n  }),\r\n  dot: createToken(\".\"),\r\n  question: createToken(\"?\", {\r\n    beforeExpr\r\n  }),\r\n  questionDot: createToken(\"?.\"),\r\n  arrow: createToken(\"=>\", {\r\n    beforeExpr\r\n  }),\r\n  template: createToken(\"template\"),\r\n  ellipsis: createToken(\"...\", {\r\n    beforeExpr\r\n  }),\r\n  backQuote: createToken(\"`\", {\r\n    startsExpr\r\n  }),\r\n  dollarBraceL: createToken(\"${\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  at: createToken(\"@\"),\r\n  hash: createToken(\"#\", {\r\n    startsExpr\r\n  }),\r\n  interpreterDirective: createToken(\"#!...\"),\r\n  eq: createToken(\"=\", {\r\n    beforeExpr,\r\n    isAssign\r\n  }),\r\n  assign: createToken(\"_=\", {\r\n    beforeExpr,\r\n    isAssign\r\n  }),\r\n  slashAssign: createToken(\"_=\", {\r\n    beforeExpr,\r\n    isAssign\r\n  }),\r\n  xorAssign: createToken(\"_=\", {\r\n    beforeExpr,\r\n    isAssign\r\n  }),\r\n  moduloAssign: createToken(\"_=\", {\r\n    beforeExpr,\r\n    isAssign\r\n  }),\r\n  incDec: createToken(\"++/--\", {\r\n    prefix,\r\n    postfix,\r\n    startsExpr\r\n  }),\r\n  bang: createToken(\"!\", {\r\n    beforeExpr,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  tilde: createToken(\"~\", {\r\n    beforeExpr,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  pipeline: createBinop(\"|>\", 0),\r\n  nullishCoalescing: createBinop(\"??\", 1),\r\n  logicalOR: createBinop(\"||\", 1),\r\n  logicalAND: createBinop(\"&&\", 2),\r\n  bitwiseOR: createBinop(\"|\", 3),\r\n  bitwiseXOR: createBinop(\"^\", 4),\r\n  bitwiseAND: createBinop(\"&\", 5),\r\n  equality: createBinop(\"==/!=/===/!==\", 6),\r\n  lt: createBinop(\"</>/<=/>=\", 7),\r\n  gt: createBinop(\"</>/<=/>=\", 7),\r\n  relational: createBinop(\"</>/<=/>=\", 7),\r\n  bitShift: createBinop(\"<</>>/>>>\", 8),\r\n  plusMin: createToken(\"+/-\", {\r\n    beforeExpr,\r\n    binop: 9,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  modulo: createToken(\"%\", {\r\n    binop: 10,\r\n    startsExpr\r\n  }),\r\n  star: createToken(\"*\", {\r\n    binop: 10\r\n  }),\r\n  slash: createBinop(\"/\", 10),\r\n  exponent: createToken(\"**\", {\r\n    beforeExpr,\r\n    binop: 11,\r\n    rightAssociative: true\r\n  }),\r\n  _in: createKeyword(\"in\", {\r\n    beforeExpr,\r\n    binop: 7\r\n  }),\r\n  _instanceof: createKeyword(\"instanceof\", {\r\n    beforeExpr,\r\n    binop: 7\r\n  }),\r\n  _break: createKeyword(\"break\"),\r\n  _case: createKeyword(\"case\", {\r\n    beforeExpr\r\n  }),\r\n  _catch: createKeyword(\"catch\"),\r\n  _continue: createKeyword(\"continue\"),\r\n  _debugger: createKeyword(\"debugger\"),\r\n  _default: createKeyword(\"default\", {\r\n    beforeExpr\r\n  }),\r\n  _else: createKeyword(\"else\", {\r\n    beforeExpr\r\n  }),\r\n  _finally: createKeyword(\"finally\"),\r\n  _function: createKeyword(\"function\", {\r\n    startsExpr\r\n  }),\r\n  _if: createKeyword(\"if\"),\r\n  _return: createKeyword(\"return\", {\r\n    beforeExpr\r\n  }),\r\n  _switch: createKeyword(\"switch\"),\r\n  _throw: createKeyword(\"throw\", {\r\n    beforeExpr,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  _try: createKeyword(\"try\"),\r\n  _var: createKeyword(\"var\"),\r\n  _const: createKeyword(\"const\"),\r\n  _with: createKeyword(\"with\"),\r\n  _new: createKeyword(\"new\", {\r\n    beforeExpr,\r\n    startsExpr\r\n  }),\r\n  _this: createKeyword(\"this\", {\r\n    startsExpr\r\n  }),\r\n  _super: createKeyword(\"super\", {\r\n    startsExpr\r\n  }),\r\n  _class: createKeyword(\"class\", {\r\n    startsExpr\r\n  }),\r\n  _extends: createKeyword(\"extends\", {\r\n    beforeExpr\r\n  }),\r\n  _export: createKeyword(\"export\"),\r\n  _import: createKeyword(\"import\", {\r\n    startsExpr\r\n  }),\r\n  _null: createKeyword(\"null\", {\r\n    startsExpr\r\n  }),\r\n  _true: createKeyword(\"true\", {\r\n    startsExpr\r\n  }),\r\n  _false: createKeyword(\"false\", {\r\n    startsExpr\r\n  }),\r\n  _typeof: createKeyword(\"typeof\", {\r\n    beforeExpr,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  _void: createKeyword(\"void\", {\r\n    beforeExpr,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  _delete: createKeyword(\"delete\", {\r\n    beforeExpr,\r\n    prefix,\r\n    startsExpr\r\n  }),\r\n  _do: createKeyword(\"do\", {\r\n    isLoop,\r\n    beforeExpr\r\n  }),\r\n  _for: createKeyword(\"for\", {\r\n    isLoop\r\n  }),\r\n  _while: createKeyword(\"while\", {\r\n    isLoop\r\n  }),\r\n  _as: createKeywordLike(\"as\", {\r\n    startsExpr\r\n  }),\r\n  _assert: createKeywordLike(\"assert\", {\r\n    startsExpr\r\n  }),\r\n  _async: createKeywordLike(\"async\", {\r\n    startsExpr\r\n  }),\r\n  _await: createKeywordLike(\"await\", {\r\n    startsExpr\r\n  }),\r\n  _from: createKeywordLike(\"from\", {\r\n    startsExpr\r\n  }),\r\n  _get: createKeywordLike(\"get\", {\r\n    startsExpr\r\n  }),\r\n  _let: createKeywordLike(\"let\", {\r\n    startsExpr\r\n  }),\r\n  _meta: createKeywordLike(\"meta\", {\r\n    startsExpr\r\n  }),\r\n  _of: createKeywordLike(\"of\", {\r\n    startsExpr\r\n  }),\r\n  _sent: createKeywordLike(\"sent\", {\r\n    startsExpr\r\n  }),\r\n  _set: createKeywordLike(\"set\", {\r\n    startsExpr\r\n  }),\r\n  _static: createKeywordLike(\"static\", {\r\n    startsExpr\r\n  }),\r\n  _yield: createKeywordLike(\"yield\", {\r\n    startsExpr\r\n  }),\r\n  _asserts: createKeywordLike(\"asserts\", {\r\n    startsExpr\r\n  }),\r\n  _checks: createKeywordLike(\"checks\", {\r\n    startsExpr\r\n  }),\r\n  _exports: createKeywordLike(\"exports\", {\r\n    startsExpr\r\n  }),\r\n  _global: createKeywordLike(\"global\", {\r\n    startsExpr\r\n  }),\r\n  _implements: createKeywordLike(\"implements\", {\r\n    startsExpr\r\n  }),\r\n  _intrinsic: createKeywordLike(\"intrinsic\", {\r\n    startsExpr\r\n  }),\r\n  _infer: createKeywordLike(\"infer\", {\r\n    startsExpr\r\n  }),\r\n  _is: createKeywordLike(\"is\", {\r\n    startsExpr\r\n  }),\r\n  _mixins: createKeywordLike(\"mixins\", {\r\n    startsExpr\r\n  }),\r\n  _proto: createKeywordLike(\"proto\", {\r\n    startsExpr\r\n  }),\r\n  _require: createKeywordLike(\"require\", {\r\n    startsExpr\r\n  }),\r\n  _keyof: createKeywordLike(\"keyof\", {\r\n    startsExpr\r\n  }),\r\n  _readonly: createKeywordLike(\"readonly\", {\r\n    startsExpr\r\n  }),\r\n  _unique: createKeywordLike(\"unique\", {\r\n    startsExpr\r\n  }),\r\n  _abstract: createKeywordLike(\"abstract\", {\r\n    startsExpr\r\n  }),\r\n  _declare: createKeywordLike(\"declare\", {\r\n    startsExpr\r\n  }),\r\n  _enum: createKeywordLike(\"enum\", {\r\n    startsExpr\r\n  }),\r\n  _module: createKeywordLike(\"module\", {\r\n    startsExpr\r\n  }),\r\n  _namespace: createKeywordLike(\"namespace\", {\r\n    startsExpr\r\n  }),\r\n  _interface: createKeywordLike(\"interface\", {\r\n    startsExpr\r\n  }),\r\n  _type: createKeywordLike(\"type\", {\r\n    startsExpr\r\n  }),\r\n  _opaque: createKeywordLike(\"opaque\", {\r\n    startsExpr\r\n  }),\r\n  name: createToken(\"name\", {\r\n    startsExpr\r\n  }),\r\n  string: createToken(\"string\", {\r\n    startsExpr\r\n  }),\r\n  num: createToken(\"num\", {\r\n    startsExpr\r\n  }),\r\n  bigint: createToken(\"bigint\", {\r\n    startsExpr\r\n  }),\r\n  decimal: createToken(\"decimal\", {\r\n    startsExpr\r\n  }),\r\n  regexp: createToken(\"regexp\", {\r\n    startsExpr\r\n  }),\r\n  privateName: createToken(\"#name\", {\r\n    startsExpr\r\n  }),\r\n  eof: createToken(\"eof\"),\r\n  jsxName: createToken(\"jsxName\"),\r\n  jsxText: createToken(\"jsxText\", {\r\n    beforeExpr: true\r\n  }),\r\n  jsxTagStart: createToken(\"jsxTagStart\", {\r\n    startsExpr: true\r\n  }),\r\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\r\n  placeholder: createToken(\"%%\", {\r\n    startsExpr: true\r\n  })\r\n};\r\nfunction tokenIsIdentifier(token) {\r\n  return token >= 87 && token <= 122;\r\n}\r\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\r\n  return token <= 86;\r\n}\r\nfunction tokenIsKeywordOrIdentifier(token) {\r\n  return token >= 52 && token <= 122;\r\n}\r\nfunction tokenIsLiteralPropertyName(token) {\r\n  return token >= 52 && token <= 126;\r\n}\r\nfunction tokenComesBeforeExpression(token) {\r\n  return tokenBeforeExprs[token];\r\n}\r\nfunction tokenCanStartExpression(token) {\r\n  return tokenStartsExprs[token];\r\n}\r\nfunction tokenIsAssignment(token) {\r\n  return token >= 27 && token <= 31;\r\n}\r\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\r\n  return token >= 119 && token <= 121;\r\n}\r\nfunction tokenIsLoop(token) {\r\n  return token >= 84 && token <= 86;\r\n}\r\nfunction tokenIsKeyword(token) {\r\n  return token >= 52 && token <= 86;\r\n}\r\nfunction tokenIsOperator(token) {\r\n  return token >= 35 && token <= 53;\r\n}\r\nfunction tokenIsPostfix(token) {\r\n  return token === 32;\r\n}\r\nfunction tokenIsPrefix(token) {\r\n  return tokenPrefixes[token];\r\n}\r\nfunction tokenIsTSTypeOperator(token) {\r\n  return token >= 111 && token <= 113;\r\n}\r\nfunction tokenIsTSDeclarationStart(token) {\r\n  return token >= 114 && token <= 120;\r\n}\r\nfunction tokenLabelName(token) {\r\n  return tokenLabels[token];\r\n}\r\nfunction tokenOperatorPrecedence(token) {\r\n  return tokenBinops[token];\r\n}\r\nfunction tokenIsRightAssociative(token) {\r\n  return token === 51;\r\n}\r\nfunction getExportedToken(token) {\r\n  return tokenTypes[token];\r\n}\r\nfunction isTokenType(obj) {\r\n  return typeof obj === \"number\";\r\n}\r\n{\r\n  tokenTypes[8].updateContext = context => {\r\n    context.pop();\r\n  };\r\n\r\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\r\n    context.push(types.brace);\r\n  };\r\n\r\n  tokenTypes[22].updateContext = context => {\r\n    if (context[context.length - 1] === types.template) {\r\n      context.pop();\r\n    } else {\r\n      context.push(types.template);\r\n    }\r\n  };\r\n\r\n  tokenTypes[132].updateContext = context => {\r\n    context.push(types.j_expr, types.j_oTag);\r\n  };\r\n}\r\n\r\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\r\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\r\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\r\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\r\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\r\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\r\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\r\n\r\nfunction isInAstralSet(code, set) {\r\n  let pos = 0x10000;\r\n\r\n  for (let i = 0, length = set.length; i < length; i += 2) {\r\n    pos += set[i];\r\n    if (pos > code) return false;\r\n    pos += set[i + 1];\r\n    if (pos >= code) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isIdentifierStart(code) {\r\n  if (code < 65) return code === 36;\r\n  if (code <= 90) return true;\r\n  if (code < 97) return code === 95;\r\n  if (code <= 122) return true;\r\n\r\n  if (code <= 0xffff) {\r\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\r\n  }\r\n\r\n  return isInAstralSet(code, astralIdentifierStartCodes);\r\n}\r\nfunction isIdentifierChar(code) {\r\n  if (code < 48) return code === 36;\r\n  if (code < 58) return true;\r\n  if (code < 65) return false;\r\n  if (code <= 90) return true;\r\n  if (code < 97) return code === 95;\r\n  if (code <= 122) return true;\r\n\r\n  if (code <= 0xffff) {\r\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\r\n  }\r\n\r\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\r\n}\r\n\r\nconst reservedWords = {\r\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\r\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\r\n  strictBind: [\"eval\", \"arguments\"]\r\n};\r\nconst keywords = new Set(reservedWords.keyword);\r\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\r\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\r\nfunction isReservedWord(word, inModule) {\r\n  return inModule && word === \"await\" || word === \"enum\";\r\n}\r\nfunction isStrictReservedWord(word, inModule) {\r\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\r\n}\r\nfunction isStrictBindOnlyReservedWord(word) {\r\n  return reservedWordsStrictBindSet.has(word);\r\n}\r\nfunction isStrictBindReservedWord(word, inModule) {\r\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\r\n}\r\nfunction isKeyword(word) {\r\n  return keywords.has(word);\r\n}\r\n\r\nfunction isIteratorStart(current, next) {\r\n  return current === 64 && next === 64;\r\n}\r\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\r\nfunction canBeReservedWord(word) {\r\n  return reservedWordLikeSet.has(word);\r\n}\r\n\r\nconst SCOPE_OTHER = 0b000000000,\r\n      SCOPE_PROGRAM = 0b000000001,\r\n      SCOPE_FUNCTION = 0b000000010,\r\n      SCOPE_ARROW = 0b000000100,\r\n      SCOPE_SIMPLE_CATCH = 0b000001000,\r\n      SCOPE_SUPER = 0b000010000,\r\n      SCOPE_DIRECT_SUPER = 0b000100000,\r\n      SCOPE_CLASS = 0b001000000,\r\n      SCOPE_STATIC_BLOCK = 0b010000000,\r\n      SCOPE_TS_MODULE = 0b100000000,\r\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\r\nconst BIND_KIND_VALUE = 0b000000000001,\r\n      BIND_KIND_TYPE = 0b000000000010,\r\n      BIND_SCOPE_VAR = 0b000000000100,\r\n      BIND_SCOPE_LEXICAL = 0b000000001000,\r\n      BIND_SCOPE_FUNCTION = 0b000000010000,\r\n      BIND_FLAGS_NONE = 0b000001000000,\r\n      BIND_FLAGS_CLASS = 0b000010000000,\r\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\r\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\r\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\r\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\r\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\r\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\r\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\r\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\r\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\r\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\r\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\r\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\r\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\r\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\r\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\r\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\r\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\r\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\r\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\r\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\r\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\r\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\r\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\r\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\r\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\r\n      CLASS_ELEMENT_OTHER = 0;\r\n\r\nclass Scope {\r\n  constructor(flags) {\r\n    this.var = new Set();\r\n    this.lexical = new Set();\r\n    this.functions = new Set();\r\n    this.flags = flags;\r\n  }\r\n\r\n}\r\nclass ScopeHandler {\r\n  constructor(raise, inModule) {\r\n    this.scopeStack = [];\r\n    this.undefinedExports = new Map();\r\n    this.undefinedPrivateNames = new Map();\r\n    this.raise = raise;\r\n    this.inModule = inModule;\r\n  }\r\n\r\n  get inFunction() {\r\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\r\n  }\r\n\r\n  get allowSuper() {\r\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\r\n  }\r\n\r\n  get allowDirectSuper() {\r\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\r\n  }\r\n\r\n  get inClass() {\r\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\r\n  }\r\n\r\n  get inClassAndNotInNonArrowFunction() {\r\n    const flags = this.currentThisScopeFlags();\r\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\r\n  }\r\n\r\n  get inStaticBlock() {\r\n    for (let i = this.scopeStack.length - 1;; i--) {\r\n      const {\r\n        flags\r\n      } = this.scopeStack[i];\r\n\r\n      if (flags & SCOPE_STATIC_BLOCK) {\r\n        return true;\r\n      }\r\n\r\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  get inNonArrowFunction() {\r\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\r\n  }\r\n\r\n  get treatFunctionsAsVar() {\r\n    return this.treatFunctionsAsVarInScope(this.currentScope());\r\n  }\r\n\r\n  createScope(flags) {\r\n    return new Scope(flags);\r\n  }\r\n\r\n  enter(flags) {\r\n    this.scopeStack.push(this.createScope(flags));\r\n  }\r\n\r\n  exit() {\r\n    this.scopeStack.pop();\r\n  }\r\n\r\n  treatFunctionsAsVarInScope(scope) {\r\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\r\n  }\r\n\r\n  declareName(name, bindingType, pos) {\r\n    let scope = this.currentScope();\r\n\r\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\r\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\r\n\r\n      if (bindingType & BIND_SCOPE_FUNCTION) {\r\n        scope.functions.add(name);\r\n      } else {\r\n        scope.lexical.add(name);\r\n      }\r\n\r\n      if (bindingType & BIND_SCOPE_LEXICAL) {\r\n        this.maybeExportDefined(scope, name);\r\n      }\r\n    } else if (bindingType & BIND_SCOPE_VAR) {\r\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\r\n        scope = this.scopeStack[i];\r\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\r\n        scope.var.add(name);\r\n        this.maybeExportDefined(scope, name);\r\n        if (scope.flags & SCOPE_VAR) break;\r\n      }\r\n    }\r\n\r\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\r\n      this.undefinedExports.delete(name);\r\n    }\r\n  }\r\n\r\n  maybeExportDefined(scope, name) {\r\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\r\n      this.undefinedExports.delete(name);\r\n    }\r\n  }\r\n\r\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\r\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\r\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\r\n    }\r\n  }\r\n\r\n  isRedeclaredInScope(scope, name, bindingType) {\r\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\r\n\r\n    if (bindingType & BIND_SCOPE_LEXICAL) {\r\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\r\n    }\r\n\r\n    if (bindingType & BIND_SCOPE_FUNCTION) {\r\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\r\n    }\r\n\r\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\r\n  }\r\n\r\n  checkLocalExport(id) {\r\n    const {\r\n      name\r\n    } = id;\r\n    const topLevelScope = this.scopeStack[0];\r\n\r\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\r\n      this.undefinedExports.set(name, id.start);\r\n    }\r\n  }\r\n\r\n  currentScope() {\r\n    return this.scopeStack[this.scopeStack.length - 1];\r\n  }\r\n\r\n  currentVarScopeFlags() {\r\n    for (let i = this.scopeStack.length - 1;; i--) {\r\n      const {\r\n        flags\r\n      } = this.scopeStack[i];\r\n\r\n      if (flags & SCOPE_VAR) {\r\n        return flags;\r\n      }\r\n    }\r\n  }\r\n\r\n  currentThisScopeFlags() {\r\n    for (let i = this.scopeStack.length - 1;; i--) {\r\n      const {\r\n        flags\r\n      } = this.scopeStack[i];\r\n\r\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\r\n        return flags;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nclass FlowScope extends Scope {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.declareFunctions = new Set();\r\n  }\r\n\r\n}\r\n\r\nclass FlowScopeHandler extends ScopeHandler {\r\n  createScope(flags) {\r\n    return new FlowScope(flags);\r\n  }\r\n\r\n  declareName(name, bindingType, pos) {\r\n    const scope = this.currentScope();\r\n\r\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\r\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\r\n      this.maybeExportDefined(scope, name);\r\n      scope.declareFunctions.add(name);\r\n      return;\r\n    }\r\n\r\n    super.declareName(...arguments);\r\n  }\r\n\r\n  isRedeclaredInScope(scope, name, bindingType) {\r\n    if (super.isRedeclaredInScope(...arguments)) return true;\r\n\r\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\r\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  checkLocalExport(id) {\r\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\r\n      super.checkLocalExport(id);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nclass State {\r\n  constructor() {\r\n    this.strict = void 0;\r\n    this.curLine = void 0;\r\n    this.lineStart = void 0;\r\n    this.startLoc = void 0;\r\n    this.endLoc = void 0;\r\n    this.errors = [];\r\n    this.potentialArrowAt = -1;\r\n    this.noArrowAt = [];\r\n    this.noArrowParamsConversionAt = [];\r\n    this.maybeInArrowParameters = false;\r\n    this.inType = false;\r\n    this.noAnonFunctionType = false;\r\n    this.hasFlowComment = false;\r\n    this.isAmbientContext = false;\r\n    this.inAbstractClass = false;\r\n    this.topicContext = {\r\n      maxNumOfResolvableTopics: 0,\r\n      maxTopicIndex: null\r\n    };\r\n    this.soloAwait = false;\r\n    this.inFSharpPipelineDirectBody = false;\r\n    this.labels = [];\r\n    this.decoratorStack = [[]];\r\n    this.comments = [];\r\n    this.commentStack = [];\r\n    this.pos = 0;\r\n    this.type = 129;\r\n    this.value = null;\r\n    this.start = 0;\r\n    this.end = 0;\r\n    this.lastTokEndLoc = null;\r\n    this.lastTokStartLoc = null;\r\n    this.lastTokStart = 0;\r\n    this.lastTokEnd = 0;\r\n    this.context = [types.brace];\r\n    this.canStartJSXElement = true;\r\n    this.containsEsc = false;\r\n    this.strictErrors = new Map();\r\n    this.tokensLength = 0;\r\n  }\r\n\r\n  init({\r\n    strictMode,\r\n    sourceType,\r\n    startLine,\r\n    startColumn\r\n  }) {\r\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\r\n    this.curLine = startLine;\r\n    this.lineStart = -startColumn;\r\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\r\n  }\r\n\r\n  curPosition() {\r\n    return new Position(this.curLine, this.pos - this.lineStart);\r\n  }\r\n\r\n  clone(skipArrays) {\r\n    const state = new State();\r\n    const keys = Object.keys(this);\r\n\r\n    for (let i = 0, length = keys.length; i < length; i++) {\r\n      const key = keys[i];\r\n      let val = this[key];\r\n\r\n      if (!skipArrays && Array.isArray(val)) {\r\n        val = val.slice();\r\n      }\r\n\r\n      state[key] = val;\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n}\r\n\r\nvar _isDigit = function isDigit(code) {\r\n  return code >= 48 && code <= 57;\r\n};\r\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\r\nconst forbiddenNumericSeparatorSiblings = {\r\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\r\n  hex: [46, 88, 95, 120]\r\n};\r\nconst allowedNumericSeparatorSiblings = {};\r\nallowedNumericSeparatorSiblings.bin = [48, 49];\r\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\r\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\r\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\r\nclass Token {\r\n  constructor(state) {\r\n    this.type = state.type;\r\n    this.value = state.value;\r\n    this.start = state.start;\r\n    this.end = state.end;\r\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\r\n  }\r\n\r\n}\r\nclass Tokenizer extends ParserError {\r\n  constructor(options, input) {\r\n    super();\r\n    this.isLookahead = void 0;\r\n    this.tokens = [];\r\n    this.state = new State();\r\n    this.state.init(options);\r\n    this.input = input;\r\n    this.length = input.length;\r\n    this.isLookahead = false;\r\n  }\r\n\r\n  pushToken(token) {\r\n    this.tokens.length = this.state.tokensLength;\r\n    this.tokens.push(token);\r\n    ++this.state.tokensLength;\r\n  }\r\n\r\n  next() {\r\n    this.checkKeywordEscapes();\r\n\r\n    if (this.options.tokens) {\r\n      this.pushToken(new Token(this.state));\r\n    }\r\n\r\n    this.state.lastTokEnd = this.state.end;\r\n    this.state.lastTokStart = this.state.start;\r\n    this.state.lastTokEndLoc = this.state.endLoc;\r\n    this.state.lastTokStartLoc = this.state.startLoc;\r\n    this.nextToken();\r\n  }\r\n\r\n  eat(type) {\r\n    if (this.match(type)) {\r\n      this.next();\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  match(type) {\r\n    return this.state.type === type;\r\n  }\r\n\r\n  createLookaheadState(state) {\r\n    return {\r\n      pos: state.pos,\r\n      value: null,\r\n      type: state.type,\r\n      start: state.start,\r\n      end: state.end,\r\n      lastTokEnd: state.end,\r\n      context: [this.curContext()],\r\n      inType: state.inType\r\n    };\r\n  }\r\n\r\n  lookahead() {\r\n    const old = this.state;\r\n    this.state = this.createLookaheadState(old);\r\n    this.isLookahead = true;\r\n    this.nextToken();\r\n    this.isLookahead = false;\r\n    const curr = this.state;\r\n    this.state = old;\r\n    return curr;\r\n  }\r\n\r\n  nextTokenStart() {\r\n    return this.nextTokenStartSince(this.state.pos);\r\n  }\r\n\r\n  nextTokenStartSince(pos) {\r\n    skipWhiteSpace.lastIndex = pos;\r\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\r\n  }\r\n\r\n  lookaheadCharCode() {\r\n    return this.input.charCodeAt(this.nextTokenStart());\r\n  }\r\n\r\n  codePointAtPos(pos) {\r\n    let cp = this.input.charCodeAt(pos);\r\n\r\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\r\n      const trail = this.input.charCodeAt(pos);\r\n\r\n      if ((trail & 0xfc00) === 0xdc00) {\r\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\r\n      }\r\n    }\r\n\r\n    return cp;\r\n  }\r\n\r\n  setStrict(strict) {\r\n    this.state.strict = strict;\r\n\r\n    if (strict) {\r\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\r\n      this.state.strictErrors.clear();\r\n    }\r\n  }\r\n\r\n  curContext() {\r\n    return this.state.context[this.state.context.length - 1];\r\n  }\r\n\r\n  nextToken() {\r\n    const curContext = this.curContext();\r\n    if (!curContext.preserveSpace) this.skipSpace();\r\n    this.state.start = this.state.pos;\r\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\r\n\r\n    if (this.state.pos >= this.length) {\r\n      this.finishToken(129);\r\n      return;\r\n    }\r\n\r\n    if (curContext === types.template) {\r\n      this.readTmplToken();\r\n    } else {\r\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\r\n    }\r\n  }\r\n\r\n  skipBlockComment() {\r\n    let startLoc;\r\n    if (!this.isLookahead) startLoc = this.state.curPosition();\r\n    const start = this.state.pos;\r\n    const end = this.input.indexOf(\"*/\", start + 2);\r\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\r\n    this.state.pos = end + 2;\r\n    lineBreakG.lastIndex = start + 2;\r\n\r\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\r\n      ++this.state.curLine;\r\n      this.state.lineStart = lineBreakG.lastIndex;\r\n    }\r\n\r\n    if (this.isLookahead) return;\r\n    const comment = {\r\n      type: \"CommentBlock\",\r\n      value: this.input.slice(start + 2, end),\r\n      start,\r\n      end: end + 2,\r\n      loc: new SourceLocation(startLoc, this.state.curPosition())\r\n    };\r\n    if (this.options.tokens) this.pushToken(comment);\r\n    return comment;\r\n  }\r\n\r\n  skipLineComment(startSkip) {\r\n    const start = this.state.pos;\r\n    let startLoc;\r\n    if (!this.isLookahead) startLoc = this.state.curPosition();\r\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\r\n\r\n    if (this.state.pos < this.length) {\r\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\r\n        ch = this.input.charCodeAt(this.state.pos);\r\n      }\r\n    }\r\n\r\n    if (this.isLookahead) return;\r\n    const end = this.state.pos;\r\n    const value = this.input.slice(start + startSkip, end);\r\n    const comment = {\r\n      type: \"CommentLine\",\r\n      value,\r\n      start,\r\n      end,\r\n      loc: new SourceLocation(startLoc, this.state.curPosition())\r\n    };\r\n    if (this.options.tokens) this.pushToken(comment);\r\n    return comment;\r\n  }\r\n\r\n  skipSpace() {\r\n    const spaceStart = this.state.pos;\r\n    const comments = [];\r\n\r\n    loop: while (this.state.pos < this.length) {\r\n      const ch = this.input.charCodeAt(this.state.pos);\r\n\r\n      switch (ch) {\r\n        case 32:\r\n        case 160:\r\n        case 9:\r\n          ++this.state.pos;\r\n          break;\r\n\r\n        case 13:\r\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\r\n            ++this.state.pos;\r\n          }\r\n\r\n        case 10:\r\n        case 8232:\r\n        case 8233:\r\n          ++this.state.pos;\r\n          ++this.state.curLine;\r\n          this.state.lineStart = this.state.pos;\r\n          break;\r\n\r\n        case 47:\r\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\r\n            case 42:\r\n              {\r\n                const comment = this.skipBlockComment();\r\n\r\n                if (comment !== undefined) {\r\n                  this.addComment(comment);\r\n                  if (this.options.attachComment) comments.push(comment);\r\n                }\r\n\r\n                break;\r\n              }\r\n\r\n            case 47:\r\n              {\r\n                const comment = this.skipLineComment(2);\r\n\r\n                if (comment !== undefined) {\r\n                  this.addComment(comment);\r\n                  if (this.options.attachComment) comments.push(comment);\r\n                }\r\n\r\n                break;\r\n              }\r\n\r\n            default:\r\n              break loop;\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          if (isWhitespace(ch)) {\r\n            ++this.state.pos;\r\n          } else if (ch === 45 && !this.inModule) {\r\n            const pos = this.state.pos;\r\n\r\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\r\n              const comment = this.skipLineComment(3);\r\n\r\n              if (comment !== undefined) {\r\n                this.addComment(comment);\r\n                if (this.options.attachComment) comments.push(comment);\r\n              }\r\n            } else {\r\n              break loop;\r\n            }\r\n          } else if (ch === 60 && !this.inModule) {\r\n            const pos = this.state.pos;\r\n\r\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\r\n              const comment = this.skipLineComment(4);\r\n\r\n              if (comment !== undefined) {\r\n                this.addComment(comment);\r\n                if (this.options.attachComment) comments.push(comment);\r\n              }\r\n            } else {\r\n              break loop;\r\n            }\r\n          } else {\r\n            break loop;\r\n          }\r\n\r\n      }\r\n    }\r\n\r\n    if (comments.length > 0) {\r\n      const end = this.state.pos;\r\n      const CommentWhitespace = {\r\n        start: spaceStart,\r\n        end,\r\n        comments,\r\n        leadingNode: null,\r\n        trailingNode: null,\r\n        containingNode: null\r\n      };\r\n      this.state.commentStack.push(CommentWhitespace);\r\n    }\r\n  }\r\n\r\n  finishToken(type, val) {\r\n    this.state.end = this.state.pos;\r\n    const prevType = this.state.type;\r\n    this.state.type = type;\r\n    this.state.value = val;\r\n\r\n    if (!this.isLookahead) {\r\n      this.state.endLoc = this.state.curPosition();\r\n      this.updateContext(prevType);\r\n    }\r\n  }\r\n\r\n  replaceToken(type) {\r\n    this.state.type = type;\r\n    this.updateContext();\r\n  }\r\n\r\n  readToken_numberSign() {\r\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\r\n      return;\r\n    }\r\n\r\n    const nextPos = this.state.pos + 1;\r\n    const next = this.codePointAtPos(nextPos);\r\n\r\n    if (next >= 48 && next <= 57) {\r\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\r\n    }\r\n\r\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\r\n      this.expectPlugin(\"recordAndTuple\");\r\n\r\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\r\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\r\n      }\r\n\r\n      this.state.pos += 2;\r\n\r\n      if (next === 123) {\r\n        this.finishToken(7);\r\n      } else {\r\n        this.finishToken(1);\r\n      }\r\n    } else if (isIdentifierStart(next)) {\r\n      ++this.state.pos;\r\n      this.finishToken(128, this.readWord1(next));\r\n    } else if (next === 92) {\r\n      ++this.state.pos;\r\n      this.finishToken(128, this.readWord1());\r\n    } else {\r\n      this.finishOp(25, 1);\r\n    }\r\n  }\r\n\r\n  readToken_dot() {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (next >= 48 && next <= 57) {\r\n      this.readNumber(true);\r\n      return;\r\n    }\r\n\r\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\r\n      this.state.pos += 3;\r\n      this.finishToken(21);\r\n    } else {\r\n      ++this.state.pos;\r\n      this.finishToken(16);\r\n    }\r\n  }\r\n\r\n  readToken_slash() {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (next === 61) {\r\n      this.finishOp(29, 2);\r\n    } else {\r\n      this.finishOp(50, 1);\r\n    }\r\n  }\r\n\r\n  readToken_interpreter() {\r\n    if (this.state.pos !== 0 || this.length < 2) return false;\r\n    let ch = this.input.charCodeAt(this.state.pos + 1);\r\n    if (ch !== 33) return false;\r\n    const start = this.state.pos;\r\n    this.state.pos += 1;\r\n\r\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\r\n      ch = this.input.charCodeAt(this.state.pos);\r\n    }\r\n\r\n    const value = this.input.slice(start + 2, this.state.pos);\r\n    this.finishToken(26, value);\r\n    return true;\r\n  }\r\n\r\n  readToken_mult_modulo(code) {\r\n    let type = code === 42 ? 49 : 48;\r\n    let width = 1;\r\n    let next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (code === 42 && next === 42) {\r\n      width++;\r\n      next = this.input.charCodeAt(this.state.pos + 2);\r\n      type = 51;\r\n    }\r\n\r\n    if (next === 61 && !this.state.inType) {\r\n      width++;\r\n      type = code === 37 ? 31 : 28;\r\n    }\r\n\r\n    this.finishOp(type, width);\r\n  }\r\n\r\n  readToken_pipe_amp(code) {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (next === code) {\r\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\r\n        this.finishOp(28, 3);\r\n      } else {\r\n        this.finishOp(code === 124 ? 37 : 38, 2);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (code === 124) {\r\n      if (next === 62) {\r\n        this.finishOp(35, 2);\r\n        return;\r\n      }\r\n\r\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\r\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\r\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\r\n        }\r\n\r\n        this.state.pos += 2;\r\n        this.finishToken(9);\r\n        return;\r\n      }\r\n\r\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\r\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\r\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\r\n        }\r\n\r\n        this.state.pos += 2;\r\n        this.finishToken(4);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (next === 61) {\r\n      this.finishOp(28, 2);\r\n      return;\r\n    }\r\n\r\n    this.finishOp(code === 124 ? 39 : 41, 1);\r\n  }\r\n\r\n  readToken_caret() {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (next === 61 && !this.state.inType) {\r\n      this.finishOp(30, 2);\r\n    } else {\r\n      this.finishOp(40, 1);\r\n    }\r\n  }\r\n\r\n  readToken_plus_min(code) {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (next === code) {\r\n      this.finishOp(32, 2);\r\n      return;\r\n    }\r\n\r\n    if (next === 61) {\r\n      this.finishOp(28, 2);\r\n    } else {\r\n      this.finishOp(47, 1);\r\n    }\r\n  }\r\n\r\n  readToken_lt() {\r\n    const {\r\n      pos\r\n    } = this.state;\r\n    const next = this.input.charCodeAt(pos + 1);\r\n\r\n    if (next === 60) {\r\n      if (this.input.charCodeAt(pos + 2) === 61) {\r\n        this.finishOp(28, 3);\r\n        return;\r\n      }\r\n\r\n      this.finishOp(46, 2);\r\n      return;\r\n    }\r\n\r\n    if (next === 61) {\r\n      this.finishOp(45, 2);\r\n      return;\r\n    }\r\n\r\n    this.finishOp(43, 1);\r\n  }\r\n\r\n  readToken_gt() {\r\n    const {\r\n      pos\r\n    } = this.state;\r\n    const next = this.input.charCodeAt(pos + 1);\r\n\r\n    if (next === 62) {\r\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\r\n\r\n      if (this.input.charCodeAt(pos + size) === 61) {\r\n        this.finishOp(28, size + 1);\r\n        return;\r\n      }\r\n\r\n      this.finishOp(46, size);\r\n      return;\r\n    }\r\n\r\n    if (next === 61) {\r\n      this.finishOp(45, 2);\r\n      return;\r\n    }\r\n\r\n    this.finishOp(44, 1);\r\n  }\r\n\r\n  readToken_eq_excl(code) {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (next === 61) {\r\n      this.finishOp(42, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\r\n      return;\r\n    }\r\n\r\n    if (code === 61 && next === 62) {\r\n      this.state.pos += 2;\r\n      this.finishToken(19);\r\n      return;\r\n    }\r\n\r\n    this.finishOp(code === 61 ? 27 : 33, 1);\r\n  }\r\n\r\n  readToken_question() {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\r\n\r\n    if (next === 63) {\r\n      if (next2 === 61) {\r\n        this.finishOp(28, 3);\r\n      } else {\r\n        this.finishOp(36, 2);\r\n      }\r\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\r\n      this.state.pos += 2;\r\n      this.finishToken(18);\r\n    } else {\r\n      ++this.state.pos;\r\n      this.finishToken(17);\r\n    }\r\n  }\r\n\r\n  getTokenFromCode(code) {\r\n    switch (code) {\r\n      case 46:\r\n        this.readToken_dot();\r\n        return;\r\n\r\n      case 40:\r\n        ++this.state.pos;\r\n        this.finishToken(10);\r\n        return;\r\n\r\n      case 41:\r\n        ++this.state.pos;\r\n        this.finishToken(11);\r\n        return;\r\n\r\n      case 59:\r\n        ++this.state.pos;\r\n        this.finishToken(13);\r\n        return;\r\n\r\n      case 44:\r\n        ++this.state.pos;\r\n        this.finishToken(12);\r\n        return;\r\n\r\n      case 91:\r\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\r\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\r\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\r\n          }\r\n\r\n          this.state.pos += 2;\r\n          this.finishToken(2);\r\n        } else {\r\n          ++this.state.pos;\r\n          this.finishToken(0);\r\n        }\r\n\r\n        return;\r\n\r\n      case 93:\r\n        ++this.state.pos;\r\n        this.finishToken(3);\r\n        return;\r\n\r\n      case 123:\r\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\r\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\r\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\r\n          }\r\n\r\n          this.state.pos += 2;\r\n          this.finishToken(6);\r\n        } else {\r\n          ++this.state.pos;\r\n          this.finishToken(5);\r\n        }\r\n\r\n        return;\r\n\r\n      case 125:\r\n        ++this.state.pos;\r\n        this.finishToken(8);\r\n        return;\r\n\r\n      case 58:\r\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\r\n          this.finishOp(15, 2);\r\n        } else {\r\n          ++this.state.pos;\r\n          this.finishToken(14);\r\n        }\r\n\r\n        return;\r\n\r\n      case 63:\r\n        this.readToken_question();\r\n        return;\r\n\r\n      case 96:\r\n        ++this.state.pos;\r\n        this.finishToken(22);\r\n        return;\r\n\r\n      case 48:\r\n        {\r\n          const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n          if (next === 120 || next === 88) {\r\n            this.readRadixNumber(16);\r\n            return;\r\n          }\r\n\r\n          if (next === 111 || next === 79) {\r\n            this.readRadixNumber(8);\r\n            return;\r\n          }\r\n\r\n          if (next === 98 || next === 66) {\r\n            this.readRadixNumber(2);\r\n            return;\r\n          }\r\n        }\r\n\r\n      case 49:\r\n      case 50:\r\n      case 51:\r\n      case 52:\r\n      case 53:\r\n      case 54:\r\n      case 55:\r\n      case 56:\r\n      case 57:\r\n        this.readNumber(false);\r\n        return;\r\n\r\n      case 34:\r\n      case 39:\r\n        this.readString(code);\r\n        return;\r\n\r\n      case 47:\r\n        this.readToken_slash();\r\n        return;\r\n\r\n      case 37:\r\n      case 42:\r\n        this.readToken_mult_modulo(code);\r\n        return;\r\n\r\n      case 124:\r\n      case 38:\r\n        this.readToken_pipe_amp(code);\r\n        return;\r\n\r\n      case 94:\r\n        this.readToken_caret();\r\n        return;\r\n\r\n      case 43:\r\n      case 45:\r\n        this.readToken_plus_min(code);\r\n        return;\r\n\r\n      case 60:\r\n        this.readToken_lt();\r\n        return;\r\n\r\n      case 62:\r\n        this.readToken_gt();\r\n        return;\r\n\r\n      case 61:\r\n      case 33:\r\n        this.readToken_eq_excl(code);\r\n        return;\r\n\r\n      case 126:\r\n        this.finishOp(34, 1);\r\n        return;\r\n\r\n      case 64:\r\n        ++this.state.pos;\r\n        this.finishToken(24);\r\n        return;\r\n\r\n      case 35:\r\n        this.readToken_numberSign();\r\n        return;\r\n\r\n      case 92:\r\n        this.readWord();\r\n        return;\r\n\r\n      default:\r\n        if (isIdentifierStart(code)) {\r\n          this.readWord(code);\r\n          return;\r\n        }\r\n\r\n    }\r\n\r\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\r\n  }\r\n\r\n  finishOp(type, size) {\r\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\r\n    this.state.pos += size;\r\n    this.finishToken(type, str);\r\n  }\r\n\r\n  readRegexp() {\r\n    const start = this.state.start + 1;\r\n    let escaped, inClass;\r\n    let {\r\n      pos\r\n    } = this.state;\r\n\r\n    for (;; ++pos) {\r\n      if (pos >= this.length) {\r\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\r\n      }\r\n\r\n      const ch = this.input.charCodeAt(pos);\r\n\r\n      if (isNewLine(ch)) {\r\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\r\n      }\r\n\r\n      if (escaped) {\r\n        escaped = false;\r\n      } else {\r\n        if (ch === 91) {\r\n          inClass = true;\r\n        } else if (ch === 93 && inClass) {\r\n          inClass = false;\r\n        } else if (ch === 47 && !inClass) {\r\n          break;\r\n        }\r\n\r\n        escaped = ch === 92;\r\n      }\r\n    }\r\n\r\n    const content = this.input.slice(start, pos);\r\n    ++pos;\r\n    let mods = \"\";\r\n\r\n    while (pos < this.length) {\r\n      const cp = this.codePointAtPos(pos);\r\n      const char = String.fromCharCode(cp);\r\n\r\n      if (VALID_REGEX_FLAGS.has(cp)) {\r\n        if (mods.includes(char)) {\r\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\r\n        }\r\n      } else if (isIdentifierChar(cp) || cp === 92) {\r\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\r\n      } else {\r\n        break;\r\n      }\r\n\r\n      ++pos;\r\n      mods += char;\r\n    }\r\n\r\n    this.state.pos = pos;\r\n    this.finishToken(127, {\r\n      pattern: content,\r\n      flags: mods\r\n    });\r\n  }\r\n\r\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\r\n    const start = this.state.pos;\r\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\r\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\r\n    let invalid = false;\r\n    let total = 0;\r\n\r\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\r\n      const code = this.input.charCodeAt(this.state.pos);\r\n      let val;\r\n\r\n      if (code === 95) {\r\n        const prev = this.input.charCodeAt(this.state.pos - 1);\r\n        const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n        if (allowedSiblings.indexOf(next) === -1) {\r\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\r\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\r\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\r\n        }\r\n\r\n        if (!allowNumSeparator) {\r\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\r\n        }\r\n\r\n        ++this.state.pos;\r\n        continue;\r\n      }\r\n\r\n      if (code >= 97) {\r\n        val = code - 97 + 10;\r\n      } else if (code >= 65) {\r\n        val = code - 65 + 10;\r\n      } else if (_isDigit(code)) {\r\n        val = code - 48;\r\n      } else {\r\n        val = Infinity;\r\n      }\r\n\r\n      if (val >= radix) {\r\n        if (this.options.errorRecovery && val <= 9) {\r\n          val = 0;\r\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\r\n        } else if (forceLen) {\r\n          val = 0;\r\n          invalid = true;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      ++this.state.pos;\r\n      total = total * radix + val;\r\n    }\r\n\r\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\r\n      return null;\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  readRadixNumber(radix) {\r\n    const start = this.state.pos;\r\n    let isBigInt = false;\r\n    this.state.pos += 2;\r\n    const val = this.readInt(radix);\r\n\r\n    if (val == null) {\r\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\r\n    }\r\n\r\n    const next = this.input.charCodeAt(this.state.pos);\r\n\r\n    if (next === 110) {\r\n      ++this.state.pos;\r\n      isBigInt = true;\r\n    } else if (next === 109) {\r\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\r\n    }\r\n\r\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\r\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\r\n    }\r\n\r\n    if (isBigInt) {\r\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\r\n      this.finishToken(125, str);\r\n      return;\r\n    }\r\n\r\n    this.finishToken(124, val);\r\n  }\r\n\r\n  readNumber(startsWithDot) {\r\n    const start = this.state.pos;\r\n    let isFloat = false;\r\n    let isBigInt = false;\r\n    let isDecimal = false;\r\n    let hasExponent = false;\r\n    let isOctal = false;\r\n\r\n    if (!startsWithDot && this.readInt(10) === null) {\r\n      this.raise(start, ErrorMessages.InvalidNumber);\r\n    }\r\n\r\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\r\n\r\n    if (hasLeadingZero) {\r\n      const integer = this.input.slice(start, this.state.pos);\r\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\r\n\r\n      if (!this.state.strict) {\r\n        const underscorePos = integer.indexOf(\"_\");\r\n\r\n        if (underscorePos > 0) {\r\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\r\n        }\r\n      }\r\n\r\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\r\n    }\r\n\r\n    let next = this.input.charCodeAt(this.state.pos);\r\n\r\n    if (next === 46 && !isOctal) {\r\n      ++this.state.pos;\r\n      this.readInt(10);\r\n      isFloat = true;\r\n      next = this.input.charCodeAt(this.state.pos);\r\n    }\r\n\r\n    if ((next === 69 || next === 101) && !isOctal) {\r\n      next = this.input.charCodeAt(++this.state.pos);\r\n\r\n      if (next === 43 || next === 45) {\r\n        ++this.state.pos;\r\n      }\r\n\r\n      if (this.readInt(10) === null) {\r\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\r\n      }\r\n\r\n      isFloat = true;\r\n      hasExponent = true;\r\n      next = this.input.charCodeAt(this.state.pos);\r\n    }\r\n\r\n    if (next === 110) {\r\n      if (isFloat || hasLeadingZero) {\r\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\r\n      }\r\n\r\n      ++this.state.pos;\r\n      isBigInt = true;\r\n    }\r\n\r\n    if (next === 109) {\r\n      this.expectPlugin(\"decimal\", this.state.pos);\r\n\r\n      if (hasExponent || hasLeadingZero) {\r\n        this.raise(start, ErrorMessages.InvalidDecimal);\r\n      }\r\n\r\n      ++this.state.pos;\r\n      isDecimal = true;\r\n    }\r\n\r\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\r\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\r\n    }\r\n\r\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\r\n\r\n    if (isBigInt) {\r\n      this.finishToken(125, str);\r\n      return;\r\n    }\r\n\r\n    if (isDecimal) {\r\n      this.finishToken(126, str);\r\n      return;\r\n    }\r\n\r\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\r\n    this.finishToken(124, val);\r\n  }\r\n\r\n  readCodePoint(throwOnInvalid) {\r\n    const ch = this.input.charCodeAt(this.state.pos);\r\n    let code;\r\n\r\n    if (ch === 123) {\r\n      const codePos = ++this.state.pos;\r\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\r\n      ++this.state.pos;\r\n\r\n      if (code !== null && code > 0x10ffff) {\r\n        if (throwOnInvalid) {\r\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    } else {\r\n      code = this.readHexChar(4, false, throwOnInvalid);\r\n    }\r\n\r\n    return code;\r\n  }\r\n\r\n  readString(quote) {\r\n    let out = \"\",\r\n        chunkStart = ++this.state.pos;\r\n\r\n    for (;;) {\r\n      if (this.state.pos >= this.length) {\r\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\r\n      }\r\n\r\n      const ch = this.input.charCodeAt(this.state.pos);\r\n      if (ch === quote) break;\r\n\r\n      if (ch === 92) {\r\n        out += this.input.slice(chunkStart, this.state.pos);\r\n        out += this.readEscapedChar(false);\r\n        chunkStart = this.state.pos;\r\n      } else if (ch === 8232 || ch === 8233) {\r\n        ++this.state.pos;\r\n        ++this.state.curLine;\r\n        this.state.lineStart = this.state.pos;\r\n      } else if (isNewLine(ch)) {\r\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\r\n      } else {\r\n        ++this.state.pos;\r\n      }\r\n    }\r\n\r\n    out += this.input.slice(chunkStart, this.state.pos++);\r\n    this.finishToken(123, out);\r\n  }\r\n\r\n  readTmplToken() {\r\n    let out = \"\",\r\n        chunkStart = this.state.pos,\r\n        containsInvalid = false;\r\n\r\n    for (;;) {\r\n      if (this.state.pos >= this.length) {\r\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\r\n      }\r\n\r\n      const ch = this.input.charCodeAt(this.state.pos);\r\n\r\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\r\n        if (this.state.pos === this.state.start && this.match(20)) {\r\n          if (ch === 36) {\r\n            this.state.pos += 2;\r\n            this.finishToken(23);\r\n            return;\r\n          } else {\r\n            ++this.state.pos;\r\n            this.finishToken(22);\r\n            return;\r\n          }\r\n        }\r\n\r\n        out += this.input.slice(chunkStart, this.state.pos);\r\n        this.finishToken(20, containsInvalid ? null : out);\r\n        return;\r\n      }\r\n\r\n      if (ch === 92) {\r\n        out += this.input.slice(chunkStart, this.state.pos);\r\n        const escaped = this.readEscapedChar(true);\r\n\r\n        if (escaped === null) {\r\n          containsInvalid = true;\r\n        } else {\r\n          out += escaped;\r\n        }\r\n\r\n        chunkStart = this.state.pos;\r\n      } else if (isNewLine(ch)) {\r\n        out += this.input.slice(chunkStart, this.state.pos);\r\n        ++this.state.pos;\r\n\r\n        switch (ch) {\r\n          case 13:\r\n            if (this.input.charCodeAt(this.state.pos) === 10) {\r\n              ++this.state.pos;\r\n            }\r\n\r\n          case 10:\r\n            out += \"\\n\";\r\n            break;\r\n\r\n          default:\r\n            out += String.fromCharCode(ch);\r\n            break;\r\n        }\r\n\r\n        ++this.state.curLine;\r\n        this.state.lineStart = this.state.pos;\r\n        chunkStart = this.state.pos;\r\n      } else {\r\n        ++this.state.pos;\r\n      }\r\n    }\r\n  }\r\n\r\n  recordStrictModeErrors(pos, message) {\r\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\r\n      this.raise(pos, message);\r\n    } else {\r\n      this.state.strictErrors.set(pos, message);\r\n    }\r\n  }\r\n\r\n  readEscapedChar(inTemplate) {\r\n    const throwOnInvalid = !inTemplate;\r\n    const ch = this.input.charCodeAt(++this.state.pos);\r\n    ++this.state.pos;\r\n\r\n    switch (ch) {\r\n      case 110:\r\n        return \"\\n\";\r\n\r\n      case 114:\r\n        return \"\\r\";\r\n\r\n      case 120:\r\n        {\r\n          const code = this.readHexChar(2, false, throwOnInvalid);\r\n          return code === null ? null : String.fromCharCode(code);\r\n        }\r\n\r\n      case 117:\r\n        {\r\n          const code = this.readCodePoint(throwOnInvalid);\r\n          return code === null ? null : String.fromCodePoint(code);\r\n        }\r\n\r\n      case 116:\r\n        return \"\\t\";\r\n\r\n      case 98:\r\n        return \"\\b\";\r\n\r\n      case 118:\r\n        return \"\\u000b\";\r\n\r\n      case 102:\r\n        return \"\\f\";\r\n\r\n      case 13:\r\n        if (this.input.charCodeAt(this.state.pos) === 10) {\r\n          ++this.state.pos;\r\n        }\r\n\r\n      case 10:\r\n        this.state.lineStart = this.state.pos;\r\n        ++this.state.curLine;\r\n\r\n      case 8232:\r\n      case 8233:\r\n        return \"\";\r\n\r\n      case 56:\r\n      case 57:\r\n        if (inTemplate) {\r\n          return null;\r\n        } else {\r\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\r\n        }\r\n\r\n      default:\r\n        if (ch >= 48 && ch <= 55) {\r\n          const codePos = this.state.pos - 1;\r\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\r\n          let octalStr = match[0];\r\n          let octal = parseInt(octalStr, 8);\r\n\r\n          if (octal > 255) {\r\n            octalStr = octalStr.slice(0, -1);\r\n            octal = parseInt(octalStr, 8);\r\n          }\r\n\r\n          this.state.pos += octalStr.length - 1;\r\n          const next = this.input.charCodeAt(this.state.pos);\r\n\r\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\r\n            if (inTemplate) {\r\n              return null;\r\n            } else {\r\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\r\n            }\r\n          }\r\n\r\n          return String.fromCharCode(octal);\r\n        }\r\n\r\n        return String.fromCharCode(ch);\r\n    }\r\n  }\r\n\r\n  readHexChar(len, forceLen, throwOnInvalid) {\r\n    const codePos = this.state.pos;\r\n    const n = this.readInt(16, len, forceLen, false);\r\n\r\n    if (n === null) {\r\n      if (throwOnInvalid) {\r\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\r\n      } else {\r\n        this.state.pos = codePos - 1;\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  readWord1(firstCode) {\r\n    this.state.containsEsc = false;\r\n    let word = \"\";\r\n    const start = this.state.pos;\r\n    let chunkStart = this.state.pos;\r\n\r\n    if (firstCode !== undefined) {\r\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\r\n    }\r\n\r\n    while (this.state.pos < this.length) {\r\n      const ch = this.codePointAtPos(this.state.pos);\r\n\r\n      if (isIdentifierChar(ch)) {\r\n        this.state.pos += ch <= 0xffff ? 1 : 2;\r\n      } else if (ch === 92) {\r\n        this.state.containsEsc = true;\r\n        word += this.input.slice(chunkStart, this.state.pos);\r\n        const escStart = this.state.pos;\r\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\r\n\r\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\r\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\r\n          chunkStart = this.state.pos - 1;\r\n          continue;\r\n        }\r\n\r\n        ++this.state.pos;\r\n        const esc = this.readCodePoint(true);\r\n\r\n        if (esc !== null) {\r\n          if (!identifierCheck(esc)) {\r\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\r\n          }\r\n\r\n          word += String.fromCodePoint(esc);\r\n        }\r\n\r\n        chunkStart = this.state.pos;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return word + this.input.slice(chunkStart, this.state.pos);\r\n  }\r\n\r\n  readWord(firstCode) {\r\n    const word = this.readWord1(firstCode);\r\n    const type = keywords$1.get(word);\r\n\r\n    if (type !== undefined) {\r\n      this.finishToken(type, tokenLabelName(type));\r\n    } else {\r\n      this.finishToken(122, word);\r\n    }\r\n  }\r\n\r\n  checkKeywordEscapes() {\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\r\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\r\n    }\r\n  }\r\n\r\n  updateContext(prevType) {\r\n    const {\r\n      context,\r\n      type\r\n    } = this.state;\r\n\r\n    switch (type) {\r\n      case 8:\r\n        context.pop();\r\n        break;\r\n\r\n      case 5:\r\n      case 7:\r\n      case 23:\r\n        context.push(types.brace);\r\n        break;\r\n\r\n      case 22:\r\n        if (context[context.length - 1] === types.template) {\r\n          context.pop();\r\n        } else {\r\n          context.push(types.template);\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nclass ClassScope {\r\n  constructor() {\r\n    this.privateNames = new Set();\r\n    this.loneAccessors = new Map();\r\n    this.undefinedPrivateNames = new Map();\r\n  }\r\n\r\n}\r\nclass ClassScopeHandler {\r\n  constructor(raise) {\r\n    this.stack = [];\r\n    this.undefinedPrivateNames = new Map();\r\n    this.raise = raise;\r\n  }\r\n\r\n  current() {\r\n    return this.stack[this.stack.length - 1];\r\n  }\r\n\r\n  enter() {\r\n    this.stack.push(new ClassScope());\r\n  }\r\n\r\n  exit() {\r\n    const oldClassScope = this.stack.pop();\r\n    const current = this.current();\r\n\r\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\r\n      if (current) {\r\n        if (!current.undefinedPrivateNames.has(name)) {\r\n          current.undefinedPrivateNames.set(name, pos);\r\n        }\r\n      } else {\r\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\r\n      }\r\n    }\r\n  }\r\n\r\n  declarePrivateName(name, elementType, pos) {\r\n    const classScope = this.current();\r\n    let redefined = classScope.privateNames.has(name);\r\n\r\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\r\n      const accessor = redefined && classScope.loneAccessors.get(name);\r\n\r\n      if (accessor) {\r\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\r\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\r\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\r\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\r\n        redefined = oldKind === newKind || oldStatic !== newStatic;\r\n        if (!redefined) classScope.loneAccessors.delete(name);\r\n      } else if (!redefined) {\r\n        classScope.loneAccessors.set(name, elementType);\r\n      }\r\n    }\r\n\r\n    if (redefined) {\r\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\r\n    }\r\n\r\n    classScope.privateNames.add(name);\r\n    classScope.undefinedPrivateNames.delete(name);\r\n  }\r\n\r\n  usePrivateName(name, pos) {\r\n    let classScope;\r\n\r\n    for (classScope of this.stack) {\r\n      if (classScope.privateNames.has(name)) return;\r\n    }\r\n\r\n    if (classScope) {\r\n      classScope.undefinedPrivateNames.set(name, pos);\r\n    } else {\r\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst kExpression = 0,\r\n      kMaybeArrowParameterDeclaration = 1,\r\n      kMaybeAsyncArrowParameterDeclaration = 2,\r\n      kParameterDeclaration = 3;\r\n\r\nclass ExpressionScope {\r\n  constructor(type = kExpression) {\r\n    this.type = void 0;\r\n    this.type = type;\r\n  }\r\n\r\n  canBeArrowParameterDeclaration() {\r\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\r\n  }\r\n\r\n  isCertainlyParameterDeclaration() {\r\n    return this.type === kParameterDeclaration;\r\n  }\r\n\r\n}\r\n\r\nclass ArrowHeadParsingScope extends ExpressionScope {\r\n  constructor(type) {\r\n    super(type);\r\n    this.errors = new Map();\r\n  }\r\n\r\n  recordDeclarationError(pos, template) {\r\n    this.errors.set(pos, template);\r\n  }\r\n\r\n  clearDeclarationError(pos) {\r\n    this.errors.delete(pos);\r\n  }\r\n\r\n  iterateErrors(iterator) {\r\n    this.errors.forEach(iterator);\r\n  }\r\n\r\n}\r\n\r\nclass ExpressionScopeHandler {\r\n  constructor(raise) {\r\n    this.stack = [new ExpressionScope()];\r\n    this.raise = raise;\r\n  }\r\n\r\n  enter(scope) {\r\n    this.stack.push(scope);\r\n  }\r\n\r\n  exit() {\r\n    this.stack.pop();\r\n  }\r\n\r\n  recordParameterInitializerError(pos, template) {\r\n    const {\r\n      stack\r\n    } = this;\r\n    let i = stack.length - 1;\r\n    let scope = stack[i];\r\n\r\n    while (!scope.isCertainlyParameterDeclaration()) {\r\n      if (scope.canBeArrowParameterDeclaration()) {\r\n        scope.recordDeclarationError(pos, template);\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      scope = stack[--i];\r\n    }\r\n\r\n    this.raise(pos, template);\r\n  }\r\n\r\n  recordParenthesizedIdentifierError(pos, template) {\r\n    const {\r\n      stack\r\n    } = this;\r\n    const scope = stack[stack.length - 1];\r\n\r\n    if (scope.isCertainlyParameterDeclaration()) {\r\n      this.raise(pos, template);\r\n    } else if (scope.canBeArrowParameterDeclaration()) {\r\n      scope.recordDeclarationError(pos, template);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  recordAsyncArrowParametersError(pos, template) {\r\n    const {\r\n      stack\r\n    } = this;\r\n    let i = stack.length - 1;\r\n    let scope = stack[i];\r\n\r\n    while (scope.canBeArrowParameterDeclaration()) {\r\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\r\n        scope.recordDeclarationError(pos, template);\r\n      }\r\n\r\n      scope = stack[--i];\r\n    }\r\n  }\r\n\r\n  validateAsPattern() {\r\n    const {\r\n      stack\r\n    } = this;\r\n    const currentScope = stack[stack.length - 1];\r\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\r\n    currentScope.iterateErrors((template, pos) => {\r\n      this.raise(pos, template);\r\n      let i = stack.length - 2;\r\n      let scope = stack[i];\r\n\r\n      while (scope.canBeArrowParameterDeclaration()) {\r\n        scope.clearDeclarationError(pos);\r\n        scope = stack[--i];\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\nfunction newParameterDeclarationScope() {\r\n  return new ExpressionScope(kParameterDeclaration);\r\n}\r\nfunction newArrowHeadScope() {\r\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\r\n}\r\nfunction newAsyncArrowScope() {\r\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\r\n}\r\nfunction newExpressionScope() {\r\n  return new ExpressionScope();\r\n}\r\n\r\nconst PARAM = 0b0000,\r\n      PARAM_YIELD = 0b0001,\r\n      PARAM_AWAIT = 0b0010,\r\n      PARAM_RETURN = 0b0100,\r\n      PARAM_IN = 0b1000;\r\nclass ProductionParameterHandler {\r\n  constructor() {\r\n    this.stacks = [];\r\n  }\r\n\r\n  enter(flags) {\r\n    this.stacks.push(flags);\r\n  }\r\n\r\n  exit() {\r\n    this.stacks.pop();\r\n  }\r\n\r\n  currentFlags() {\r\n    return this.stacks[this.stacks.length - 1];\r\n  }\r\n\r\n  get hasAwait() {\r\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\r\n  }\r\n\r\n  get hasYield() {\r\n    return (this.currentFlags() & PARAM_YIELD) > 0;\r\n  }\r\n\r\n  get hasReturn() {\r\n    return (this.currentFlags() & PARAM_RETURN) > 0;\r\n  }\r\n\r\n  get hasIn() {\r\n    return (this.currentFlags() & PARAM_IN) > 0;\r\n  }\r\n\r\n}\r\nfunction functionFlags(isAsync, isGenerator) {\r\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\r\n}\r\n\r\nclass UtilParser extends Tokenizer {\r\n  addExtra(node, key, val) {\r\n    if (!node) return;\r\n    const extra = node.extra = node.extra || {};\r\n    extra[key] = val;\r\n  }\r\n\r\n  isContextual(token) {\r\n    return this.state.type === token && !this.state.containsEsc;\r\n  }\r\n\r\n  isUnparsedContextual(nameStart, name) {\r\n    const nameEnd = nameStart + name.length;\r\n\r\n    if (this.input.slice(nameStart, nameEnd) === name) {\r\n      const nextCh = this.input.charCodeAt(nameEnd);\r\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isLookaheadContextual(name) {\r\n    const next = this.nextTokenStart();\r\n    return this.isUnparsedContextual(next, name);\r\n  }\r\n\r\n  eatContextual(token) {\r\n    if (this.isContextual(token)) {\r\n      this.next();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  expectContextual(token, template) {\r\n    if (!this.eatContextual(token)) this.unexpected(null, template);\r\n  }\r\n\r\n  canInsertSemicolon() {\r\n    return this.match(129) || this.match(8) || this.hasPrecedingLineBreak();\r\n  }\r\n\r\n  hasPrecedingLineBreak() {\r\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\r\n  }\r\n\r\n  hasFollowingLineBreak() {\r\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\r\n    return skipWhiteSpaceToLineBreak.test(this.input);\r\n  }\r\n\r\n  isLineTerminator() {\r\n    return this.eat(13) || this.canInsertSemicolon();\r\n  }\r\n\r\n  semicolon(allowAsi = true) {\r\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\r\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\r\n  }\r\n\r\n  expect(type, pos) {\r\n    this.eat(type) || this.unexpected(pos, type);\r\n  }\r\n\r\n  assertNoSpace(message = \"Unexpected space.\") {\r\n    if (this.state.start > this.state.lastTokEnd) {\r\n      this.raise(this.state.lastTokEnd, {\r\n        code: ErrorCodes.SyntaxError,\r\n        reasonCode: \"UnexpectedSpace\",\r\n        template: message\r\n      });\r\n    }\r\n  }\r\n\r\n  unexpected(pos, messageOrType = {\r\n    code: ErrorCodes.SyntaxError,\r\n    reasonCode: \"UnexpectedToken\",\r\n    template: \"Unexpected token\"\r\n  }) {\r\n    if (isTokenType(messageOrType)) {\r\n      messageOrType = {\r\n        code: ErrorCodes.SyntaxError,\r\n        reasonCode: \"UnexpectedToken\",\r\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\r\n      };\r\n    }\r\n\r\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\r\n  }\r\n\r\n  expectPlugin(name, pos) {\r\n    if (!this.hasPlugin(name)) {\r\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\r\n        missingPlugin: [name]\r\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  expectOnePlugin(names, pos) {\r\n    if (!names.some(n => this.hasPlugin(n))) {\r\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\r\n        missingPlugin: names\r\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\r\n    }\r\n  }\r\n\r\n  tryParse(fn, oldState = this.state.clone()) {\r\n    const abortSignal = {\r\n      node: null\r\n    };\r\n\r\n    try {\r\n      const node = fn((node = null) => {\r\n        abortSignal.node = node;\r\n        throw abortSignal;\r\n      });\r\n\r\n      if (this.state.errors.length > oldState.errors.length) {\r\n        const failState = this.state;\r\n        this.state = oldState;\r\n        this.state.tokensLength = failState.tokensLength;\r\n        return {\r\n          node,\r\n          error: failState.errors[oldState.errors.length],\r\n          thrown: false,\r\n          aborted: false,\r\n          failState\r\n        };\r\n      }\r\n\r\n      return {\r\n        node,\r\n        error: null,\r\n        thrown: false,\r\n        aborted: false,\r\n        failState: null\r\n      };\r\n    } catch (error) {\r\n      const failState = this.state;\r\n      this.state = oldState;\r\n\r\n      if (error instanceof SyntaxError) {\r\n        return {\r\n          node: null,\r\n          error,\r\n          thrown: true,\r\n          aborted: false,\r\n          failState\r\n        };\r\n      }\r\n\r\n      if (error === abortSignal) {\r\n        return {\r\n          node: abortSignal.node,\r\n          error: null,\r\n          thrown: false,\r\n          aborted: true,\r\n          failState\r\n        };\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  checkExpressionErrors(refExpressionErrors, andThrow) {\r\n    if (!refExpressionErrors) return false;\r\n    const {\r\n      shorthandAssign,\r\n      doubleProto,\r\n      optionalParameters\r\n    } = refExpressionErrors;\r\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\r\n\r\n    if (!andThrow) {\r\n      return hasErrors;\r\n    } else if (hasErrors) {\r\n      if (shorthandAssign >= 0) {\r\n        this.unexpected(shorthandAssign);\r\n      }\r\n\r\n      if (doubleProto >= 0) {\r\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\r\n      }\r\n\r\n      if (optionalParameters >= 0) {\r\n        this.unexpected(optionalParameters);\r\n      }\r\n    }\r\n  }\r\n\r\n  isLiteralPropertyName() {\r\n    return tokenIsLiteralPropertyName(this.state.type);\r\n  }\r\n\r\n  isPrivateName(node) {\r\n    return node.type === \"PrivateName\";\r\n  }\r\n\r\n  getPrivateNameSV(node) {\r\n    return node.id.name;\r\n  }\r\n\r\n  hasPropertyAsPrivateName(node) {\r\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\r\n  }\r\n\r\n  isOptionalChain(node) {\r\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\r\n  }\r\n\r\n  isObjectProperty(node) {\r\n    return node.type === \"ObjectProperty\";\r\n  }\r\n\r\n  isObjectMethod(node) {\r\n    return node.type === \"ObjectMethod\";\r\n  }\r\n\r\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\r\n    const oldLabels = this.state.labels;\r\n    this.state.labels = [];\r\n    const oldExportedIdentifiers = this.exportedIdentifiers;\r\n    this.exportedIdentifiers = new Set();\r\n    const oldInModule = this.inModule;\r\n    this.inModule = inModule;\r\n    const oldScope = this.scope;\r\n    const ScopeHandler = this.getScopeHandler();\r\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\r\n    const oldProdParam = this.prodParam;\r\n    this.prodParam = new ProductionParameterHandler();\r\n    const oldClassScope = this.classScope;\r\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\r\n    const oldExpressionScope = this.expressionScope;\r\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\r\n    return () => {\r\n      this.state.labels = oldLabels;\r\n      this.exportedIdentifiers = oldExportedIdentifiers;\r\n      this.inModule = oldInModule;\r\n      this.scope = oldScope;\r\n      this.prodParam = oldProdParam;\r\n      this.classScope = oldClassScope;\r\n      this.expressionScope = oldExpressionScope;\r\n    };\r\n  }\r\n\r\n  enterInitialScopes() {\r\n    let paramFlags = PARAM;\r\n\r\n    if (this.inModule) {\r\n      paramFlags |= PARAM_AWAIT;\r\n    }\r\n\r\n    this.scope.enter(SCOPE_PROGRAM);\r\n    this.prodParam.enter(paramFlags);\r\n  }\r\n\r\n}\r\nclass ExpressionErrors {\r\n  constructor() {\r\n    this.shorthandAssign = -1;\r\n    this.doubleProto = -1;\r\n    this.optionalParameters = -1;\r\n  }\r\n\r\n}\r\n\r\nclass Node {\r\n  constructor(parser, pos, loc) {\r\n    this.type = \"\";\r\n    this.start = pos;\r\n    this.end = 0;\r\n    this.loc = new SourceLocation(loc);\r\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\r\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\r\n  }\r\n\r\n}\r\n\r\nconst NodePrototype = Node.prototype;\r\n{\r\n  NodePrototype.__clone = function () {\r\n    const newNode = new Node();\r\n    const keys = Object.keys(this);\r\n\r\n    for (let i = 0, length = keys.length; i < length; i++) {\r\n      const key = keys[i];\r\n\r\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\r\n        newNode[key] = this[key];\r\n      }\r\n    }\r\n\r\n    return newNode;\r\n  };\r\n}\r\n\r\nfunction clonePlaceholder(node) {\r\n  return cloneIdentifier(node);\r\n}\r\n\r\nfunction cloneIdentifier(node) {\r\n  const {\r\n    type,\r\n    start,\r\n    end,\r\n    loc,\r\n    range,\r\n    extra,\r\n    name\r\n  } = node;\r\n  const cloned = Object.create(NodePrototype);\r\n  cloned.type = type;\r\n  cloned.start = start;\r\n  cloned.end = end;\r\n  cloned.loc = loc;\r\n  cloned.range = range;\r\n  cloned.extra = extra;\r\n  cloned.name = name;\r\n\r\n  if (type === \"Placeholder\") {\r\n    cloned.expectedNode = node.expectedNode;\r\n  }\r\n\r\n  return cloned;\r\n}\r\nfunction cloneStringLiteral(node) {\r\n  const {\r\n    type,\r\n    start,\r\n    end,\r\n    loc,\r\n    range,\r\n    extra\r\n  } = node;\r\n\r\n  if (type === \"Placeholder\") {\r\n    return clonePlaceholder(node);\r\n  }\r\n\r\n  const cloned = Object.create(NodePrototype);\r\n  cloned.type = \"StringLiteral\";\r\n  cloned.start = start;\r\n  cloned.end = end;\r\n  cloned.loc = loc;\r\n  cloned.range = range;\r\n  cloned.extra = extra;\r\n  cloned.value = node.value;\r\n  return cloned;\r\n}\r\nclass NodeUtils extends UtilParser {\r\n  startNode() {\r\n    return new Node(this, this.state.start, this.state.startLoc);\r\n  }\r\n\r\n  startNodeAt(pos, loc) {\r\n    return new Node(this, pos, loc);\r\n  }\r\n\r\n  startNodeAtNode(type) {\r\n    return this.startNodeAt(type.start, type.loc.start);\r\n  }\r\n\r\n  finishNode(node, type) {\r\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\r\n  }\r\n\r\n  finishNodeAt(node, type, pos, loc) {\r\n\r\n    node.type = type;\r\n    node.end = pos;\r\n    node.loc.end = loc;\r\n    if (this.options.ranges) node.range[1] = pos;\r\n    if (this.options.attachComment) this.processComment(node);\r\n    return node;\r\n  }\r\n\r\n  resetStartLocation(node, start, startLoc) {\r\n    node.start = start;\r\n    node.loc.start = startLoc;\r\n    if (this.options.ranges) node.range[0] = start;\r\n  }\r\n\r\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\r\n    node.end = end;\r\n    node.loc.end = endLoc;\r\n    if (this.options.ranges) node.range[1] = end;\r\n  }\r\n\r\n  resetStartLocationFromNode(node, locationNode) {\r\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\r\n  }\r\n\r\n}\r\n\r\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\r\nconst FlowErrors = makeErrorTemplates({\r\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\r\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\r\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\r\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\r\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\r\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\r\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\r\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\r\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\r\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\r\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\r\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\r\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\r\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\r\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\r\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\r\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\r\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\r\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\r\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\r\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\r\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\r\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\r\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\r\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\r\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\r\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\r\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\r\n  SpreadVariance: \"Spread properties cannot have variance.\",\r\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\r\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\r\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\r\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\r\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\r\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\r\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\r\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\r\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\r\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\r\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\r\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\r\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\r\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\r\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\r\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\r\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\r\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\r\n}, ErrorCodes.SyntaxError, \"flow\");\r\n\r\nfunction isEsModuleType(bodyElement) {\r\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\r\n}\r\n\r\nfunction hasTypeImportKind(node) {\r\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\r\n}\r\n\r\nfunction isMaybeDefaultImport(type) {\r\n  return tokenIsKeywordOrIdentifier(type) && type !== 91;\r\n}\r\n\r\nconst exportSuggestions = {\r\n  const: \"declare export var\",\r\n  let: \"declare export var\",\r\n  type: \"export type\",\r\n  interface: \"export interface\"\r\n};\r\n\r\nfunction partition(list, test) {\r\n  const list1 = [];\r\n  const list2 = [];\r\n\r\n  for (let i = 0; i < list.length; i++) {\r\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\r\n  }\r\n\r\n  return [list1, list2];\r\n}\r\n\r\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\r\nvar flow = (superClass => class extends superClass {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.flowPragma = undefined;\r\n  }\r\n\r\n  getScopeHandler() {\r\n    return FlowScopeHandler;\r\n  }\r\n\r\n  shouldParseTypes() {\r\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\r\n  }\r\n\r\n  shouldParseEnums() {\r\n    return !!this.getPluginOption(\"flow\", \"enums\");\r\n  }\r\n\r\n  finishToken(type, val) {\r\n    if (type !== 123 && type !== 13 && type !== 26) {\r\n      if (this.flowPragma === undefined) {\r\n        this.flowPragma = null;\r\n      }\r\n    }\r\n\r\n    return super.finishToken(type, val);\r\n  }\r\n\r\n  addComment(comment) {\r\n    if (this.flowPragma === undefined) {\r\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\r\n\r\n      if (!matches) ; else if (matches[1] === \"flow\") {\r\n        this.flowPragma = \"flow\";\r\n      } else if (matches[1] === \"noflow\") {\r\n        this.flowPragma = \"noflow\";\r\n      } else {\r\n        throw new Error(\"Unexpected flow pragma\");\r\n      }\r\n    }\r\n\r\n    return super.addComment(comment);\r\n  }\r\n\r\n  flowParseTypeInitialiser(tok) {\r\n    const oldInType = this.state.inType;\r\n    this.state.inType = true;\r\n    this.expect(tok || 14);\r\n    const type = this.flowParseType();\r\n    this.state.inType = oldInType;\r\n    return type;\r\n  }\r\n\r\n  flowParsePredicate() {\r\n    const node = this.startNode();\r\n    const moduloPos = this.state.start;\r\n    this.next();\r\n    this.expectContextual(101);\r\n\r\n    if (this.state.lastTokStart > moduloPos + 1) {\r\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\r\n    }\r\n\r\n    if (this.eat(10)) {\r\n      node.value = this.parseExpression();\r\n      this.expect(11);\r\n      return this.finishNode(node, \"DeclaredPredicate\");\r\n    } else {\r\n      return this.finishNode(node, \"InferredPredicate\");\r\n    }\r\n  }\r\n\r\n  flowParseTypeAndPredicateInitialiser() {\r\n    const oldInType = this.state.inType;\r\n    this.state.inType = true;\r\n    this.expect(14);\r\n    let type = null;\r\n    let predicate = null;\r\n\r\n    if (this.match(48)) {\r\n      this.state.inType = oldInType;\r\n      predicate = this.flowParsePredicate();\r\n    } else {\r\n      type = this.flowParseType();\r\n      this.state.inType = oldInType;\r\n\r\n      if (this.match(48)) {\r\n        predicate = this.flowParsePredicate();\r\n      }\r\n    }\r\n\r\n    return [type, predicate];\r\n  }\r\n\r\n  flowParseDeclareClass(node) {\r\n    this.next();\r\n    this.flowParseInterfaceish(node, true);\r\n    return this.finishNode(node, \"DeclareClass\");\r\n  }\r\n\r\n  flowParseDeclareFunction(node) {\r\n    this.next();\r\n    const id = node.id = this.parseIdentifier();\r\n    const typeNode = this.startNode();\r\n    const typeContainer = this.startNode();\r\n\r\n    if (this.match(43)) {\r\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    } else {\r\n      typeNode.typeParameters = null;\r\n    }\r\n\r\n    this.expect(10);\r\n    const tmp = this.flowParseFunctionTypeParams();\r\n    typeNode.params = tmp.params;\r\n    typeNode.rest = tmp.rest;\r\n    typeNode.this = tmp._this;\r\n    this.expect(11);\r\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\r\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\r\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\r\n    this.resetEndLocation(id);\r\n    this.semicolon();\r\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\r\n    return this.finishNode(node, \"DeclareFunction\");\r\n  }\r\n\r\n  flowParseDeclare(node, insideModule) {\r\n    if (this.match(74)) {\r\n      return this.flowParseDeclareClass(node);\r\n    } else if (this.match(62)) {\r\n      return this.flowParseDeclareFunction(node);\r\n    } else if (this.match(68)) {\r\n      return this.flowParseDeclareVariable(node);\r\n    } else if (this.eatContextual(117)) {\r\n      if (this.match(16)) {\r\n        return this.flowParseDeclareModuleExports(node);\r\n      } else {\r\n        if (insideModule) {\r\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\r\n        }\r\n\r\n        return this.flowParseDeclareModule(node);\r\n      }\r\n    } else if (this.isContextual(120)) {\r\n      return this.flowParseDeclareTypeAlias(node);\r\n    } else if (this.isContextual(121)) {\r\n      return this.flowParseDeclareOpaqueType(node);\r\n    } else if (this.isContextual(119)) {\r\n      return this.flowParseDeclareInterface(node);\r\n    } else if (this.match(76)) {\r\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\r\n    } else {\r\n      throw this.unexpected();\r\n    }\r\n  }\r\n\r\n  flowParseDeclareVariable(node) {\r\n    this.next();\r\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\r\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\r\n    this.semicolon();\r\n    return this.finishNode(node, \"DeclareVariable\");\r\n  }\r\n\r\n  flowParseDeclareModule(node) {\r\n    this.scope.enter(SCOPE_OTHER);\r\n\r\n    if (this.match(123)) {\r\n      node.id = this.parseExprAtom();\r\n    } else {\r\n      node.id = this.parseIdentifier();\r\n    }\r\n\r\n    const bodyNode = node.body = this.startNode();\r\n    const body = bodyNode.body = [];\r\n    this.expect(5);\r\n\r\n    while (!this.match(8)) {\r\n      let bodyNode = this.startNode();\r\n\r\n      if (this.match(77)) {\r\n        this.next();\r\n\r\n        if (!this.isContextual(120) && !this.match(81)) {\r\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\r\n        }\r\n\r\n        this.parseImport(bodyNode);\r\n      } else {\r\n        this.expectContextual(115, FlowErrors.UnsupportedStatementInDeclareModule);\r\n        bodyNode = this.flowParseDeclare(bodyNode, true);\r\n      }\r\n\r\n      body.push(bodyNode);\r\n    }\r\n\r\n    this.scope.exit();\r\n    this.expect(8);\r\n    this.finishNode(bodyNode, \"BlockStatement\");\r\n    let kind = null;\r\n    let hasModuleExport = false;\r\n    body.forEach(bodyElement => {\r\n      if (isEsModuleType(bodyElement)) {\r\n        if (kind === \"CommonJS\") {\r\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\r\n        }\r\n\r\n        kind = \"ES\";\r\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\r\n        if (hasModuleExport) {\r\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\r\n        }\r\n\r\n        if (kind === \"ES\") {\r\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\r\n        }\r\n\r\n        kind = \"CommonJS\";\r\n        hasModuleExport = true;\r\n      }\r\n    });\r\n    node.kind = kind || \"CommonJS\";\r\n    return this.finishNode(node, \"DeclareModule\");\r\n  }\r\n\r\n  flowParseDeclareExportDeclaration(node, insideModule) {\r\n    this.expect(76);\r\n\r\n    if (this.eat(59)) {\r\n      if (this.match(62) || this.match(74)) {\r\n        node.declaration = this.flowParseDeclare(this.startNode());\r\n      } else {\r\n        node.declaration = this.flowParseType();\r\n        this.semicolon();\r\n      }\r\n\r\n      node.default = true;\r\n      return this.finishNode(node, \"DeclareExportDeclaration\");\r\n    } else {\r\n      if (this.match(69) || this.isLet() || (this.isContextual(120) || this.isContextual(119)) && !insideModule) {\r\n        const label = this.state.value;\r\n        const suggestion = exportSuggestions[label];\r\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\r\n      }\r\n\r\n      if (this.match(68) || this.match(62) || this.match(74) || this.isContextual(121)) {\r\n        node.declaration = this.flowParseDeclare(this.startNode());\r\n        node.default = false;\r\n        return this.finishNode(node, \"DeclareExportDeclaration\");\r\n      } else if (this.match(49) || this.match(5) || this.isContextual(119) || this.isContextual(120) || this.isContextual(121)) {\r\n        node = this.parseExport(node);\r\n\r\n        if (node.type === \"ExportNamedDeclaration\") {\r\n          node.type = \"ExportDeclaration\";\r\n          node.default = false;\r\n          delete node.exportKind;\r\n        }\r\n\r\n        node.type = \"Declare\" + node.type;\r\n        return node;\r\n      }\r\n    }\r\n\r\n    throw this.unexpected();\r\n  }\r\n\r\n  flowParseDeclareModuleExports(node) {\r\n    this.next();\r\n    this.expectContextual(102);\r\n    node.typeAnnotation = this.flowParseTypeAnnotation();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"DeclareModuleExports\");\r\n  }\r\n\r\n  flowParseDeclareTypeAlias(node) {\r\n    this.next();\r\n    this.flowParseTypeAlias(node);\r\n    node.type = \"DeclareTypeAlias\";\r\n    return node;\r\n  }\r\n\r\n  flowParseDeclareOpaqueType(node) {\r\n    this.next();\r\n    this.flowParseOpaqueType(node, true);\r\n    node.type = \"DeclareOpaqueType\";\r\n    return node;\r\n  }\r\n\r\n  flowParseDeclareInterface(node) {\r\n    this.next();\r\n    this.flowParseInterfaceish(node);\r\n    return this.finishNode(node, \"DeclareInterface\");\r\n  }\r\n\r\n  flowParseInterfaceish(node, isClass = false) {\r\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\r\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    } else {\r\n      node.typeParameters = null;\r\n    }\r\n\r\n    node.extends = [];\r\n    node.implements = [];\r\n    node.mixins = [];\r\n\r\n    if (this.eat(75)) {\r\n      do {\r\n        node.extends.push(this.flowParseInterfaceExtends());\r\n      } while (!isClass && this.eat(12));\r\n    }\r\n\r\n    if (this.isContextual(108)) {\r\n      this.next();\r\n\r\n      do {\r\n        node.mixins.push(this.flowParseInterfaceExtends());\r\n      } while (this.eat(12));\r\n    }\r\n\r\n    if (this.isContextual(104)) {\r\n      this.next();\r\n\r\n      do {\r\n        node.implements.push(this.flowParseInterfaceExtends());\r\n      } while (this.eat(12));\r\n    }\r\n\r\n    node.body = this.flowParseObjectType({\r\n      allowStatic: isClass,\r\n      allowExact: false,\r\n      allowSpread: false,\r\n      allowProto: isClass,\r\n      allowInexact: false\r\n    });\r\n  }\r\n\r\n  flowParseInterfaceExtends() {\r\n    const node = this.startNode();\r\n    node.id = this.flowParseQualifiedTypeIdentifier();\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\r\n    } else {\r\n      node.typeParameters = null;\r\n    }\r\n\r\n    return this.finishNode(node, \"InterfaceExtends\");\r\n  }\r\n\r\n  flowParseInterface(node) {\r\n    this.flowParseInterfaceish(node);\r\n    return this.finishNode(node, \"InterfaceDeclaration\");\r\n  }\r\n\r\n  checkNotUnderscore(word) {\r\n    if (word === \"_\") {\r\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\r\n    }\r\n  }\r\n\r\n  checkReservedType(word, startLoc, declaration) {\r\n    if (!reservedTypes.has(word)) return;\r\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\r\n  }\r\n\r\n  flowParseRestrictedIdentifier(liberal, declaration) {\r\n    this.checkReservedType(this.state.value, this.state.start, declaration);\r\n    return this.parseIdentifier(liberal);\r\n  }\r\n\r\n  flowParseTypeAlias(node) {\r\n    node.id = this.flowParseRestrictedIdentifier(false, true);\r\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    } else {\r\n      node.typeParameters = null;\r\n    }\r\n\r\n    node.right = this.flowParseTypeInitialiser(27);\r\n    this.semicolon();\r\n    return this.finishNode(node, \"TypeAlias\");\r\n  }\r\n\r\n  flowParseOpaqueType(node, declare) {\r\n    this.expectContextual(120);\r\n    node.id = this.flowParseRestrictedIdentifier(true, true);\r\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    } else {\r\n      node.typeParameters = null;\r\n    }\r\n\r\n    node.supertype = null;\r\n\r\n    if (this.match(14)) {\r\n      node.supertype = this.flowParseTypeInitialiser(14);\r\n    }\r\n\r\n    node.impltype = null;\r\n\r\n    if (!declare) {\r\n      node.impltype = this.flowParseTypeInitialiser(27);\r\n    }\r\n\r\n    this.semicolon();\r\n    return this.finishNode(node, \"OpaqueType\");\r\n  }\r\n\r\n  flowParseTypeParameter(requireDefault = false) {\r\n    const nodeStart = this.state.start;\r\n    const node = this.startNode();\r\n    const variance = this.flowParseVariance();\r\n    const ident = this.flowParseTypeAnnotatableIdentifier();\r\n    node.name = ident.name;\r\n    node.variance = variance;\r\n    node.bound = ident.typeAnnotation;\r\n\r\n    if (this.match(27)) {\r\n      this.eat(27);\r\n      node.default = this.flowParseType();\r\n    } else {\r\n      if (requireDefault) {\r\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\r\n      }\r\n    }\r\n\r\n    return this.finishNode(node, \"TypeParameter\");\r\n  }\r\n\r\n  flowParseTypeParameterDeclaration() {\r\n    const oldInType = this.state.inType;\r\n    const node = this.startNode();\r\n    node.params = [];\r\n    this.state.inType = true;\r\n\r\n    if (this.match(43) || this.match(132)) {\r\n      this.next();\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n\r\n    let defaultRequired = false;\r\n\r\n    do {\r\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\r\n      node.params.push(typeParameter);\r\n\r\n      if (typeParameter.default) {\r\n        defaultRequired = true;\r\n      }\r\n\r\n      if (!this.match(44)) {\r\n        this.expect(12);\r\n      }\r\n    } while (!this.match(44));\r\n\r\n    this.expect(44);\r\n    this.state.inType = oldInType;\r\n    return this.finishNode(node, \"TypeParameterDeclaration\");\r\n  }\r\n\r\n  flowParseTypeParameterInstantiation() {\r\n    const node = this.startNode();\r\n    const oldInType = this.state.inType;\r\n    node.params = [];\r\n    this.state.inType = true;\r\n    this.expect(43);\r\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\r\n    this.state.noAnonFunctionType = false;\r\n\r\n    while (!this.match(44)) {\r\n      node.params.push(this.flowParseType());\r\n\r\n      if (!this.match(44)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\r\n    this.expect(44);\r\n    this.state.inType = oldInType;\r\n    return this.finishNode(node, \"TypeParameterInstantiation\");\r\n  }\r\n\r\n  flowParseTypeParameterInstantiationCallOrNew() {\r\n    const node = this.startNode();\r\n    const oldInType = this.state.inType;\r\n    node.params = [];\r\n    this.state.inType = true;\r\n    this.expect(43);\r\n\r\n    while (!this.match(44)) {\r\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\r\n\r\n      if (!this.match(44)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    this.expect(44);\r\n    this.state.inType = oldInType;\r\n    return this.finishNode(node, \"TypeParameterInstantiation\");\r\n  }\r\n\r\n  flowParseInterfaceType() {\r\n    const node = this.startNode();\r\n    this.expectContextual(119);\r\n    node.extends = [];\r\n\r\n    if (this.eat(75)) {\r\n      do {\r\n        node.extends.push(this.flowParseInterfaceExtends());\r\n      } while (this.eat(12));\r\n    }\r\n\r\n    node.body = this.flowParseObjectType({\r\n      allowStatic: false,\r\n      allowExact: false,\r\n      allowSpread: false,\r\n      allowProto: false,\r\n      allowInexact: false\r\n    });\r\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\r\n  }\r\n\r\n  flowParseObjectPropertyKey() {\r\n    return this.match(124) || this.match(123) ? this.parseExprAtom() : this.parseIdentifier(true);\r\n  }\r\n\r\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\r\n    node.static = isStatic;\r\n\r\n    if (this.lookahead().type === 14) {\r\n      node.id = this.flowParseObjectPropertyKey();\r\n      node.key = this.flowParseTypeInitialiser();\r\n    } else {\r\n      node.id = null;\r\n      node.key = this.flowParseType();\r\n    }\r\n\r\n    this.expect(3);\r\n    node.value = this.flowParseTypeInitialiser();\r\n    node.variance = variance;\r\n    return this.finishNode(node, \"ObjectTypeIndexer\");\r\n  }\r\n\r\n  flowParseObjectTypeInternalSlot(node, isStatic) {\r\n    node.static = isStatic;\r\n    node.id = this.flowParseObjectPropertyKey();\r\n    this.expect(3);\r\n    this.expect(3);\r\n\r\n    if (this.match(43) || this.match(10)) {\r\n      node.method = true;\r\n      node.optional = false;\r\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\r\n    } else {\r\n      node.method = false;\r\n\r\n      if (this.eat(17)) {\r\n        node.optional = true;\r\n      }\r\n\r\n      node.value = this.flowParseTypeInitialiser();\r\n    }\r\n\r\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\r\n  }\r\n\r\n  flowParseObjectTypeMethodish(node) {\r\n    node.params = [];\r\n    node.rest = null;\r\n    node.typeParameters = null;\r\n    node.this = null;\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    }\r\n\r\n    this.expect(10);\r\n\r\n    if (this.match(72)) {\r\n      node.this = this.flowParseFunctionTypeParam(true);\r\n      node.this.name = null;\r\n\r\n      if (!this.match(11)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    while (!this.match(11) && !this.match(21)) {\r\n      node.params.push(this.flowParseFunctionTypeParam(false));\r\n\r\n      if (!this.match(11)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    if (this.eat(21)) {\r\n      node.rest = this.flowParseFunctionTypeParam(false);\r\n    }\r\n\r\n    this.expect(11);\r\n    node.returnType = this.flowParseTypeInitialiser();\r\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\r\n  }\r\n\r\n  flowParseObjectTypeCallProperty(node, isStatic) {\r\n    const valueNode = this.startNode();\r\n    node.static = isStatic;\r\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\r\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\r\n  }\r\n\r\n  flowParseObjectType({\r\n    allowStatic,\r\n    allowExact,\r\n    allowSpread,\r\n    allowProto,\r\n    allowInexact\r\n  }) {\r\n    const oldInType = this.state.inType;\r\n    this.state.inType = true;\r\n    const nodeStart = this.startNode();\r\n    nodeStart.callProperties = [];\r\n    nodeStart.properties = [];\r\n    nodeStart.indexers = [];\r\n    nodeStart.internalSlots = [];\r\n    let endDelim;\r\n    let exact;\r\n    let inexact = false;\r\n\r\n    if (allowExact && this.match(6)) {\r\n      this.expect(6);\r\n      endDelim = 9;\r\n      exact = true;\r\n    } else {\r\n      this.expect(5);\r\n      endDelim = 8;\r\n      exact = false;\r\n    }\r\n\r\n    nodeStart.exact = exact;\r\n\r\n    while (!this.match(endDelim)) {\r\n      let isStatic = false;\r\n      let protoStart = null;\r\n      let inexactStart = null;\r\n      const node = this.startNode();\r\n\r\n      if (allowProto && this.isContextual(109)) {\r\n        const lookahead = this.lookahead();\r\n\r\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\r\n          this.next();\r\n          protoStart = this.state.start;\r\n          allowStatic = false;\r\n        }\r\n      }\r\n\r\n      if (allowStatic && this.isContextual(98)) {\r\n        const lookahead = this.lookahead();\r\n\r\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\r\n          this.next();\r\n          isStatic = true;\r\n        }\r\n      }\r\n\r\n      const variance = this.flowParseVariance();\r\n\r\n      if (this.eat(0)) {\r\n        if (protoStart != null) {\r\n          this.unexpected(protoStart);\r\n        }\r\n\r\n        if (this.eat(0)) {\r\n          if (variance) {\r\n            this.unexpected(variance.start);\r\n          }\r\n\r\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\r\n        } else {\r\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\r\n        }\r\n      } else if (this.match(10) || this.match(43)) {\r\n        if (protoStart != null) {\r\n          this.unexpected(protoStart);\r\n        }\r\n\r\n        if (variance) {\r\n          this.unexpected(variance.start);\r\n        }\r\n\r\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\r\n      } else {\r\n        let kind = \"init\";\r\n\r\n        if (this.isContextual(92) || this.isContextual(97)) {\r\n          const lookahead = this.lookahead();\r\n\r\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\r\n            kind = this.state.value;\r\n            this.next();\r\n          }\r\n        }\r\n\r\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\r\n\r\n        if (propOrInexact === null) {\r\n          inexact = true;\r\n          inexactStart = this.state.lastTokStart;\r\n        } else {\r\n          nodeStart.properties.push(propOrInexact);\r\n        }\r\n      }\r\n\r\n      this.flowObjectTypeSemicolon();\r\n\r\n      if (inexactStart && !this.match(8) && !this.match(9)) {\r\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\r\n      }\r\n    }\r\n\r\n    this.expect(endDelim);\r\n\r\n    if (allowSpread) {\r\n      nodeStart.inexact = inexact;\r\n    }\r\n\r\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\r\n    this.state.inType = oldInType;\r\n    return out;\r\n  }\r\n\r\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\r\n    if (this.eat(21)) {\r\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\r\n\r\n      if (isInexactToken) {\r\n        if (!allowSpread) {\r\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\r\n        } else if (!allowInexact) {\r\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\r\n        }\r\n\r\n        if (variance) {\r\n          this.raise(variance.start, FlowErrors.InexactVariance);\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      if (!allowSpread) {\r\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\r\n      }\r\n\r\n      if (protoStart != null) {\r\n        this.unexpected(protoStart);\r\n      }\r\n\r\n      if (variance) {\r\n        this.raise(variance.start, FlowErrors.SpreadVariance);\r\n      }\r\n\r\n      node.argument = this.flowParseType();\r\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\r\n    } else {\r\n      node.key = this.flowParseObjectPropertyKey();\r\n      node.static = isStatic;\r\n      node.proto = protoStart != null;\r\n      node.kind = kind;\r\n      let optional = false;\r\n\r\n      if (this.match(43) || this.match(10)) {\r\n        node.method = true;\r\n\r\n        if (protoStart != null) {\r\n          this.unexpected(protoStart);\r\n        }\r\n\r\n        if (variance) {\r\n          this.unexpected(variance.start);\r\n        }\r\n\r\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\r\n\r\n        if (kind === \"get\" || kind === \"set\") {\r\n          this.flowCheckGetterSetterParams(node);\r\n        }\r\n\r\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\r\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\r\n        }\r\n      } else {\r\n        if (kind !== \"init\") this.unexpected();\r\n        node.method = false;\r\n\r\n        if (this.eat(17)) {\r\n          optional = true;\r\n        }\r\n\r\n        node.value = this.flowParseTypeInitialiser();\r\n        node.variance = variance;\r\n      }\r\n\r\n      node.optional = optional;\r\n      return this.finishNode(node, \"ObjectTypeProperty\");\r\n    }\r\n  }\r\n\r\n  flowCheckGetterSetterParams(property) {\r\n    const paramCount = property.kind === \"get\" ? 0 : 1;\r\n    const start = property.start;\r\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\r\n\r\n    if (property.value.this) {\r\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\r\n    }\r\n\r\n    if (length !== paramCount) {\r\n      if (property.kind === \"get\") {\r\n        this.raise(start, ErrorMessages.BadGetterArity);\r\n      } else {\r\n        this.raise(start, ErrorMessages.BadSetterArity);\r\n      }\r\n    }\r\n\r\n    if (property.kind === \"set\" && property.value.rest) {\r\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\r\n    }\r\n  }\r\n\r\n  flowObjectTypeSemicolon() {\r\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\r\n      this.unexpected();\r\n    }\r\n  }\r\n\r\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\r\n    startPos = startPos || this.state.start;\r\n    startLoc = startLoc || this.state.startLoc;\r\n    let node = id || this.flowParseRestrictedIdentifier(true);\r\n\r\n    while (this.eat(16)) {\r\n      const node2 = this.startNodeAt(startPos, startLoc);\r\n      node2.qualification = node;\r\n      node2.id = this.flowParseRestrictedIdentifier(true);\r\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  flowParseGenericType(startPos, startLoc, id) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    node.typeParameters = null;\r\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\r\n    }\r\n\r\n    return this.finishNode(node, \"GenericTypeAnnotation\");\r\n  }\r\n\r\n  flowParseTypeofType() {\r\n    const node = this.startNode();\r\n    this.expect(81);\r\n    node.argument = this.flowParsePrimaryType();\r\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\r\n  }\r\n\r\n  flowParseTupleType() {\r\n    const node = this.startNode();\r\n    node.types = [];\r\n    this.expect(0);\r\n\r\n    while (this.state.pos < this.length && !this.match(3)) {\r\n      node.types.push(this.flowParseType());\r\n      if (this.match(3)) break;\r\n      this.expect(12);\r\n    }\r\n\r\n    this.expect(3);\r\n    return this.finishNode(node, \"TupleTypeAnnotation\");\r\n  }\r\n\r\n  flowParseFunctionTypeParam(first) {\r\n    let name = null;\r\n    let optional = false;\r\n    let typeAnnotation = null;\r\n    const node = this.startNode();\r\n    const lh = this.lookahead();\r\n    const isThis = this.state.type === 72;\r\n\r\n    if (lh.type === 14 || lh.type === 17) {\r\n      if (isThis && !first) {\r\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\r\n      }\r\n\r\n      name = this.parseIdentifier(isThis);\r\n\r\n      if (this.eat(17)) {\r\n        optional = true;\r\n\r\n        if (isThis) {\r\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\r\n        }\r\n      }\r\n\r\n      typeAnnotation = this.flowParseTypeInitialiser();\r\n    } else {\r\n      typeAnnotation = this.flowParseType();\r\n    }\r\n\r\n    node.name = name;\r\n    node.optional = optional;\r\n    node.typeAnnotation = typeAnnotation;\r\n    return this.finishNode(node, \"FunctionTypeParam\");\r\n  }\r\n\r\n  reinterpretTypeAsFunctionTypeParam(type) {\r\n    const node = this.startNodeAt(type.start, type.loc.start);\r\n    node.name = null;\r\n    node.optional = false;\r\n    node.typeAnnotation = type;\r\n    return this.finishNode(node, \"FunctionTypeParam\");\r\n  }\r\n\r\n  flowParseFunctionTypeParams(params = []) {\r\n    let rest = null;\r\n    let _this = null;\r\n\r\n    if (this.match(72)) {\r\n      _this = this.flowParseFunctionTypeParam(true);\r\n      _this.name = null;\r\n\r\n      if (!this.match(11)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    while (!this.match(11) && !this.match(21)) {\r\n      params.push(this.flowParseFunctionTypeParam(false));\r\n\r\n      if (!this.match(11)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    if (this.eat(21)) {\r\n      rest = this.flowParseFunctionTypeParam(false);\r\n    }\r\n\r\n    return {\r\n      params,\r\n      rest,\r\n      _this\r\n    };\r\n  }\r\n\r\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\r\n    switch (id.name) {\r\n      case \"any\":\r\n        return this.finishNode(node, \"AnyTypeAnnotation\");\r\n\r\n      case \"bool\":\r\n      case \"boolean\":\r\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\r\n\r\n      case \"mixed\":\r\n        return this.finishNode(node, \"MixedTypeAnnotation\");\r\n\r\n      case \"empty\":\r\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\r\n\r\n      case \"number\":\r\n        return this.finishNode(node, \"NumberTypeAnnotation\");\r\n\r\n      case \"string\":\r\n        return this.finishNode(node, \"StringTypeAnnotation\");\r\n\r\n      case \"symbol\":\r\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\r\n\r\n      default:\r\n        this.checkNotUnderscore(id.name);\r\n        return this.flowParseGenericType(startPos, startLoc, id);\r\n    }\r\n  }\r\n\r\n  flowParsePrimaryType() {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const node = this.startNode();\r\n    let tmp;\r\n    let type;\r\n    let isGroupedType = false;\r\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\r\n\r\n    switch (this.state.type) {\r\n      case 5:\r\n        return this.flowParseObjectType({\r\n          allowStatic: false,\r\n          allowExact: false,\r\n          allowSpread: true,\r\n          allowProto: false,\r\n          allowInexact: true\r\n        });\r\n\r\n      case 6:\r\n        return this.flowParseObjectType({\r\n          allowStatic: false,\r\n          allowExact: true,\r\n          allowSpread: true,\r\n          allowProto: false,\r\n          allowInexact: false\r\n        });\r\n\r\n      case 0:\r\n        this.state.noAnonFunctionType = false;\r\n        type = this.flowParseTupleType();\r\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\r\n        return type;\r\n\r\n      case 43:\r\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n        this.expect(10);\r\n        tmp = this.flowParseFunctionTypeParams();\r\n        node.params = tmp.params;\r\n        node.rest = tmp.rest;\r\n        node.this = tmp._this;\r\n        this.expect(11);\r\n        this.expect(19);\r\n        node.returnType = this.flowParseType();\r\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\r\n\r\n      case 10:\r\n        this.next();\r\n\r\n        if (!this.match(11) && !this.match(21)) {\r\n          if (tokenIsIdentifier(this.state.type) || this.match(72)) {\r\n            const token = this.lookahead().type;\r\n            isGroupedType = token !== 17 && token !== 14;\r\n          } else {\r\n            isGroupedType = true;\r\n          }\r\n        }\r\n\r\n        if (isGroupedType) {\r\n          this.state.noAnonFunctionType = false;\r\n          type = this.flowParseType();\r\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\r\n\r\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\r\n            this.expect(11);\r\n            return type;\r\n          } else {\r\n            this.eat(12);\r\n          }\r\n        }\r\n\r\n        if (type) {\r\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\r\n        } else {\r\n          tmp = this.flowParseFunctionTypeParams();\r\n        }\r\n\r\n        node.params = tmp.params;\r\n        node.rest = tmp.rest;\r\n        node.this = tmp._this;\r\n        this.expect(11);\r\n        this.expect(19);\r\n        node.returnType = this.flowParseType();\r\n        node.typeParameters = null;\r\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\r\n\r\n      case 123:\r\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\r\n\r\n      case 79:\r\n      case 80:\r\n        node.value = this.match(79);\r\n        this.next();\r\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\r\n\r\n      case 47:\r\n        if (this.state.value === \"-\") {\r\n          this.next();\r\n\r\n          if (this.match(124)) {\r\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\r\n          }\r\n\r\n          if (this.match(125)) {\r\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\r\n          }\r\n\r\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\r\n        }\r\n\r\n        throw this.unexpected();\r\n\r\n      case 124:\r\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\r\n\r\n      case 125:\r\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\r\n\r\n      case 82:\r\n        this.next();\r\n        return this.finishNode(node, \"VoidTypeAnnotation\");\r\n\r\n      case 78:\r\n        this.next();\r\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\r\n\r\n      case 72:\r\n        this.next();\r\n        return this.finishNode(node, \"ThisTypeAnnotation\");\r\n\r\n      case 49:\r\n        this.next();\r\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\r\n\r\n      case 81:\r\n        return this.flowParseTypeofType();\r\n\r\n      default:\r\n        if (tokenIsKeyword(this.state.type)) {\r\n          const label = tokenLabelName(this.state.type);\r\n          this.next();\r\n          return super.createIdentifier(node, label);\r\n        } else if (tokenIsIdentifier(this.state.type)) {\r\n          if (this.isContextual(119)) {\r\n            return this.flowParseInterfaceType();\r\n          }\r\n\r\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\r\n        }\r\n\r\n    }\r\n\r\n    throw this.unexpected();\r\n  }\r\n\r\n  flowParsePostfixType() {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    let type = this.flowParsePrimaryType();\r\n    let seenOptionalIndexedAccess = false;\r\n\r\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      const optional = this.eat(18);\r\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\r\n      this.expect(0);\r\n\r\n      if (!optional && this.match(3)) {\r\n        node.elementType = type;\r\n        this.next();\r\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\r\n      } else {\r\n        node.objectType = type;\r\n        node.indexType = this.flowParseType();\r\n        this.expect(3);\r\n\r\n        if (seenOptionalIndexedAccess) {\r\n          node.optional = optional;\r\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\r\n        } else {\r\n          type = this.finishNode(node, \"IndexedAccessType\");\r\n        }\r\n      }\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  flowParsePrefixType() {\r\n    const node = this.startNode();\r\n\r\n    if (this.eat(17)) {\r\n      node.typeAnnotation = this.flowParsePrefixType();\r\n      return this.finishNode(node, \"NullableTypeAnnotation\");\r\n    } else {\r\n      return this.flowParsePostfixType();\r\n    }\r\n  }\r\n\r\n  flowParseAnonFunctionWithoutParens() {\r\n    const param = this.flowParsePrefixType();\r\n\r\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\r\n      const node = this.startNodeAt(param.start, param.loc.start);\r\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\r\n      node.rest = null;\r\n      node.this = null;\r\n      node.returnType = this.flowParseType();\r\n      node.typeParameters = null;\r\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\r\n    }\r\n\r\n    return param;\r\n  }\r\n\r\n  flowParseIntersectionType() {\r\n    const node = this.startNode();\r\n    this.eat(41);\r\n    const type = this.flowParseAnonFunctionWithoutParens();\r\n    node.types = [type];\r\n\r\n    while (this.eat(41)) {\r\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\r\n    }\r\n\r\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\r\n  }\r\n\r\n  flowParseUnionType() {\r\n    const node = this.startNode();\r\n    this.eat(39);\r\n    const type = this.flowParseIntersectionType();\r\n    node.types = [type];\r\n\r\n    while (this.eat(39)) {\r\n      node.types.push(this.flowParseIntersectionType());\r\n    }\r\n\r\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\r\n  }\r\n\r\n  flowParseType() {\r\n    const oldInType = this.state.inType;\r\n    this.state.inType = true;\r\n    const type = this.flowParseUnionType();\r\n    this.state.inType = oldInType;\r\n    return type;\r\n  }\r\n\r\n  flowParseTypeOrImplicitInstantiation() {\r\n    if (this.state.type === 122 && this.state.value === \"_\") {\r\n      const startPos = this.state.start;\r\n      const startLoc = this.state.startLoc;\r\n      const node = this.parseIdentifier();\r\n      return this.flowParseGenericType(startPos, startLoc, node);\r\n    } else {\r\n      return this.flowParseType();\r\n    }\r\n  }\r\n\r\n  flowParseTypeAnnotation() {\r\n    const node = this.startNode();\r\n    node.typeAnnotation = this.flowParseTypeInitialiser();\r\n    return this.finishNode(node, \"TypeAnnotation\");\r\n  }\r\n\r\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\r\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\r\n\r\n    if (this.match(14)) {\r\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\r\n      this.resetEndLocation(ident);\r\n    }\r\n\r\n    return ident;\r\n  }\r\n\r\n  typeCastToParameter(node) {\r\n    node.expression.typeAnnotation = node.typeAnnotation;\r\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\r\n    return node.expression;\r\n  }\r\n\r\n  flowParseVariance() {\r\n    let variance = null;\r\n\r\n    if (this.match(47)) {\r\n      variance = this.startNode();\r\n\r\n      if (this.state.value === \"+\") {\r\n        variance.kind = \"plus\";\r\n      } else {\r\n        variance.kind = \"minus\";\r\n      }\r\n\r\n      this.next();\r\n      this.finishNode(variance, \"Variance\");\r\n    }\r\n\r\n    return variance;\r\n  }\r\n\r\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\r\n    if (allowExpressionBody) {\r\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\r\n    }\r\n\r\n    return super.parseFunctionBody(node, false, isMethod);\r\n  }\r\n\r\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\r\n    if (this.match(14)) {\r\n      const typeNode = this.startNode();\r\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\r\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\r\n    }\r\n\r\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\r\n  }\r\n\r\n  parseStatement(context, topLevel) {\r\n    if (this.state.strict && this.isContextual(119)) {\r\n      const lookahead = this.lookahead();\r\n\r\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\r\n        const node = this.startNode();\r\n        this.next();\r\n        return this.flowParseInterface(node);\r\n      }\r\n    } else if (this.shouldParseEnums() && this.isContextual(116)) {\r\n      const node = this.startNode();\r\n      this.next();\r\n      return this.flowParseEnumDeclaration(node);\r\n    }\r\n\r\n    const stmt = super.parseStatement(context, topLevel);\r\n\r\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\r\n      this.flowPragma = null;\r\n    }\r\n\r\n    return stmt;\r\n  }\r\n\r\n  parseExpressionStatement(node, expr) {\r\n    if (expr.type === \"Identifier\") {\r\n      if (expr.name === \"declare\") {\r\n        if (this.match(74) || tokenIsIdentifier(this.state.type) || this.match(62) || this.match(68) || this.match(76)) {\r\n          return this.flowParseDeclare(node);\r\n        }\r\n      } else if (tokenIsIdentifier(this.state.type)) {\r\n        if (expr.name === \"interface\") {\r\n          return this.flowParseInterface(node);\r\n        } else if (expr.name === \"type\") {\r\n          return this.flowParseTypeAlias(node);\r\n        } else if (expr.name === \"opaque\") {\r\n          return this.flowParseOpaqueType(node, false);\r\n        }\r\n      }\r\n    }\r\n\r\n    return super.parseExpressionStatement(node, expr);\r\n  }\r\n\r\n  shouldParseExportDeclaration() {\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 116) {\r\n      return !this.state.containsEsc;\r\n    }\r\n\r\n    return super.shouldParseExportDeclaration();\r\n  }\r\n\r\n  isExportDefaultSpecifier() {\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 116) {\r\n      return this.state.containsEsc;\r\n    }\r\n\r\n    return super.isExportDefaultSpecifier();\r\n  }\r\n\r\n  parseExportDefaultExpression() {\r\n    if (this.shouldParseEnums() && this.isContextual(116)) {\r\n      const node = this.startNode();\r\n      this.next();\r\n      return this.flowParseEnumDeclaration(node);\r\n    }\r\n\r\n    return super.parseExportDefaultExpression();\r\n  }\r\n\r\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\r\n    if (!this.match(17)) return expr;\r\n\r\n    if (this.state.maybeInArrowParameters) {\r\n      const nextCh = this.lookaheadCharCode();\r\n\r\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\r\n        this.setOptionalParametersError(refExpressionErrors);\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    this.expect(17);\r\n    const state = this.state.clone();\r\n    const originalNoArrowAt = this.state.noArrowAt;\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    let {\r\n      consequent,\r\n      failed\r\n    } = this.tryParseConditionalConsequent();\r\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\r\n\r\n    if (failed || invalid.length > 0) {\r\n      const noArrowAt = [...originalNoArrowAt];\r\n\r\n      if (invalid.length > 0) {\r\n        this.state = state;\r\n        this.state.noArrowAt = noArrowAt;\r\n\r\n        for (let i = 0; i < invalid.length; i++) {\r\n          noArrowAt.push(invalid[i].start);\r\n        }\r\n\r\n        ({\r\n          consequent,\r\n          failed\r\n        } = this.tryParseConditionalConsequent());\r\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\r\n      }\r\n\r\n      if (failed && valid.length > 1) {\r\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\r\n      }\r\n\r\n      if (failed && valid.length === 1) {\r\n        this.state = state;\r\n        noArrowAt.push(valid[0].start);\r\n        this.state.noArrowAt = noArrowAt;\r\n        ({\r\n          consequent,\r\n          failed\r\n        } = this.tryParseConditionalConsequent());\r\n      }\r\n    }\r\n\r\n    this.getArrowLikeExpressions(consequent, true);\r\n    this.state.noArrowAt = originalNoArrowAt;\r\n    this.expect(14);\r\n    node.test = expr;\r\n    node.consequent = consequent;\r\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\r\n    return this.finishNode(node, \"ConditionalExpression\");\r\n  }\r\n\r\n  tryParseConditionalConsequent() {\r\n    this.state.noArrowParamsConversionAt.push(this.state.start);\r\n    const consequent = this.parseMaybeAssignAllowIn();\r\n    const failed = !this.match(14);\r\n    this.state.noArrowParamsConversionAt.pop();\r\n    return {\r\n      consequent,\r\n      failed\r\n    };\r\n  }\r\n\r\n  getArrowLikeExpressions(node, disallowInvalid) {\r\n    const stack = [node];\r\n    const arrows = [];\r\n\r\n    while (stack.length !== 0) {\r\n      const node = stack.pop();\r\n\r\n      if (node.type === \"ArrowFunctionExpression\") {\r\n        if (node.typeParameters || !node.returnType) {\r\n          this.finishArrowValidation(node);\r\n        } else {\r\n          arrows.push(node);\r\n        }\r\n\r\n        stack.push(node.body);\r\n      } else if (node.type === \"ConditionalExpression\") {\r\n        stack.push(node.consequent);\r\n        stack.push(node.alternate);\r\n      }\r\n    }\r\n\r\n    if (disallowInvalid) {\r\n      arrows.forEach(node => this.finishArrowValidation(node));\r\n      return [arrows, []];\r\n    }\r\n\r\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\r\n  }\r\n\r\n  finishArrowValidation(node) {\r\n    var _node$extra;\r\n\r\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\r\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\r\n    super.checkParams(node, false, true);\r\n    this.scope.exit();\r\n  }\r\n\r\n  forwardNoArrowParamsConversionAt(node, parse) {\r\n    let result;\r\n\r\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\r\n      this.state.noArrowParamsConversionAt.push(this.state.start);\r\n      result = parse();\r\n      this.state.noArrowParamsConversionAt.pop();\r\n    } else {\r\n      result = parse();\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  parseParenItem(node, startPos, startLoc) {\r\n    node = super.parseParenItem(node, startPos, startLoc);\r\n\r\n    if (this.eat(17)) {\r\n      node.optional = true;\r\n      this.resetEndLocation(node);\r\n    }\r\n\r\n    if (this.match(14)) {\r\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\r\n      typeCastNode.expression = node;\r\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\r\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  assertModuleNodeAllowed(node) {\r\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\r\n      return;\r\n    }\r\n\r\n    super.assertModuleNodeAllowed(node);\r\n  }\r\n\r\n  parseExport(node) {\r\n    const decl = super.parseExport(node);\r\n\r\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\r\n      decl.exportKind = decl.exportKind || \"value\";\r\n    }\r\n\r\n    return decl;\r\n  }\r\n\r\n  parseExportDeclaration(node) {\r\n    if (this.isContextual(120)) {\r\n      node.exportKind = \"type\";\r\n      const declarationNode = this.startNode();\r\n      this.next();\r\n\r\n      if (this.match(5)) {\r\n        node.specifiers = this.parseExportSpecifiers(true);\r\n        this.parseExportFrom(node);\r\n        return null;\r\n      } else {\r\n        return this.flowParseTypeAlias(declarationNode);\r\n      }\r\n    } else if (this.isContextual(121)) {\r\n      node.exportKind = \"type\";\r\n      const declarationNode = this.startNode();\r\n      this.next();\r\n      return this.flowParseOpaqueType(declarationNode, false);\r\n    } else if (this.isContextual(119)) {\r\n      node.exportKind = \"type\";\r\n      const declarationNode = this.startNode();\r\n      this.next();\r\n      return this.flowParseInterface(declarationNode);\r\n    } else if (this.shouldParseEnums() && this.isContextual(116)) {\r\n      node.exportKind = \"value\";\r\n      const declarationNode = this.startNode();\r\n      this.next();\r\n      return this.flowParseEnumDeclaration(declarationNode);\r\n    } else {\r\n      return super.parseExportDeclaration(node);\r\n    }\r\n  }\r\n\r\n  eatExportStar(node) {\r\n    if (super.eatExportStar(...arguments)) return true;\r\n\r\n    if (this.isContextual(120) && this.lookahead().type === 49) {\r\n      node.exportKind = \"type\";\r\n      this.next();\r\n      this.next();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  maybeParseExportNamespaceSpecifier(node) {\r\n    const pos = this.state.start;\r\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\r\n\r\n    if (hasNamespace && node.exportKind === \"type\") {\r\n      this.unexpected(pos);\r\n    }\r\n\r\n    return hasNamespace;\r\n  }\r\n\r\n  parseClassId(node, isStatement, optionalId) {\r\n    super.parseClassId(node, isStatement, optionalId);\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    }\r\n  }\r\n\r\n  parseClassMember(classBody, member, state) {\r\n    const pos = this.state.start;\r\n\r\n    if (this.isContextual(115)) {\r\n      if (this.parseClassMemberFromModifier(classBody, member)) {\r\n        return;\r\n      }\r\n\r\n      member.declare = true;\r\n    }\r\n\r\n    super.parseClassMember(classBody, member, state);\r\n\r\n    if (member.declare) {\r\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\r\n        this.raise(pos, FlowErrors.DeclareClassElement);\r\n      } else if (member.value) {\r\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\r\n      }\r\n    }\r\n  }\r\n\r\n  isIterator(word) {\r\n    return word === \"iterator\" || word === \"asyncIterator\";\r\n  }\r\n\r\n  readIterator() {\r\n    const word = super.readWord1();\r\n    const fullWord = \"@@\" + word;\r\n\r\n    if (!this.isIterator(word) || !this.state.inType) {\r\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\r\n    }\r\n\r\n    this.finishToken(122, fullWord);\r\n  }\r\n\r\n  getTokenFromCode(code) {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (code === 123 && next === 124) {\r\n      return this.finishOp(6, 2);\r\n    } else if (this.state.inType && (code === 62 || code === 60)) {\r\n      return this.finishOp(code === 62 ? 44 : 43, 1);\r\n    } else if (this.state.inType && code === 63) {\r\n      if (next === 46) {\r\n        return this.finishOp(18, 2);\r\n      }\r\n\r\n      return this.finishOp(17, 1);\r\n    } else if (isIteratorStart(code, next)) {\r\n      this.state.pos += 2;\r\n      return this.readIterator();\r\n    } else {\r\n      return super.getTokenFromCode(code);\r\n    }\r\n  }\r\n\r\n  isAssignable(node, isBinding) {\r\n    if (node.type === \"TypeCastExpression\") {\r\n      return this.isAssignable(node.expression, isBinding);\r\n    } else {\r\n      return super.isAssignable(node, isBinding);\r\n    }\r\n  }\r\n\r\n  toAssignable(node, isLHS = false) {\r\n    if (node.type === \"TypeCastExpression\") {\r\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\r\n    } else {\r\n      return super.toAssignable(node, isLHS);\r\n    }\r\n  }\r\n\r\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\r\n    for (let i = 0; i < exprList.length; i++) {\r\n      const expr = exprList[i];\r\n\r\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\r\n        exprList[i] = this.typeCastToParameter(expr);\r\n      }\r\n    }\r\n\r\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\r\n  }\r\n\r\n  toReferencedList(exprList, isParenthesizedExpr) {\r\n    for (let i = 0; i < exprList.length; i++) {\r\n      var _expr$extra;\r\n\r\n      const expr = exprList[i];\r\n\r\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\r\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\r\n      }\r\n    }\r\n\r\n    return exprList;\r\n  }\r\n\r\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\r\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\r\n\r\n    if (canBePattern && !this.state.maybeInArrowParameters) {\r\n      this.toReferencedList(node.elements);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  checkLVal(expr, ...args) {\r\n    if (expr.type !== \"TypeCastExpression\") {\r\n      return super.checkLVal(expr, ...args);\r\n    }\r\n  }\r\n\r\n  parseClassProperty(node) {\r\n    if (this.match(14)) {\r\n      node.typeAnnotation = this.flowParseTypeAnnotation();\r\n    }\r\n\r\n    return super.parseClassProperty(node);\r\n  }\r\n\r\n  parseClassPrivateProperty(node) {\r\n    if (this.match(14)) {\r\n      node.typeAnnotation = this.flowParseTypeAnnotation();\r\n    }\r\n\r\n    return super.parseClassPrivateProperty(node);\r\n  }\r\n\r\n  isClassMethod() {\r\n    return this.match(43) || super.isClassMethod();\r\n  }\r\n\r\n  isClassProperty() {\r\n    return this.match(14) || super.isClassProperty();\r\n  }\r\n\r\n  isNonstaticConstructor(method) {\r\n    return !this.match(14) && super.isNonstaticConstructor(method);\r\n  }\r\n\r\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\r\n    if (method.variance) {\r\n      this.unexpected(method.variance.start);\r\n    }\r\n\r\n    delete method.variance;\r\n\r\n    if (this.match(43)) {\r\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    }\r\n\r\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\r\n\r\n    if (method.params && isConstructor) {\r\n      const params = method.params;\r\n\r\n      if (params.length > 0 && this.isThisParam(params[0])) {\r\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\r\n      }\r\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\r\n      const params = method.value.params;\r\n\r\n      if (params.length > 0 && this.isThisParam(params[0])) {\r\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\r\n      }\r\n    }\r\n  }\r\n\r\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\r\n    if (method.variance) {\r\n      this.unexpected(method.variance.start);\r\n    }\r\n\r\n    delete method.variance;\r\n\r\n    if (this.match(43)) {\r\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    }\r\n\r\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\r\n  }\r\n\r\n  parseClassSuper(node) {\r\n    super.parseClassSuper(node);\r\n\r\n    if (node.superClass && this.match(43)) {\r\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\r\n    }\r\n\r\n    if (this.isContextual(104)) {\r\n      this.next();\r\n      const implemented = node.implements = [];\r\n\r\n      do {\r\n        const node = this.startNode();\r\n        node.id = this.flowParseRestrictedIdentifier(true);\r\n\r\n        if (this.match(43)) {\r\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\r\n        } else {\r\n          node.typeParameters = null;\r\n        }\r\n\r\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\r\n      } while (this.eat(12));\r\n    }\r\n  }\r\n\r\n  checkGetterSetterParams(method) {\r\n    super.checkGetterSetterParams(method);\r\n    const params = this.getObjectOrClassMethodParams(method);\r\n\r\n    if (params.length > 0) {\r\n      const param = params[0];\r\n\r\n      if (this.isThisParam(param) && method.kind === \"get\") {\r\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\r\n      } else if (this.isThisParam(param)) {\r\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\r\n      }\r\n    }\r\n  }\r\n\r\n  parsePropertyNamePrefixOperator(node) {\r\n    node.variance = this.flowParseVariance();\r\n  }\r\n\r\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\r\n    if (prop.variance) {\r\n      this.unexpected(prop.variance.start);\r\n    }\r\n\r\n    delete prop.variance;\r\n    let typeParameters;\r\n\r\n    if (this.match(43) && !isAccessor) {\r\n      typeParameters = this.flowParseTypeParameterDeclaration();\r\n      if (!this.match(10)) this.unexpected();\r\n    }\r\n\r\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\r\n\r\n    if (typeParameters) {\r\n      (prop.value || prop).typeParameters = typeParameters;\r\n    }\r\n  }\r\n\r\n  parseAssignableListItemTypes(param) {\r\n    if (this.eat(17)) {\r\n      if (param.type !== \"Identifier\") {\r\n        this.raise(param.start, FlowErrors.PatternIsOptional);\r\n      }\r\n\r\n      if (this.isThisParam(param)) {\r\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\r\n      }\r\n\r\n      param.optional = true;\r\n    }\r\n\r\n    if (this.match(14)) {\r\n      param.typeAnnotation = this.flowParseTypeAnnotation();\r\n    } else if (this.isThisParam(param)) {\r\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\r\n    }\r\n\r\n    if (this.match(27) && this.isThisParam(param)) {\r\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\r\n    }\r\n\r\n    this.resetEndLocation(param);\r\n    return param;\r\n  }\r\n\r\n  parseMaybeDefault(startPos, startLoc, left) {\r\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\r\n\r\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\r\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  shouldParseDefaultImport(node) {\r\n    if (!hasTypeImportKind(node)) {\r\n      return super.shouldParseDefaultImport(node);\r\n    }\r\n\r\n    return isMaybeDefaultImport(this.state.type);\r\n  }\r\n\r\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\r\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\r\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\r\n    node.specifiers.push(this.finishNode(specifier, type));\r\n  }\r\n\r\n  maybeParseDefaultImportSpecifier(node) {\r\n    node.importKind = \"value\";\r\n    let kind = null;\r\n\r\n    if (this.match(81)) {\r\n      kind = \"typeof\";\r\n    } else if (this.isContextual(120)) {\r\n      kind = \"type\";\r\n    }\r\n\r\n    if (kind) {\r\n      const lh = this.lookahead();\r\n      const {\r\n        type\r\n      } = lh;\r\n\r\n      if (kind === \"type\" && type === 49) {\r\n        this.unexpected(lh.start);\r\n      }\r\n\r\n      if (isMaybeDefaultImport(type) || type === 5 || type === 49) {\r\n        this.next();\r\n        node.importKind = kind;\r\n      }\r\n    }\r\n\r\n    return super.maybeParseDefaultImportSpecifier(node);\r\n  }\r\n\r\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\r\n    const firstIdent = specifier.imported;\r\n    let specifierTypeKind = null;\r\n\r\n    if (firstIdent.type === \"Identifier\") {\r\n      if (firstIdent.name === \"type\") {\r\n        specifierTypeKind = \"type\";\r\n      } else if (firstIdent.name === \"typeof\") {\r\n        specifierTypeKind = \"typeof\";\r\n      }\r\n    }\r\n\r\n    let isBinding = false;\r\n\r\n    if (this.isContextual(87) && !this.isLookaheadContextual(\"as\")) {\r\n      const as_ident = this.parseIdentifier(true);\r\n\r\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\r\n        specifier.imported = as_ident;\r\n        specifier.importKind = specifierTypeKind;\r\n        specifier.local = cloneIdentifier(as_ident);\r\n      } else {\r\n        specifier.imported = firstIdent;\r\n        specifier.importKind = null;\r\n        specifier.local = this.parseIdentifier();\r\n      }\r\n    } else {\r\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\r\n        specifier.imported = this.parseIdentifier(true);\r\n        specifier.importKind = specifierTypeKind;\r\n      } else {\r\n        if (importedIsString) {\r\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\r\n        }\r\n\r\n        specifier.imported = firstIdent;\r\n        specifier.importKind = null;\r\n      }\r\n\r\n      if (this.eatContextual(87)) {\r\n        specifier.local = this.parseIdentifier();\r\n      } else {\r\n        isBinding = true;\r\n        specifier.local = cloneIdentifier(specifier.imported);\r\n      }\r\n    }\r\n\r\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\r\n\r\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\r\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\r\n    }\r\n\r\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\r\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\r\n    }\r\n\r\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\r\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\r\n    }\r\n\r\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\r\n    return this.finishNode(specifier, \"ImportSpecifier\");\r\n  }\r\n\r\n  parseBindingAtom() {\r\n    switch (this.state.type) {\r\n      case 72:\r\n        return this.parseIdentifier(true);\r\n\r\n      default:\r\n        return super.parseBindingAtom();\r\n    }\r\n  }\r\n\r\n  parseFunctionParams(node, allowModifiers) {\r\n    const kind = node.kind;\r\n\r\n    if (kind !== \"get\" && kind !== \"set\" && this.match(43)) {\r\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\r\n    }\r\n\r\n    super.parseFunctionParams(node, allowModifiers);\r\n  }\r\n\r\n  parseVarId(decl, kind) {\r\n    super.parseVarId(decl, kind);\r\n\r\n    if (this.match(14)) {\r\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\r\n      this.resetEndLocation(decl.id);\r\n    }\r\n  }\r\n\r\n  parseAsyncArrowFromCallExpression(node, call) {\r\n    if (this.match(14)) {\r\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\r\n      this.state.noAnonFunctionType = true;\r\n      node.returnType = this.flowParseTypeAnnotation();\r\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\r\n    }\r\n\r\n    return super.parseAsyncArrowFromCallExpression(node, call);\r\n  }\r\n\r\n  shouldParseAsyncArrow() {\r\n    return this.match(14) || super.shouldParseAsyncArrow();\r\n  }\r\n\r\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\r\n    var _jsx;\r\n\r\n    let state = null;\r\n    let jsx;\r\n\r\n    if (this.hasPlugin(\"jsx\") && (this.match(132) || this.match(43))) {\r\n      state = this.state.clone();\r\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\r\n      if (!jsx.error) return jsx.node;\r\n      const {\r\n        context\r\n      } = this.state;\r\n      const curContext = context[context.length - 1];\r\n\r\n      if (curContext === types.j_oTag) {\r\n        context.length -= 2;\r\n      } else if (curContext === types.j_expr) {\r\n        context.length -= 1;\r\n      }\r\n    }\r\n\r\n    if ((_jsx = jsx) != null && _jsx.error || this.match(43)) {\r\n      var _jsx2, _jsx3;\r\n\r\n      state = state || this.state.clone();\r\n      let typeParameters;\r\n      const arrow = this.tryParse(abort => {\r\n        var _arrowExpression$extr;\r\n\r\n        typeParameters = this.flowParseTypeParameterDeclaration();\r\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\r\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\r\n          this.resetStartLocationFromNode(result, typeParameters);\r\n          return result;\r\n        });\r\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\r\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\r\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\r\n        expr.typeParameters = typeParameters;\r\n        this.resetStartLocationFromNode(expr, typeParameters);\r\n        return arrowExpression;\r\n      }, state);\r\n      let arrowExpression = null;\r\n\r\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\r\n        if (!arrow.error && !arrow.aborted) {\r\n          if (arrow.node.async) {\r\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\r\n          }\r\n\r\n          return arrow.node;\r\n        }\r\n\r\n        arrowExpression = arrow.node;\r\n      }\r\n\r\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\r\n        this.state = jsx.failState;\r\n        return jsx.node;\r\n      }\r\n\r\n      if (arrowExpression) {\r\n        this.state = arrow.failState;\r\n        return arrowExpression;\r\n      }\r\n\r\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\r\n      if (arrow.thrown) throw arrow.error;\r\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\r\n    }\r\n\r\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\r\n  }\r\n\r\n  parseArrow(node) {\r\n    if (this.match(14)) {\r\n      const result = this.tryParse(() => {\r\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\r\n        this.state.noAnonFunctionType = true;\r\n        const typeNode = this.startNode();\r\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\r\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\r\n        if (this.canInsertSemicolon()) this.unexpected();\r\n        if (!this.match(19)) this.unexpected();\r\n        return typeNode;\r\n      });\r\n      if (result.thrown) return null;\r\n      if (result.error) this.state = result.failState;\r\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\r\n    }\r\n\r\n    return super.parseArrow(node);\r\n  }\r\n\r\n  shouldParseArrow(params) {\r\n    return this.match(14) || super.shouldParseArrow(params);\r\n  }\r\n\r\n  setArrowFunctionParameters(node, params) {\r\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\r\n      node.params = params;\r\n    } else {\r\n      super.setArrowFunctionParameters(node, params);\r\n    }\r\n  }\r\n\r\n  checkParams(node, allowDuplicates, isArrowFunction) {\r\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < node.params.length; i++) {\r\n      if (this.isThisParam(node.params[i]) && i > 0) {\r\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\r\n      }\r\n    }\r\n\r\n    return super.checkParams(...arguments);\r\n  }\r\n\r\n  parseParenAndDistinguishExpression(canBeArrow) {\r\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\r\n  }\r\n\r\n  parseSubscripts(base, startPos, startLoc, noCalls) {\r\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\r\n      this.next();\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.callee = base;\r\n      node.arguments = this.parseCallExpressionArguments(11, false);\r\n      base = this.finishNode(node, \"CallExpression\");\r\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(43)) {\r\n      const state = this.state.clone();\r\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\r\n      if (!arrow.error && !arrow.aborted) return arrow.node;\r\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\r\n      if (result.node && !result.error) return result.node;\r\n\r\n      if (arrow.node) {\r\n        this.state = arrow.failState;\r\n        return arrow.node;\r\n      }\r\n\r\n      if (result.node) {\r\n        this.state = result.failState;\r\n        return result.node;\r\n      }\r\n\r\n      throw arrow.error || result.error;\r\n    }\r\n\r\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\r\n  }\r\n\r\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\r\n    if (this.match(18) && this.isLookaheadToken_lt()) {\r\n      subscriptState.optionalChainMember = true;\r\n\r\n      if (noCalls) {\r\n        subscriptState.stop = true;\r\n        return base;\r\n      }\r\n\r\n      this.next();\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.callee = base;\r\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\r\n      this.expect(10);\r\n      node.arguments = this.parseCallExpressionArguments(11, false);\r\n      node.optional = true;\r\n      return this.finishCallExpression(node, true);\r\n    } else if (!noCalls && this.shouldParseTypes() && this.match(43)) {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.callee = base;\r\n      const result = this.tryParse(() => {\r\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\r\n        this.expect(10);\r\n        node.arguments = this.parseCallExpressionArguments(11, false);\r\n        if (subscriptState.optionalChainMember) node.optional = false;\r\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\r\n      });\r\n\r\n      if (result.node) {\r\n        if (result.error) this.state = result.failState;\r\n        return result.node;\r\n      }\r\n    }\r\n\r\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\r\n  }\r\n\r\n  parseNewArguments(node) {\r\n    let targs = null;\r\n\r\n    if (this.shouldParseTypes() && this.match(43)) {\r\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\r\n    }\r\n\r\n    node.typeArguments = targs;\r\n    super.parseNewArguments(node);\r\n  }\r\n\r\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    this.parseFunctionParams(node);\r\n    if (!this.parseArrow(node)) return;\r\n    return this.parseArrowExpression(node, undefined, true);\r\n  }\r\n\r\n  readToken_mult_modulo(code) {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\r\n      this.state.hasFlowComment = false;\r\n      this.state.pos += 2;\r\n      this.nextToken();\r\n      return;\r\n    }\r\n\r\n    super.readToken_mult_modulo(code);\r\n  }\r\n\r\n  readToken_pipe_amp(code) {\r\n    const next = this.input.charCodeAt(this.state.pos + 1);\r\n\r\n    if (code === 124 && next === 125) {\r\n      this.finishOp(9, 2);\r\n      return;\r\n    }\r\n\r\n    super.readToken_pipe_amp(code);\r\n  }\r\n\r\n  parseTopLevel(file, program) {\r\n    const fileNode = super.parseTopLevel(file, program);\r\n\r\n    if (this.state.hasFlowComment) {\r\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\r\n    }\r\n\r\n    return fileNode;\r\n  }\r\n\r\n  skipBlockComment() {\r\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\r\n      if (this.state.hasFlowComment) {\r\n        this.unexpected(null, FlowErrors.NestedFlowComment);\r\n      }\r\n\r\n      this.hasFlowCommentCompletion();\r\n      this.state.pos += this.skipFlowComment();\r\n      this.state.hasFlowComment = true;\r\n      return;\r\n    }\r\n\r\n    if (this.state.hasFlowComment) {\r\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\r\n\r\n      if (end === -1) {\r\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\r\n      }\r\n\r\n      this.state.pos = end + 3;\r\n      return;\r\n    }\r\n\r\n    return super.skipBlockComment();\r\n  }\r\n\r\n  skipFlowComment() {\r\n    const {\r\n      pos\r\n    } = this.state;\r\n    let shiftToFirstNonWhiteSpace = 2;\r\n\r\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\r\n      shiftToFirstNonWhiteSpace++;\r\n    }\r\n\r\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\r\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\r\n\r\n    if (ch2 === 58 && ch3 === 58) {\r\n      return shiftToFirstNonWhiteSpace + 2;\r\n    }\r\n\r\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\r\n      return shiftToFirstNonWhiteSpace + 12;\r\n    }\r\n\r\n    if (ch2 === 58 && ch3 !== 58) {\r\n      return shiftToFirstNonWhiteSpace;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  hasFlowCommentCompletion() {\r\n    const end = this.input.indexOf(\"*/\", this.state.pos);\r\n\r\n    if (end === -1) {\r\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\r\n    }\r\n  }\r\n\r\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\r\n    enumName,\r\n    memberName\r\n  }) {\r\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\r\n  }\r\n\r\n  flowEnumErrorInvalidMemberName(pos, {\r\n    enumName,\r\n    memberName\r\n  }) {\r\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\r\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\r\n  }\r\n\r\n  flowEnumErrorDuplicateMemberName(pos, {\r\n    enumName,\r\n    memberName\r\n  }) {\r\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\r\n  }\r\n\r\n  flowEnumErrorInconsistentMemberValues(pos, {\r\n    enumName\r\n  }) {\r\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\r\n  }\r\n\r\n  flowEnumErrorInvalidExplicitType(pos, {\r\n    enumName,\r\n    suppliedType\r\n  }) {\r\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\r\n  }\r\n\r\n  flowEnumErrorInvalidMemberInitializer(pos, {\r\n    enumName,\r\n    explicitType,\r\n    memberName\r\n  }) {\r\n    let message = null;\r\n\r\n    switch (explicitType) {\r\n      case \"boolean\":\r\n      case \"number\":\r\n      case \"string\":\r\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\r\n        break;\r\n\r\n      case \"symbol\":\r\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\r\n        break;\r\n\r\n      default:\r\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\r\n    }\r\n\r\n    return this.raise(pos, message, enumName, memberName, explicitType);\r\n  }\r\n\r\n  flowEnumErrorNumberMemberNotInitialized(pos, {\r\n    enumName,\r\n    memberName\r\n  }) {\r\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\r\n  }\r\n\r\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\r\n    enumName\r\n  }) {\r\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\r\n  }\r\n\r\n  flowEnumMemberInit() {\r\n    const startPos = this.state.start;\r\n\r\n    const endOfInit = () => this.match(12) || this.match(8);\r\n\r\n    switch (this.state.type) {\r\n      case 124:\r\n        {\r\n          const literal = this.parseNumericLiteral(this.state.value);\r\n\r\n          if (endOfInit()) {\r\n            return {\r\n              type: \"number\",\r\n              pos: literal.start,\r\n              value: literal\r\n            };\r\n          }\r\n\r\n          return {\r\n            type: \"invalid\",\r\n            pos: startPos\r\n          };\r\n        }\r\n\r\n      case 123:\r\n        {\r\n          const literal = this.parseStringLiteral(this.state.value);\r\n\r\n          if (endOfInit()) {\r\n            return {\r\n              type: \"string\",\r\n              pos: literal.start,\r\n              value: literal\r\n            };\r\n          }\r\n\r\n          return {\r\n            type: \"invalid\",\r\n            pos: startPos\r\n          };\r\n        }\r\n\r\n      case 79:\r\n      case 80:\r\n        {\r\n          const literal = this.parseBooleanLiteral(this.match(79));\r\n\r\n          if (endOfInit()) {\r\n            return {\r\n              type: \"boolean\",\r\n              pos: literal.start,\r\n              value: literal\r\n            };\r\n          }\r\n\r\n          return {\r\n            type: \"invalid\",\r\n            pos: startPos\r\n          };\r\n        }\r\n\r\n      default:\r\n        return {\r\n          type: \"invalid\",\r\n          pos: startPos\r\n        };\r\n    }\r\n  }\r\n\r\n  flowEnumMemberRaw() {\r\n    const pos = this.state.start;\r\n    const id = this.parseIdentifier(true);\r\n    const init = this.eat(27) ? this.flowEnumMemberInit() : {\r\n      type: \"none\",\r\n      pos\r\n    };\r\n    return {\r\n      id,\r\n      init\r\n    };\r\n  }\r\n\r\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\r\n    const {\r\n      explicitType\r\n    } = context;\r\n\r\n    if (explicitType === null) {\r\n      return;\r\n    }\r\n\r\n    if (explicitType !== expectedType) {\r\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\r\n    }\r\n  }\r\n\r\n  flowEnumMembers({\r\n    enumName,\r\n    explicitType\r\n  }) {\r\n    const seenNames = new Set();\r\n    const members = {\r\n      booleanMembers: [],\r\n      numberMembers: [],\r\n      stringMembers: [],\r\n      defaultedMembers: []\r\n    };\r\n    let hasUnknownMembers = false;\r\n\r\n    while (!this.match(8)) {\r\n      if (this.eat(21)) {\r\n        hasUnknownMembers = true;\r\n        break;\r\n      }\r\n\r\n      const memberNode = this.startNode();\r\n      const {\r\n        id,\r\n        init\r\n      } = this.flowEnumMemberRaw();\r\n      const memberName = id.name;\r\n\r\n      if (memberName === \"\") {\r\n        continue;\r\n      }\r\n\r\n      if (/^[a-z]/.test(memberName)) {\r\n        this.flowEnumErrorInvalidMemberName(id.start, {\r\n          enumName,\r\n          memberName\r\n        });\r\n      }\r\n\r\n      if (seenNames.has(memberName)) {\r\n        this.flowEnumErrorDuplicateMemberName(id.start, {\r\n          enumName,\r\n          memberName\r\n        });\r\n      }\r\n\r\n      seenNames.add(memberName);\r\n      const context = {\r\n        enumName,\r\n        explicitType,\r\n        memberName\r\n      };\r\n      memberNode.id = id;\r\n\r\n      switch (init.type) {\r\n        case \"boolean\":\r\n          {\r\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\r\n            memberNode.init = init.value;\r\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\r\n            break;\r\n          }\r\n\r\n        case \"number\":\r\n          {\r\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\r\n            memberNode.init = init.value;\r\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\r\n            break;\r\n          }\r\n\r\n        case \"string\":\r\n          {\r\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\r\n            memberNode.init = init.value;\r\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\r\n            break;\r\n          }\r\n\r\n        case \"invalid\":\r\n          {\r\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\r\n          }\r\n\r\n        case \"none\":\r\n          {\r\n            switch (explicitType) {\r\n              case \"boolean\":\r\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\r\n                break;\r\n\r\n              case \"number\":\r\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\r\n                break;\r\n\r\n              default:\r\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\r\n            }\r\n          }\r\n      }\r\n\r\n      if (!this.match(8)) {\r\n        this.expect(12);\r\n      }\r\n    }\r\n\r\n    return {\r\n      members,\r\n      hasUnknownMembers\r\n    };\r\n  }\r\n\r\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\r\n    enumName\r\n  }) {\r\n    if (initializedMembers.length === 0) {\r\n      return defaultedMembers;\r\n    } else if (defaultedMembers.length === 0) {\r\n      return initializedMembers;\r\n    } else if (defaultedMembers.length > initializedMembers.length) {\r\n      for (const member of initializedMembers) {\r\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\r\n          enumName\r\n        });\r\n      }\r\n\r\n      return defaultedMembers;\r\n    } else {\r\n      for (const member of defaultedMembers) {\r\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\r\n          enumName\r\n        });\r\n      }\r\n\r\n      return initializedMembers;\r\n    }\r\n  }\r\n\r\n  flowEnumParseExplicitType({\r\n    enumName\r\n  }) {\r\n    if (this.eatContextual(95)) {\r\n      if (!tokenIsIdentifier(this.state.type)) {\r\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\r\n          enumName,\r\n          suppliedType: null\r\n        });\r\n      }\r\n\r\n      const {\r\n        value\r\n      } = this.state;\r\n      this.next();\r\n\r\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\r\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\r\n          enumName,\r\n          suppliedType: value\r\n        });\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  flowEnumBody(node, {\r\n    enumName,\r\n    nameLoc\r\n  }) {\r\n    const explicitType = this.flowEnumParseExplicitType({\r\n      enumName\r\n    });\r\n    this.expect(5);\r\n    const {\r\n      members,\r\n      hasUnknownMembers\r\n    } = this.flowEnumMembers({\r\n      enumName,\r\n      explicitType\r\n    });\r\n    node.hasUnknownMembers = hasUnknownMembers;\r\n\r\n    switch (explicitType) {\r\n      case \"boolean\":\r\n        node.explicitType = true;\r\n        node.members = members.booleanMembers;\r\n        this.expect(8);\r\n        return this.finishNode(node, \"EnumBooleanBody\");\r\n\r\n      case \"number\":\r\n        node.explicitType = true;\r\n        node.members = members.numberMembers;\r\n        this.expect(8);\r\n        return this.finishNode(node, \"EnumNumberBody\");\r\n\r\n      case \"string\":\r\n        node.explicitType = true;\r\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\r\n          enumName\r\n        });\r\n        this.expect(8);\r\n        return this.finishNode(node, \"EnumStringBody\");\r\n\r\n      case \"symbol\":\r\n        node.members = members.defaultedMembers;\r\n        this.expect(8);\r\n        return this.finishNode(node, \"EnumSymbolBody\");\r\n\r\n      default:\r\n        {\r\n          const empty = () => {\r\n            node.members = [];\r\n            this.expect(8);\r\n            return this.finishNode(node, \"EnumStringBody\");\r\n          };\r\n\r\n          node.explicitType = false;\r\n          const boolsLen = members.booleanMembers.length;\r\n          const numsLen = members.numberMembers.length;\r\n          const strsLen = members.stringMembers.length;\r\n          const defaultedLen = members.defaultedMembers.length;\r\n\r\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\r\n            return empty();\r\n          } else if (!boolsLen && !numsLen) {\r\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\r\n              enumName\r\n            });\r\n            this.expect(8);\r\n            return this.finishNode(node, \"EnumStringBody\");\r\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\r\n            for (const member of members.defaultedMembers) {\r\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\r\n                enumName,\r\n                memberName: member.id.name\r\n              });\r\n            }\r\n\r\n            node.members = members.booleanMembers;\r\n            this.expect(8);\r\n            return this.finishNode(node, \"EnumBooleanBody\");\r\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\r\n            for (const member of members.defaultedMembers) {\r\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\r\n                enumName,\r\n                memberName: member.id.name\r\n              });\r\n            }\r\n\r\n            node.members = members.numberMembers;\r\n            this.expect(8);\r\n            return this.finishNode(node, \"EnumNumberBody\");\r\n          } else {\r\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\r\n              enumName\r\n            });\r\n            return empty();\r\n          }\r\n        }\r\n    }\r\n  }\r\n\r\n  flowParseEnumDeclaration(node) {\r\n    const id = this.parseIdentifier();\r\n    node.id = id;\r\n    node.body = this.flowEnumBody(this.startNode(), {\r\n      enumName: id.name,\r\n      nameLoc: id.start\r\n    });\r\n    return this.finishNode(node, \"EnumDeclaration\");\r\n  }\r\n\r\n  isLookaheadToken_lt() {\r\n    const next = this.nextTokenStart();\r\n\r\n    if (this.input.charCodeAt(next) === 60) {\r\n      const afterNext = this.input.charCodeAt(next + 1);\r\n      return afterNext !== 60 && afterNext !== 61;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  maybeUnwrapTypeCastExpression(node) {\r\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\r\n  }\r\n\r\n});\r\n\r\nconst entities = {\r\n  quot: \"\\u0022\",\r\n  amp: \"&\",\r\n  apos: \"\\u0027\",\r\n  lt: \"<\",\r\n  gt: \">\",\r\n  nbsp: \"\\u00A0\",\r\n  iexcl: \"\\u00A1\",\r\n  cent: \"\\u00A2\",\r\n  pound: \"\\u00A3\",\r\n  curren: \"\\u00A4\",\r\n  yen: \"\\u00A5\",\r\n  brvbar: \"\\u00A6\",\r\n  sect: \"\\u00A7\",\r\n  uml: \"\\u00A8\",\r\n  copy: \"\\u00A9\",\r\n  ordf: \"\\u00AA\",\r\n  laquo: \"\\u00AB\",\r\n  not: \"\\u00AC\",\r\n  shy: \"\\u00AD\",\r\n  reg: \"\\u00AE\",\r\n  macr: \"\\u00AF\",\r\n  deg: \"\\u00B0\",\r\n  plusmn: \"\\u00B1\",\r\n  sup2: \"\\u00B2\",\r\n  sup3: \"\\u00B3\",\r\n  acute: \"\\u00B4\",\r\n  micro: \"\\u00B5\",\r\n  para: \"\\u00B6\",\r\n  middot: \"\\u00B7\",\r\n  cedil: \"\\u00B8\",\r\n  sup1: \"\\u00B9\",\r\n  ordm: \"\\u00BA\",\r\n  raquo: \"\\u00BB\",\r\n  frac14: \"\\u00BC\",\r\n  frac12: \"\\u00BD\",\r\n  frac34: \"\\u00BE\",\r\n  iquest: \"\\u00BF\",\r\n  Agrave: \"\\u00C0\",\r\n  Aacute: \"\\u00C1\",\r\n  Acirc: \"\\u00C2\",\r\n  Atilde: \"\\u00C3\",\r\n  Auml: \"\\u00C4\",\r\n  Aring: \"\\u00C5\",\r\n  AElig: \"\\u00C6\",\r\n  Ccedil: \"\\u00C7\",\r\n  Egrave: \"\\u00C8\",\r\n  Eacute: \"\\u00C9\",\r\n  Ecirc: \"\\u00CA\",\r\n  Euml: \"\\u00CB\",\r\n  Igrave: \"\\u00CC\",\r\n  Iacute: \"\\u00CD\",\r\n  Icirc: \"\\u00CE\",\r\n  Iuml: \"\\u00CF\",\r\n  ETH: \"\\u00D0\",\r\n  Ntilde: \"\\u00D1\",\r\n  Ograve: \"\\u00D2\",\r\n  Oacute: \"\\u00D3\",\r\n  Ocirc: \"\\u00D4\",\r\n  Otilde: \"\\u00D5\",\r\n  Ouml: \"\\u00D6\",\r\n  times: \"\\u00D7\",\r\n  Oslash: \"\\u00D8\",\r\n  Ugrave: \"\\u00D9\",\r\n  Uacute: \"\\u00DA\",\r\n  Ucirc: \"\\u00DB\",\r\n  Uuml: \"\\u00DC\",\r\n  Yacute: \"\\u00DD\",\r\n  THORN: \"\\u00DE\",\r\n  szlig: \"\\u00DF\",\r\n  agrave: \"\\u00E0\",\r\n  aacute: \"\\u00E1\",\r\n  acirc: \"\\u00E2\",\r\n  atilde: \"\\u00E3\",\r\n  auml: \"\\u00E4\",\r\n  aring: \"\\u00E5\",\r\n  aelig: \"\\u00E6\",\r\n  ccedil: \"\\u00E7\",\r\n  egrave: \"\\u00E8\",\r\n  eacute: \"\\u00E9\",\r\n  ecirc: \"\\u00EA\",\r\n  euml: \"\\u00EB\",\r\n  igrave: \"\\u00EC\",\r\n  iacute: \"\\u00ED\",\r\n  icirc: \"\\u00EE\",\r\n  iuml: \"\\u00EF\",\r\n  eth: \"\\u00F0\",\r\n  ntilde: \"\\u00F1\",\r\n  ograve: \"\\u00F2\",\r\n  oacute: \"\\u00F3\",\r\n  ocirc: \"\\u00F4\",\r\n  otilde: \"\\u00F5\",\r\n  ouml: \"\\u00F6\",\r\n  divide: \"\\u00F7\",\r\n  oslash: \"\\u00F8\",\r\n  ugrave: \"\\u00F9\",\r\n  uacute: \"\\u00FA\",\r\n  ucirc: \"\\u00FB\",\r\n  uuml: \"\\u00FC\",\r\n  yacute: \"\\u00FD\",\r\n  thorn: \"\\u00FE\",\r\n  yuml: \"\\u00FF\",\r\n  OElig: \"\\u0152\",\r\n  oelig: \"\\u0153\",\r\n  Scaron: \"\\u0160\",\r\n  scaron: \"\\u0161\",\r\n  Yuml: \"\\u0178\",\r\n  fnof: \"\\u0192\",\r\n  circ: \"\\u02C6\",\r\n  tilde: \"\\u02DC\",\r\n  Alpha: \"\\u0391\",\r\n  Beta: \"\\u0392\",\r\n  Gamma: \"\\u0393\",\r\n  Delta: \"\\u0394\",\r\n  Epsilon: \"\\u0395\",\r\n  Zeta: \"\\u0396\",\r\n  Eta: \"\\u0397\",\r\n  Theta: \"\\u0398\",\r\n  Iota: \"\\u0399\",\r\n  Kappa: \"\\u039A\",\r\n  Lambda: \"\\u039B\",\r\n  Mu: \"\\u039C\",\r\n  Nu: \"\\u039D\",\r\n  Xi: \"\\u039E\",\r\n  Omicron: \"\\u039F\",\r\n  Pi: \"\\u03A0\",\r\n  Rho: \"\\u03A1\",\r\n  Sigma: \"\\u03A3\",\r\n  Tau: \"\\u03A4\",\r\n  Upsilon: \"\\u03A5\",\r\n  Phi: \"\\u03A6\",\r\n  Chi: \"\\u03A7\",\r\n  Psi: \"\\u03A8\",\r\n  Omega: \"\\u03A9\",\r\n  alpha: \"\\u03B1\",\r\n  beta: \"\\u03B2\",\r\n  gamma: \"\\u03B3\",\r\n  delta: \"\\u03B4\",\r\n  epsilon: \"\\u03B5\",\r\n  zeta: \"\\u03B6\",\r\n  eta: \"\\u03B7\",\r\n  theta: \"\\u03B8\",\r\n  iota: \"\\u03B9\",\r\n  kappa: \"\\u03BA\",\r\n  lambda: \"\\u03BB\",\r\n  mu: \"\\u03BC\",\r\n  nu: \"\\u03BD\",\r\n  xi: \"\\u03BE\",\r\n  omicron: \"\\u03BF\",\r\n  pi: \"\\u03C0\",\r\n  rho: \"\\u03C1\",\r\n  sigmaf: \"\\u03C2\",\r\n  sigma: \"\\u03C3\",\r\n  tau: \"\\u03C4\",\r\n  upsilon: \"\\u03C5\",\r\n  phi: \"\\u03C6\",\r\n  chi: \"\\u03C7\",\r\n  psi: \"\\u03C8\",\r\n  omega: \"\\u03C9\",\r\n  thetasym: \"\\u03D1\",\r\n  upsih: \"\\u03D2\",\r\n  piv: \"\\u03D6\",\r\n  ensp: \"\\u2002\",\r\n  emsp: \"\\u2003\",\r\n  thinsp: \"\\u2009\",\r\n  zwnj: \"\\u200C\",\r\n  zwj: \"\\u200D\",\r\n  lrm: \"\\u200E\",\r\n  rlm: \"\\u200F\",\r\n  ndash: \"\\u2013\",\r\n  mdash: \"\\u2014\",\r\n  lsquo: \"\\u2018\",\r\n  rsquo: \"\\u2019\",\r\n  sbquo: \"\\u201A\",\r\n  ldquo: \"\\u201C\",\r\n  rdquo: \"\\u201D\",\r\n  bdquo: \"\\u201E\",\r\n  dagger: \"\\u2020\",\r\n  Dagger: \"\\u2021\",\r\n  bull: \"\\u2022\",\r\n  hellip: \"\\u2026\",\r\n  permil: \"\\u2030\",\r\n  prime: \"\\u2032\",\r\n  Prime: \"\\u2033\",\r\n  lsaquo: \"\\u2039\",\r\n  rsaquo: \"\\u203A\",\r\n  oline: \"\\u203E\",\r\n  frasl: \"\\u2044\",\r\n  euro: \"\\u20AC\",\r\n  image: \"\\u2111\",\r\n  weierp: \"\\u2118\",\r\n  real: \"\\u211C\",\r\n  trade: \"\\u2122\",\r\n  alefsym: \"\\u2135\",\r\n  larr: \"\\u2190\",\r\n  uarr: \"\\u2191\",\r\n  rarr: \"\\u2192\",\r\n  darr: \"\\u2193\",\r\n  harr: \"\\u2194\",\r\n  crarr: \"\\u21B5\",\r\n  lArr: \"\\u21D0\",\r\n  uArr: \"\\u21D1\",\r\n  rArr: \"\\u21D2\",\r\n  dArr: \"\\u21D3\",\r\n  hArr: \"\\u21D4\",\r\n  forall: \"\\u2200\",\r\n  part: \"\\u2202\",\r\n  exist: \"\\u2203\",\r\n  empty: \"\\u2205\",\r\n  nabla: \"\\u2207\",\r\n  isin: \"\\u2208\",\r\n  notin: \"\\u2209\",\r\n  ni: \"\\u220B\",\r\n  prod: \"\\u220F\",\r\n  sum: \"\\u2211\",\r\n  minus: \"\\u2212\",\r\n  lowast: \"\\u2217\",\r\n  radic: \"\\u221A\",\r\n  prop: \"\\u221D\",\r\n  infin: \"\\u221E\",\r\n  ang: \"\\u2220\",\r\n  and: \"\\u2227\",\r\n  or: \"\\u2228\",\r\n  cap: \"\\u2229\",\r\n  cup: \"\\u222A\",\r\n  int: \"\\u222B\",\r\n  there4: \"\\u2234\",\r\n  sim: \"\\u223C\",\r\n  cong: \"\\u2245\",\r\n  asymp: \"\\u2248\",\r\n  ne: \"\\u2260\",\r\n  equiv: \"\\u2261\",\r\n  le: \"\\u2264\",\r\n  ge: \"\\u2265\",\r\n  sub: \"\\u2282\",\r\n  sup: \"\\u2283\",\r\n  nsub: \"\\u2284\",\r\n  sube: \"\\u2286\",\r\n  supe: \"\\u2287\",\r\n  oplus: \"\\u2295\",\r\n  otimes: \"\\u2297\",\r\n  perp: \"\\u22A5\",\r\n  sdot: \"\\u22C5\",\r\n  lceil: \"\\u2308\",\r\n  rceil: \"\\u2309\",\r\n  lfloor: \"\\u230A\",\r\n  rfloor: \"\\u230B\",\r\n  lang: \"\\u2329\",\r\n  rang: \"\\u232A\",\r\n  loz: \"\\u25CA\",\r\n  spades: \"\\u2660\",\r\n  clubs: \"\\u2663\",\r\n  hearts: \"\\u2665\",\r\n  diams: \"\\u2666\"\r\n};\r\n\r\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\r\nconst DECIMAL_NUMBER = /^\\d+$/;\r\nconst JsxErrors = makeErrorTemplates({\r\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\r\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\r\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\r\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\r\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\r\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\r\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\r\n}, ErrorCodes.SyntaxError, \"jsx\");\r\ntypes.j_oTag = new TokContext(\"<tag\");\r\ntypes.j_cTag = new TokContext(\"</tag\");\r\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\r\n\r\nfunction isFragment(object) {\r\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\r\n}\r\n\r\nfunction getQualifiedJSXName(object) {\r\n  if (object.type === \"JSXIdentifier\") {\r\n    return object.name;\r\n  }\r\n\r\n  if (object.type === \"JSXNamespacedName\") {\r\n    return object.namespace.name + \":\" + object.name.name;\r\n  }\r\n\r\n  if (object.type === \"JSXMemberExpression\") {\r\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\r\n  }\r\n\r\n  throw new Error(\"Node had unexpected type: \" + object.type);\r\n}\r\n\r\nvar jsx = (superClass => class extends superClass {\r\n  jsxReadToken() {\r\n    let out = \"\";\r\n    let chunkStart = this.state.pos;\r\n\r\n    for (;;) {\r\n      if (this.state.pos >= this.length) {\r\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\r\n      }\r\n\r\n      const ch = this.input.charCodeAt(this.state.pos);\r\n\r\n      switch (ch) {\r\n        case 60:\r\n        case 123:\r\n          if (this.state.pos === this.state.start) {\r\n            if (ch === 60 && this.state.canStartJSXElement) {\r\n              ++this.state.pos;\r\n              return this.finishToken(132);\r\n            }\r\n\r\n            return super.getTokenFromCode(ch);\r\n          }\r\n\r\n          out += this.input.slice(chunkStart, this.state.pos);\r\n          return this.finishToken(131, out);\r\n\r\n        case 38:\r\n          out += this.input.slice(chunkStart, this.state.pos);\r\n          out += this.jsxReadEntity();\r\n          chunkStart = this.state.pos;\r\n          break;\r\n\r\n        case 62:\r\n        case 125:\r\n\r\n        default:\r\n          if (isNewLine(ch)) {\r\n            out += this.input.slice(chunkStart, this.state.pos);\r\n            out += this.jsxReadNewLine(true);\r\n            chunkStart = this.state.pos;\r\n          } else {\r\n            ++this.state.pos;\r\n          }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  jsxReadNewLine(normalizeCRLF) {\r\n    const ch = this.input.charCodeAt(this.state.pos);\r\n    let out;\r\n    ++this.state.pos;\r\n\r\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\r\n      ++this.state.pos;\r\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\r\n    } else {\r\n      out = String.fromCharCode(ch);\r\n    }\r\n\r\n    ++this.state.curLine;\r\n    this.state.lineStart = this.state.pos;\r\n    return out;\r\n  }\r\n\r\n  jsxReadString(quote) {\r\n    let out = \"\";\r\n    let chunkStart = ++this.state.pos;\r\n\r\n    for (;;) {\r\n      if (this.state.pos >= this.length) {\r\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\r\n      }\r\n\r\n      const ch = this.input.charCodeAt(this.state.pos);\r\n      if (ch === quote) break;\r\n\r\n      if (ch === 38) {\r\n        out += this.input.slice(chunkStart, this.state.pos);\r\n        out += this.jsxReadEntity();\r\n        chunkStart = this.state.pos;\r\n      } else if (isNewLine(ch)) {\r\n        out += this.input.slice(chunkStart, this.state.pos);\r\n        out += this.jsxReadNewLine(false);\r\n        chunkStart = this.state.pos;\r\n      } else {\r\n        ++this.state.pos;\r\n      }\r\n    }\r\n\r\n    out += this.input.slice(chunkStart, this.state.pos++);\r\n    return this.finishToken(123, out);\r\n  }\r\n\r\n  jsxReadEntity() {\r\n    let str = \"\";\r\n    let count = 0;\r\n    let entity;\r\n    let ch = this.input[this.state.pos];\r\n    const startPos = ++this.state.pos;\r\n\r\n    while (this.state.pos < this.length && count++ < 10) {\r\n      ch = this.input[this.state.pos++];\r\n\r\n      if (ch === \";\") {\r\n        if (str[0] === \"#\") {\r\n          if (str[1] === \"x\") {\r\n            str = str.substr(2);\r\n\r\n            if (HEX_NUMBER.test(str)) {\r\n              entity = String.fromCodePoint(parseInt(str, 16));\r\n            }\r\n          } else {\r\n            str = str.substr(1);\r\n\r\n            if (DECIMAL_NUMBER.test(str)) {\r\n              entity = String.fromCodePoint(parseInt(str, 10));\r\n            }\r\n          }\r\n        } else {\r\n          entity = entities[str];\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      str += ch;\r\n    }\r\n\r\n    if (!entity) {\r\n      this.state.pos = startPos;\r\n      return \"&\";\r\n    }\r\n\r\n    return entity;\r\n  }\r\n\r\n  jsxReadWord() {\r\n    let ch;\r\n    const start = this.state.pos;\r\n\r\n    do {\r\n      ch = this.input.charCodeAt(++this.state.pos);\r\n    } while (isIdentifierChar(ch) || ch === 45);\r\n\r\n    return this.finishToken(130, this.input.slice(start, this.state.pos));\r\n  }\r\n\r\n  jsxParseIdentifier() {\r\n    const node = this.startNode();\r\n\r\n    if (this.match(130)) {\r\n      node.name = this.state.value;\r\n    } else if (tokenIsKeyword(this.state.type)) {\r\n      node.name = tokenLabelName(this.state.type);\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n\r\n    this.next();\r\n    return this.finishNode(node, \"JSXIdentifier\");\r\n  }\r\n\r\n  jsxParseNamespacedName() {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const name = this.jsxParseIdentifier();\r\n    if (!this.eat(14)) return name;\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    node.namespace = name;\r\n    node.name = this.jsxParseIdentifier();\r\n    return this.finishNode(node, \"JSXNamespacedName\");\r\n  }\r\n\r\n  jsxParseElementName() {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    let node = this.jsxParseNamespacedName();\r\n\r\n    if (node.type === \"JSXNamespacedName\") {\r\n      return node;\r\n    }\r\n\r\n    while (this.eat(16)) {\r\n      const newNode = this.startNodeAt(startPos, startLoc);\r\n      newNode.object = node;\r\n      newNode.property = this.jsxParseIdentifier();\r\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  jsxParseAttributeValue() {\r\n    let node;\r\n\r\n    switch (this.state.type) {\r\n      case 5:\r\n        node = this.startNode();\r\n        this.next();\r\n        node = this.jsxParseExpressionContainer(node);\r\n\r\n        if (node.expression.type === \"JSXEmptyExpression\") {\r\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\r\n        }\r\n\r\n        return node;\r\n\r\n      case 132:\r\n      case 123:\r\n        return this.parseExprAtom();\r\n\r\n      default:\r\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\r\n    }\r\n  }\r\n\r\n  jsxParseEmptyExpression() {\r\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\r\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\r\n  }\r\n\r\n  jsxParseSpreadChild(node) {\r\n    this.next();\r\n    node.expression = this.parseExpression();\r\n    this.expect(8);\r\n    return this.finishNode(node, \"JSXSpreadChild\");\r\n  }\r\n\r\n  jsxParseExpressionContainer(node) {\r\n    if (this.match(8)) {\r\n      node.expression = this.jsxParseEmptyExpression();\r\n    } else {\r\n      const expression = this.parseExpression();\r\n      node.expression = expression;\r\n    }\r\n\r\n    this.expect(8);\r\n    return this.finishNode(node, \"JSXExpressionContainer\");\r\n  }\r\n\r\n  jsxParseAttribute() {\r\n    const node = this.startNode();\r\n\r\n    if (this.eat(5)) {\r\n      this.expect(21);\r\n      node.argument = this.parseMaybeAssignAllowIn();\r\n      this.expect(8);\r\n      return this.finishNode(node, \"JSXSpreadAttribute\");\r\n    }\r\n\r\n    node.name = this.jsxParseNamespacedName();\r\n    node.value = this.eat(27) ? this.jsxParseAttributeValue() : null;\r\n    return this.finishNode(node, \"JSXAttribute\");\r\n  }\r\n\r\n  jsxParseOpeningElementAt(startPos, startLoc) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n\r\n    if (this.match(133)) {\r\n      this.expect(133);\r\n      return this.finishNode(node, \"JSXOpeningFragment\");\r\n    }\r\n\r\n    node.name = this.jsxParseElementName();\r\n    return this.jsxParseOpeningElementAfterName(node);\r\n  }\r\n\r\n  jsxParseOpeningElementAfterName(node) {\r\n    const attributes = [];\r\n\r\n    while (!this.match(50) && !this.match(133)) {\r\n      attributes.push(this.jsxParseAttribute());\r\n    }\r\n\r\n    node.attributes = attributes;\r\n    node.selfClosing = this.eat(50);\r\n    this.expect(133);\r\n    return this.finishNode(node, \"JSXOpeningElement\");\r\n  }\r\n\r\n  jsxParseClosingElementAt(startPos, startLoc) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n\r\n    if (this.match(133)) {\r\n      this.expect(133);\r\n      return this.finishNode(node, \"JSXClosingFragment\");\r\n    }\r\n\r\n    node.name = this.jsxParseElementName();\r\n    this.expect(133);\r\n    return this.finishNode(node, \"JSXClosingElement\");\r\n  }\r\n\r\n  jsxParseElementAt(startPos, startLoc) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    const children = [];\r\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\r\n    let closingElement = null;\r\n\r\n    if (!openingElement.selfClosing) {\r\n      contents: for (;;) {\r\n        switch (this.state.type) {\r\n          case 132:\r\n            startPos = this.state.start;\r\n            startLoc = this.state.startLoc;\r\n            this.next();\r\n\r\n            if (this.eat(50)) {\r\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\r\n              break contents;\r\n            }\r\n\r\n            children.push(this.jsxParseElementAt(startPos, startLoc));\r\n            break;\r\n\r\n          case 131:\r\n            children.push(this.parseExprAtom());\r\n            break;\r\n\r\n          case 5:\r\n            {\r\n              const node = this.startNode();\r\n              this.next();\r\n\r\n              if (this.match(21)) {\r\n                children.push(this.jsxParseSpreadChild(node));\r\n              } else {\r\n                children.push(this.jsxParseExpressionContainer(node));\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n          default:\r\n            throw this.unexpected();\r\n        }\r\n      }\r\n\r\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\r\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\r\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\r\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\r\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\r\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\r\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isFragment(openingElement)) {\r\n      node.openingFragment = openingElement;\r\n      node.closingFragment = closingElement;\r\n    } else {\r\n      node.openingElement = openingElement;\r\n      node.closingElement = closingElement;\r\n    }\r\n\r\n    node.children = children;\r\n\r\n    if (this.match(43)) {\r\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\r\n    }\r\n\r\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\r\n  }\r\n\r\n  jsxParseElement() {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    this.next();\r\n    return this.jsxParseElementAt(startPos, startLoc);\r\n  }\r\n\r\n  parseExprAtom(refExpressionErrors) {\r\n    if (this.match(131)) {\r\n      return this.parseLiteral(this.state.value, \"JSXText\");\r\n    } else if (this.match(132)) {\r\n      return this.jsxParseElement();\r\n    } else if (this.match(43) && this.input.charCodeAt(this.state.pos) !== 33) {\r\n      this.replaceToken(132);\r\n      return this.jsxParseElement();\r\n    } else {\r\n      return super.parseExprAtom(refExpressionErrors);\r\n    }\r\n  }\r\n\r\n  getTokenFromCode(code) {\r\n    const context = this.curContext();\r\n\r\n    if (context === types.j_expr) {\r\n      return this.jsxReadToken();\r\n    }\r\n\r\n    if (context === types.j_oTag || context === types.j_cTag) {\r\n      if (isIdentifierStart(code)) {\r\n        return this.jsxReadWord();\r\n      }\r\n\r\n      if (code === 62) {\r\n        ++this.state.pos;\r\n        return this.finishToken(133);\r\n      }\r\n\r\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\r\n        return this.jsxReadString(code);\r\n      }\r\n    }\r\n\r\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\r\n      ++this.state.pos;\r\n      return this.finishToken(132);\r\n    }\r\n\r\n    return super.getTokenFromCode(code);\r\n  }\r\n\r\n  updateContext(prevType) {\r\n    super.updateContext(prevType);\r\n    const {\r\n      context,\r\n      type\r\n    } = this.state;\r\n\r\n    if (type === 50 && prevType === 132) {\r\n      context.splice(-2, 2, types.j_cTag);\r\n      this.state.canStartJSXElement = false;\r\n    } else if (type === 132) {\r\n      context.push(types.j_expr, types.j_oTag);\r\n    } else if (type === 133) {\r\n      const out = context.pop();\r\n\r\n      if (out === types.j_oTag && prevType === 50 || out === types.j_cTag) {\r\n        context.pop();\r\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\r\n      } else {\r\n        this.state.canStartJSXElement = true;\r\n      }\r\n    } else {\r\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\r\n    }\r\n  }\r\n\r\n});\r\n\r\nclass TypeScriptScope extends Scope {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.types = new Set();\r\n    this.enums = new Set();\r\n    this.constEnums = new Set();\r\n    this.classes = new Set();\r\n    this.exportOnlyBindings = new Set();\r\n  }\r\n\r\n}\r\n\r\nclass TypeScriptScopeHandler extends ScopeHandler {\r\n  createScope(flags) {\r\n    return new TypeScriptScope(flags);\r\n  }\r\n\r\n  declareName(name, bindingType, pos) {\r\n    const scope = this.currentScope();\r\n\r\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\r\n      this.maybeExportDefined(scope, name);\r\n      scope.exportOnlyBindings.add(name);\r\n      return;\r\n    }\r\n\r\n    super.declareName(...arguments);\r\n\r\n    if (bindingType & BIND_KIND_TYPE) {\r\n      if (!(bindingType & BIND_KIND_VALUE)) {\r\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\r\n        this.maybeExportDefined(scope, name);\r\n      }\r\n\r\n      scope.types.add(name);\r\n    }\r\n\r\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\r\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\r\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\r\n  }\r\n\r\n  isRedeclaredInScope(scope, name, bindingType) {\r\n    if (scope.enums.has(name)) {\r\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\r\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\r\n        const wasConst = scope.constEnums.has(name);\r\n        return isConst !== wasConst;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\r\n      if (scope.lexical.has(name)) {\r\n        return !!(bindingType & BIND_KIND_VALUE);\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\r\n      return true;\r\n    }\r\n\r\n    return super.isRedeclaredInScope(...arguments);\r\n  }\r\n\r\n  checkLocalExport(id) {\r\n    const topLevelScope = this.scopeStack[0];\r\n    const {\r\n      name\r\n    } = id;\r\n\r\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\r\n      super.checkLocalExport(id);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction nonNull(x) {\r\n  if (x == null) {\r\n    throw new Error(`Unexpected ${x} value.`);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\nfunction assert(x) {\r\n  if (!x) {\r\n    throw new Error(\"Assert fail\");\r\n  }\r\n}\r\n\r\nconst TSErrors = makeErrorTemplates({\r\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\r\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\r\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\r\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\r\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\r\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\r\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\r\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\r\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\r\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\r\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\r\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\r\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\r\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\r\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\r\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\r\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\r\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\r\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\r\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\r\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\r\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\r\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\r\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\r\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\r\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\r\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\r\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\r\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\r\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\r\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\r\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\r\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\r\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\r\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\r\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\r\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\r\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\r\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\r\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\r\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\r\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\r\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\r\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\r\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\r\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\r\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\r\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\r\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\r\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\r\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\r\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\r\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\r\n}, ErrorCodes.SyntaxError, \"typescript\");\r\n\r\nfunction keywordTypeFromName(value) {\r\n  switch (value) {\r\n    case \"any\":\r\n      return \"TSAnyKeyword\";\r\n\r\n    case \"boolean\":\r\n      return \"TSBooleanKeyword\";\r\n\r\n    case \"bigint\":\r\n      return \"TSBigIntKeyword\";\r\n\r\n    case \"never\":\r\n      return \"TSNeverKeyword\";\r\n\r\n    case \"number\":\r\n      return \"TSNumberKeyword\";\r\n\r\n    case \"object\":\r\n      return \"TSObjectKeyword\";\r\n\r\n    case \"string\":\r\n      return \"TSStringKeyword\";\r\n\r\n    case \"symbol\":\r\n      return \"TSSymbolKeyword\";\r\n\r\n    case \"undefined\":\r\n      return \"TSUndefinedKeyword\";\r\n\r\n    case \"unknown\":\r\n      return \"TSUnknownKeyword\";\r\n\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\nfunction tsIsAccessModifier(modifier) {\r\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\r\n}\r\n\r\nvar typescript = (superClass => class extends superClass {\r\n  getScopeHandler() {\r\n    return TypeScriptScopeHandler;\r\n  }\r\n\r\n  tsIsIdentifier() {\r\n    return tokenIsIdentifier(this.state.type);\r\n  }\r\n\r\n  tsTokenCanFollowModifier() {\r\n    return (this.match(0) || this.match(5) || this.match(49) || this.match(21) || this.match(128) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\r\n  }\r\n\r\n  tsNextTokenCanFollowModifier() {\r\n    this.next();\r\n    return this.tsTokenCanFollowModifier();\r\n  }\r\n\r\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\r\n    if (!tokenIsIdentifier(this.state.type)) {\r\n      return undefined;\r\n    }\r\n\r\n    const modifier = this.state.value;\r\n\r\n    if (allowedModifiers.indexOf(modifier) !== -1) {\r\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\r\n        return undefined;\r\n      }\r\n\r\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\r\n        return modifier;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\r\n    const enforceOrder = (pos, modifier, before, after) => {\r\n      if (modifier === before && modified[after]) {\r\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\r\n      }\r\n    };\r\n\r\n    const incompatible = (pos, modifier, mod1, mod2) => {\r\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\r\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\r\n      }\r\n    };\r\n\r\n    for (;;) {\r\n      const startPos = this.state.start;\r\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\r\n      if (!modifier) break;\r\n\r\n      if (tsIsAccessModifier(modifier)) {\r\n        if (modified.accessibility) {\r\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\r\n        } else {\r\n          enforceOrder(startPos, modifier, modifier, \"override\");\r\n          enforceOrder(startPos, modifier, modifier, \"static\");\r\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\r\n          modified.accessibility = modifier;\r\n        }\r\n      } else {\r\n        if (Object.hasOwnProperty.call(modified, modifier)) {\r\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\r\n        } else {\r\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\r\n          enforceOrder(startPos, modifier, \"static\", \"override\");\r\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\r\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\r\n          incompatible(startPos, modifier, \"declare\", \"override\");\r\n          incompatible(startPos, modifier, \"static\", \"abstract\");\r\n        }\r\n\r\n        modified[modifier] = true;\r\n      }\r\n\r\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\r\n        this.raise(startPos, errorTemplate, modifier);\r\n      }\r\n    }\r\n  }\r\n\r\n  tsIsListTerminator(kind) {\r\n    switch (kind) {\r\n      case \"EnumMembers\":\r\n      case \"TypeMembers\":\r\n        return this.match(8);\r\n\r\n      case \"HeritageClauseElement\":\r\n        return this.match(5);\r\n\r\n      case \"TupleElementTypes\":\r\n        return this.match(3);\r\n\r\n      case \"TypeParametersOrArguments\":\r\n        return this.match(44);\r\n    }\r\n\r\n    throw new Error(\"Unreachable\");\r\n  }\r\n\r\n  tsParseList(kind, parseElement) {\r\n    const result = [];\r\n\r\n    while (!this.tsIsListTerminator(kind)) {\r\n      result.push(parseElement());\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\r\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\r\n  }\r\n\r\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\r\n    const result = [];\r\n    let trailingCommaPos = -1;\r\n\r\n    for (;;) {\r\n      if (this.tsIsListTerminator(kind)) {\r\n        break;\r\n      }\r\n\r\n      trailingCommaPos = -1;\r\n      const element = parseElement();\r\n\r\n      if (element == null) {\r\n        return undefined;\r\n      }\r\n\r\n      result.push(element);\r\n\r\n      if (this.eat(12)) {\r\n        trailingCommaPos = this.state.lastTokStart;\r\n        continue;\r\n      }\r\n\r\n      if (this.tsIsListTerminator(kind)) {\r\n        break;\r\n      }\r\n\r\n      if (expectSuccess) {\r\n        this.expect(12);\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    if (refTrailingCommaPos) {\r\n      refTrailingCommaPos.value = trailingCommaPos;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\r\n    if (!skipFirstToken) {\r\n      if (bracket) {\r\n        this.expect(0);\r\n      } else {\r\n        this.expect(43);\r\n      }\r\n    }\r\n\r\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\r\n\r\n    if (bracket) {\r\n      this.expect(3);\r\n    } else {\r\n      this.expect(44);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  tsParseImportType() {\r\n    const node = this.startNode();\r\n    this.expect(77);\r\n    this.expect(10);\r\n\r\n    if (!this.match(123)) {\r\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\r\n    }\r\n\r\n    node.argument = this.parseExprAtom();\r\n    this.expect(11);\r\n\r\n    if (this.eat(16)) {\r\n      node.qualifier = this.tsParseEntityName(true);\r\n    }\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.tsParseTypeArguments();\r\n    }\r\n\r\n    return this.finishNode(node, \"TSImportType\");\r\n  }\r\n\r\n  tsParseEntityName(allowReservedWords) {\r\n    let entity = this.parseIdentifier();\r\n\r\n    while (this.eat(16)) {\r\n      const node = this.startNodeAtNode(entity);\r\n      node.left = entity;\r\n      node.right = this.parseIdentifier(allowReservedWords);\r\n      entity = this.finishNode(node, \"TSQualifiedName\");\r\n    }\r\n\r\n    return entity;\r\n  }\r\n\r\n  tsParseTypeReference() {\r\n    const node = this.startNode();\r\n    node.typeName = this.tsParseEntityName(false);\r\n\r\n    if (!this.hasPrecedingLineBreak() && this.match(43)) {\r\n      node.typeParameters = this.tsParseTypeArguments();\r\n    }\r\n\r\n    return this.finishNode(node, \"TSTypeReference\");\r\n  }\r\n\r\n  tsParseThisTypePredicate(lhs) {\r\n    this.next();\r\n    const node = this.startNodeAtNode(lhs);\r\n    node.parameterName = lhs;\r\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\r\n    node.asserts = false;\r\n    return this.finishNode(node, \"TSTypePredicate\");\r\n  }\r\n\r\n  tsParseThisTypeNode() {\r\n    const node = this.startNode();\r\n    this.next();\r\n    return this.finishNode(node, \"TSThisType\");\r\n  }\r\n\r\n  tsParseTypeQuery() {\r\n    const node = this.startNode();\r\n    this.expect(81);\r\n\r\n    if (this.match(77)) {\r\n      node.exprName = this.tsParseImportType();\r\n    } else {\r\n      node.exprName = this.tsParseEntityName(true);\r\n    }\r\n\r\n    return this.finishNode(node, \"TSTypeQuery\");\r\n  }\r\n\r\n  tsParseTypeParameter() {\r\n    const node = this.startNode();\r\n    node.name = this.tsParseTypeParameterName();\r\n    node.constraint = this.tsEatThenParseType(75);\r\n    node.default = this.tsEatThenParseType(27);\r\n    return this.finishNode(node, \"TSTypeParameter\");\r\n  }\r\n\r\n  tsTryParseTypeParameters() {\r\n    if (this.match(43)) {\r\n      return this.tsParseTypeParameters();\r\n    }\r\n  }\r\n\r\n  tsParseTypeParameters() {\r\n    const node = this.startNode();\r\n\r\n    if (this.match(43) || this.match(132)) {\r\n      this.next();\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n\r\n    const refTrailingCommaPos = {\r\n      value: -1\r\n    };\r\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\r\n\r\n    if (node.params.length === 0) {\r\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\r\n    }\r\n\r\n    if (refTrailingCommaPos.value !== -1) {\r\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\r\n    }\r\n\r\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\r\n  }\r\n\r\n  tsTryNextParseConstantContext() {\r\n    if (this.lookahead().type === 69) {\r\n      this.next();\r\n      return this.tsParseTypeReference();\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  tsFillSignature(returnToken, signature) {\r\n    const returnTokenRequired = returnToken === 19;\r\n    signature.typeParameters = this.tsTryParseTypeParameters();\r\n    this.expect(10);\r\n    signature.parameters = this.tsParseBindingListForSignature();\r\n\r\n    if (returnTokenRequired) {\r\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\r\n    } else if (this.match(returnToken)) {\r\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\r\n    }\r\n  }\r\n\r\n  tsParseBindingListForSignature() {\r\n    return this.parseBindingList(11, 41).map(pattern => {\r\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\r\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\r\n      }\r\n\r\n      return pattern;\r\n    });\r\n  }\r\n\r\n  tsParseTypeMemberSemicolon() {\r\n    if (!this.eat(12) && !this.isLineTerminator()) {\r\n      this.expect(13);\r\n    }\r\n  }\r\n\r\n  tsParseSignatureMember(kind, node) {\r\n    this.tsFillSignature(14, node);\r\n    this.tsParseTypeMemberSemicolon();\r\n    return this.finishNode(node, kind);\r\n  }\r\n\r\n  tsIsUnambiguouslyIndexSignature() {\r\n    this.next();\r\n\r\n    if (tokenIsIdentifier(this.state.type)) {\r\n      this.next();\r\n      return this.match(14);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  tsTryParseIndexSignature(node) {\r\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\r\n      return undefined;\r\n    }\r\n\r\n    this.expect(0);\r\n    const id = this.parseIdentifier();\r\n    id.typeAnnotation = this.tsParseTypeAnnotation();\r\n    this.resetEndLocation(id);\r\n    this.expect(3);\r\n    node.parameters = [id];\r\n    const type = this.tsTryParseTypeAnnotation();\r\n    if (type) node.typeAnnotation = type;\r\n    this.tsParseTypeMemberSemicolon();\r\n    return this.finishNode(node, \"TSIndexSignature\");\r\n  }\r\n\r\n  tsParsePropertyOrMethodSignature(node, readonly) {\r\n    if (this.eat(17)) node.optional = true;\r\n    const nodeAny = node;\r\n\r\n    if (this.match(10) || this.match(43)) {\r\n      if (readonly) {\r\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\r\n      }\r\n\r\n      const method = nodeAny;\r\n\r\n      if (method.kind && this.match(43)) {\r\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\r\n      }\r\n\r\n      this.tsFillSignature(14, method);\r\n      this.tsParseTypeMemberSemicolon();\r\n\r\n      if (method.kind === \"get\") {\r\n        if (method.parameters.length > 0) {\r\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\r\n\r\n          if (this.isThisParam(method.parameters[0])) {\r\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\r\n          }\r\n        }\r\n      } else if (method.kind === \"set\") {\r\n        if (method.parameters.length !== 1) {\r\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\r\n        } else {\r\n          const firstParameter = method.parameters[0];\r\n\r\n          if (this.isThisParam(firstParameter)) {\r\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\r\n          }\r\n\r\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\r\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\r\n          }\r\n\r\n          if (firstParameter.type === \"RestElement\") {\r\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\r\n          }\r\n        }\r\n\r\n        if (method.typeAnnotation) {\r\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\r\n        }\r\n      } else {\r\n        method.kind = \"method\";\r\n      }\r\n\r\n      return this.finishNode(method, \"TSMethodSignature\");\r\n    } else {\r\n      const property = nodeAny;\r\n      if (readonly) property.readonly = true;\r\n      const type = this.tsTryParseTypeAnnotation();\r\n      if (type) property.typeAnnotation = type;\r\n      this.tsParseTypeMemberSemicolon();\r\n      return this.finishNode(property, \"TSPropertySignature\");\r\n    }\r\n  }\r\n\r\n  tsParseTypeMember() {\r\n    const node = this.startNode();\r\n\r\n    if (this.match(10) || this.match(43)) {\r\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\r\n    }\r\n\r\n    if (this.match(71)) {\r\n      const id = this.startNode();\r\n      this.next();\r\n\r\n      if (this.match(10) || this.match(43)) {\r\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\r\n      } else {\r\n        node.key = this.createIdentifier(id, \"new\");\r\n        return this.tsParsePropertyOrMethodSignature(node, false);\r\n      }\r\n    }\r\n\r\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\r\n    const idx = this.tsTryParseIndexSignature(node);\r\n\r\n    if (idx) {\r\n      return idx;\r\n    }\r\n\r\n    this.parsePropertyName(node);\r\n\r\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\r\n      node.kind = node.key.name;\r\n      this.parsePropertyName(node);\r\n    }\r\n\r\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\r\n  }\r\n\r\n  tsParseTypeLiteral() {\r\n    const node = this.startNode();\r\n    node.members = this.tsParseObjectTypeMembers();\r\n    return this.finishNode(node, \"TSTypeLiteral\");\r\n  }\r\n\r\n  tsParseObjectTypeMembers() {\r\n    this.expect(5);\r\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\r\n    this.expect(8);\r\n    return members;\r\n  }\r\n\r\n  tsIsStartOfMappedType() {\r\n    this.next();\r\n\r\n    if (this.eat(47)) {\r\n      return this.isContextual(112);\r\n    }\r\n\r\n    if (this.isContextual(112)) {\r\n      this.next();\r\n    }\r\n\r\n    if (!this.match(0)) {\r\n      return false;\r\n    }\r\n\r\n    this.next();\r\n\r\n    if (!this.tsIsIdentifier()) {\r\n      return false;\r\n    }\r\n\r\n    this.next();\r\n    return this.match(52);\r\n  }\r\n\r\n  tsParseMappedTypeParameter() {\r\n    const node = this.startNode();\r\n    node.name = this.tsParseTypeParameterName();\r\n    node.constraint = this.tsExpectThenParseType(52);\r\n    return this.finishNode(node, \"TSTypeParameter\");\r\n  }\r\n\r\n  tsParseMappedType() {\r\n    const node = this.startNode();\r\n    this.expect(5);\r\n\r\n    if (this.match(47)) {\r\n      node.readonly = this.state.value;\r\n      this.next();\r\n      this.expectContextual(112);\r\n    } else if (this.eatContextual(112)) {\r\n      node.readonly = true;\r\n    }\r\n\r\n    this.expect(0);\r\n    node.typeParameter = this.tsParseMappedTypeParameter();\r\n    node.nameType = this.eatContextual(87) ? this.tsParseType() : null;\r\n    this.expect(3);\r\n\r\n    if (this.match(47)) {\r\n      node.optional = this.state.value;\r\n      this.next();\r\n      this.expect(17);\r\n    } else if (this.eat(17)) {\r\n      node.optional = true;\r\n    }\r\n\r\n    node.typeAnnotation = this.tsTryParseType();\r\n    this.semicolon();\r\n    this.expect(8);\r\n    return this.finishNode(node, \"TSMappedType\");\r\n  }\r\n\r\n  tsParseTupleType() {\r\n    const node = this.startNode();\r\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\r\n    let seenOptionalElement = false;\r\n    let labeledElements = null;\r\n    node.elementTypes.forEach(elementNode => {\r\n      var _labeledElements;\r\n\r\n      let {\r\n        type\r\n      } = elementNode;\r\n\r\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\r\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\r\n      }\r\n\r\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\r\n\r\n      if (type === \"TSRestType\") {\r\n        elementNode = elementNode.typeAnnotation;\r\n        type = elementNode.type;\r\n      }\r\n\r\n      const isLabeled = type === \"TSNamedTupleMember\";\r\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\r\n\r\n      if (labeledElements !== isLabeled) {\r\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\r\n      }\r\n    });\r\n    return this.finishNode(node, \"TSTupleType\");\r\n  }\r\n\r\n  tsParseTupleElementType() {\r\n    const {\r\n      start: startPos,\r\n      startLoc\r\n    } = this.state;\r\n    const rest = this.eat(21);\r\n    let type = this.tsParseType();\r\n    const optional = this.eat(17);\r\n    const labeled = this.eat(14);\r\n\r\n    if (labeled) {\r\n      const labeledNode = this.startNodeAtNode(type);\r\n      labeledNode.optional = optional;\r\n\r\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\r\n        labeledNode.label = type.typeName;\r\n      } else {\r\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\r\n        labeledNode.label = type;\r\n      }\r\n\r\n      labeledNode.elementType = this.tsParseType();\r\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\r\n    } else if (optional) {\r\n      const optionalTypeNode = this.startNodeAtNode(type);\r\n      optionalTypeNode.typeAnnotation = type;\r\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\r\n    }\r\n\r\n    if (rest) {\r\n      const restNode = this.startNodeAt(startPos, startLoc);\r\n      restNode.typeAnnotation = type;\r\n      type = this.finishNode(restNode, \"TSRestType\");\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  tsParseParenthesizedType() {\r\n    const node = this.startNode();\r\n    this.expect(10);\r\n    node.typeAnnotation = this.tsParseType();\r\n    this.expect(11);\r\n    return this.finishNode(node, \"TSParenthesizedType\");\r\n  }\r\n\r\n  tsParseFunctionOrConstructorType(type, abstract) {\r\n    const node = this.startNode();\r\n\r\n    if (type === \"TSConstructorType\") {\r\n      node.abstract = !!abstract;\r\n      if (abstract) this.next();\r\n      this.next();\r\n    }\r\n\r\n    this.tsFillSignature(19, node);\r\n    return this.finishNode(node, type);\r\n  }\r\n\r\n  tsParseLiteralTypeNode() {\r\n    const node = this.startNode();\r\n\r\n    node.literal = (() => {\r\n      switch (this.state.type) {\r\n        case 124:\r\n        case 125:\r\n        case 123:\r\n        case 79:\r\n        case 80:\r\n          return this.parseExprAtom();\r\n\r\n        default:\r\n          throw this.unexpected();\r\n      }\r\n    })();\r\n\r\n    return this.finishNode(node, \"TSLiteralType\");\r\n  }\r\n\r\n  tsParseTemplateLiteralType() {\r\n    const node = this.startNode();\r\n    node.literal = this.parseTemplate(false);\r\n    return this.finishNode(node, \"TSLiteralType\");\r\n  }\r\n\r\n  parseTemplateSubstitution() {\r\n    if (this.state.inType) return this.tsParseType();\r\n    return super.parseTemplateSubstitution();\r\n  }\r\n\r\n  tsParseThisTypeOrThisTypePredicate() {\r\n    const thisKeyword = this.tsParseThisTypeNode();\r\n\r\n    if (this.isContextual(107) && !this.hasPrecedingLineBreak()) {\r\n      return this.tsParseThisTypePredicate(thisKeyword);\r\n    } else {\r\n      return thisKeyword;\r\n    }\r\n  }\r\n\r\n  tsParseNonArrayType() {\r\n    switch (this.state.type) {\r\n      case 123:\r\n      case 124:\r\n      case 125:\r\n      case 79:\r\n      case 80:\r\n        return this.tsParseLiteralTypeNode();\r\n\r\n      case 47:\r\n        if (this.state.value === \"-\") {\r\n          const node = this.startNode();\r\n          const nextToken = this.lookahead();\r\n\r\n          if (nextToken.type !== 124 && nextToken.type !== 125) {\r\n            throw this.unexpected();\r\n          }\r\n\r\n          node.literal = this.parseMaybeUnary();\r\n          return this.finishNode(node, \"TSLiteralType\");\r\n        }\r\n\r\n        break;\r\n\r\n      case 72:\r\n        return this.tsParseThisTypeOrThisTypePredicate();\r\n\r\n      case 81:\r\n        return this.tsParseTypeQuery();\r\n\r\n      case 77:\r\n        return this.tsParseImportType();\r\n\r\n      case 5:\r\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\r\n\r\n      case 0:\r\n        return this.tsParseTupleType();\r\n\r\n      case 10:\r\n        return this.tsParseParenthesizedType();\r\n\r\n      case 22:\r\n        return this.tsParseTemplateLiteralType();\r\n\r\n      default:\r\n        {\r\n          const {\r\n            type\r\n          } = this.state;\r\n\r\n          if (tokenIsIdentifier(type) || type === 82 || type === 78) {\r\n            const nodeType = type === 82 ? \"TSVoidKeyword\" : type === 78 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\r\n\r\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\r\n              const node = this.startNode();\r\n              this.next();\r\n              return this.finishNode(node, nodeType);\r\n            }\r\n\r\n            return this.tsParseTypeReference();\r\n          }\r\n        }\r\n    }\r\n\r\n    throw this.unexpected();\r\n  }\r\n\r\n  tsParseArrayTypeOrHigher() {\r\n    let type = this.tsParseNonArrayType();\r\n\r\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\r\n      if (this.match(3)) {\r\n        const node = this.startNodeAtNode(type);\r\n        node.elementType = type;\r\n        this.expect(3);\r\n        type = this.finishNode(node, \"TSArrayType\");\r\n      } else {\r\n        const node = this.startNodeAtNode(type);\r\n        node.objectType = type;\r\n        node.indexType = this.tsParseType();\r\n        this.expect(3);\r\n        type = this.finishNode(node, \"TSIndexedAccessType\");\r\n      }\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  tsParseTypeOperator() {\r\n    const node = this.startNode();\r\n    const operator = this.state.value;\r\n    this.next();\r\n    node.operator = operator;\r\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\r\n\r\n    if (operator === \"readonly\") {\r\n      this.tsCheckTypeAnnotationForReadOnly(node);\r\n    }\r\n\r\n    return this.finishNode(node, \"TSTypeOperator\");\r\n  }\r\n\r\n  tsCheckTypeAnnotationForReadOnly(node) {\r\n    switch (node.typeAnnotation.type) {\r\n      case \"TSTupleType\":\r\n      case \"TSArrayType\":\r\n        return;\r\n\r\n      default:\r\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\r\n    }\r\n  }\r\n\r\n  tsParseInferType() {\r\n    const node = this.startNode();\r\n    this.expectContextual(106);\r\n    const typeParameter = this.startNode();\r\n    typeParameter.name = this.tsParseTypeParameterName();\r\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\r\n    return this.finishNode(node, \"TSInferType\");\r\n  }\r\n\r\n  tsParseTypeOperatorOrHigher() {\r\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\r\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(106) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\r\n  }\r\n\r\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\r\n    const node = this.startNode();\r\n    const hasLeadingOperator = this.eat(operator);\r\n    const types = [];\r\n\r\n    do {\r\n      types.push(parseConstituentType());\r\n    } while (this.eat(operator));\r\n\r\n    if (types.length === 1 && !hasLeadingOperator) {\r\n      return types[0];\r\n    }\r\n\r\n    node.types = types;\r\n    return this.finishNode(node, kind);\r\n  }\r\n\r\n  tsParseIntersectionTypeOrHigher() {\r\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 41);\r\n  }\r\n\r\n  tsParseUnionTypeOrHigher() {\r\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 39);\r\n  }\r\n\r\n  tsIsStartOfFunctionType() {\r\n    if (this.match(43)) {\r\n      return true;\r\n    }\r\n\r\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\r\n  }\r\n\r\n  tsSkipParameterStart() {\r\n    if (tokenIsIdentifier(this.state.type) || this.match(72)) {\r\n      this.next();\r\n      return true;\r\n    }\r\n\r\n    if (this.match(5)) {\r\n      let braceStackCounter = 1;\r\n      this.next();\r\n\r\n      while (braceStackCounter > 0) {\r\n        if (this.match(5)) {\r\n          ++braceStackCounter;\r\n        } else if (this.match(8)) {\r\n          --braceStackCounter;\r\n        }\r\n\r\n        this.next();\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    if (this.match(0)) {\r\n      let braceStackCounter = 1;\r\n      this.next();\r\n\r\n      while (braceStackCounter > 0) {\r\n        if (this.match(0)) {\r\n          ++braceStackCounter;\r\n        } else if (this.match(3)) {\r\n          --braceStackCounter;\r\n        }\r\n\r\n        this.next();\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  tsIsUnambiguouslyStartOfFunctionType() {\r\n    this.next();\r\n\r\n    if (this.match(11) || this.match(21)) {\r\n      return true;\r\n    }\r\n\r\n    if (this.tsSkipParameterStart()) {\r\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(27)) {\r\n        return true;\r\n      }\r\n\r\n      if (this.match(11)) {\r\n        this.next();\r\n\r\n        if (this.match(19)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\r\n    return this.tsInType(() => {\r\n      const t = this.startNode();\r\n      this.expect(returnToken);\r\n      const node = this.startNode();\r\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\r\n\r\n      if (asserts && this.match(72)) {\r\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\r\n\r\n        if (thisTypePredicate.type === \"TSThisType\") {\r\n          node.parameterName = thisTypePredicate;\r\n          node.asserts = true;\r\n          node.typeAnnotation = null;\r\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\r\n        } else {\r\n          this.resetStartLocationFromNode(thisTypePredicate, node);\r\n          thisTypePredicate.asserts = true;\r\n        }\r\n\r\n        t.typeAnnotation = thisTypePredicate;\r\n        return this.finishNode(t, \"TSTypeAnnotation\");\r\n      }\r\n\r\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\r\n\r\n      if (!typePredicateVariable) {\r\n        if (!asserts) {\r\n          return this.tsParseTypeAnnotation(false, t);\r\n        }\r\n\r\n        node.parameterName = this.parseIdentifier();\r\n        node.asserts = asserts;\r\n        node.typeAnnotation = null;\r\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\r\n        return this.finishNode(t, \"TSTypeAnnotation\");\r\n      }\r\n\r\n      const type = this.tsParseTypeAnnotation(false);\r\n      node.parameterName = typePredicateVariable;\r\n      node.typeAnnotation = type;\r\n      node.asserts = asserts;\r\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\r\n      return this.finishNode(t, \"TSTypeAnnotation\");\r\n    });\r\n  }\r\n\r\n  tsTryParseTypeOrTypePredicateAnnotation() {\r\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\r\n  }\r\n\r\n  tsTryParseTypeAnnotation() {\r\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\r\n  }\r\n\r\n  tsTryParseType() {\r\n    return this.tsEatThenParseType(14);\r\n  }\r\n\r\n  tsParseTypePredicatePrefix() {\r\n    const id = this.parseIdentifier();\r\n\r\n    if (this.isContextual(107) && !this.hasPrecedingLineBreak()) {\r\n      this.next();\r\n      return id;\r\n    }\r\n  }\r\n\r\n  tsParseTypePredicateAsserts() {\r\n    if (this.state.type !== 100) {\r\n      return false;\r\n    }\r\n\r\n    const containsEsc = this.state.containsEsc;\r\n    this.next();\r\n\r\n    if (!tokenIsIdentifier(this.state.type) && !this.match(72)) {\r\n      return false;\r\n    }\r\n\r\n    if (containsEsc) {\r\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\r\n    this.tsInType(() => {\r\n      if (eatColon) this.expect(14);\r\n      t.typeAnnotation = this.tsParseType();\r\n    });\r\n    return this.finishNode(t, \"TSTypeAnnotation\");\r\n  }\r\n\r\n  tsParseType() {\r\n    assert(this.state.inType);\r\n    const type = this.tsParseNonConditionalType();\r\n\r\n    if (this.hasPrecedingLineBreak() || !this.eat(75)) {\r\n      return type;\r\n    }\r\n\r\n    const node = this.startNodeAtNode(type);\r\n    node.checkType = type;\r\n    node.extendsType = this.tsParseNonConditionalType();\r\n    this.expect(17);\r\n    node.trueType = this.tsParseType();\r\n    this.expect(14);\r\n    node.falseType = this.tsParseType();\r\n    return this.finishNode(node, \"TSConditionalType\");\r\n  }\r\n\r\n  isAbstractConstructorSignature() {\r\n    return this.isContextual(114) && this.lookahead().type === 71;\r\n  }\r\n\r\n  tsParseNonConditionalType() {\r\n    if (this.tsIsStartOfFunctionType()) {\r\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\r\n    }\r\n\r\n    if (this.match(71)) {\r\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\r\n    } else if (this.isAbstractConstructorSignature()) {\r\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\r\n    }\r\n\r\n    return this.tsParseUnionTypeOrHigher();\r\n  }\r\n\r\n  tsParseTypeAssertion() {\r\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\r\n      this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\r\n    }\r\n\r\n    const node = this.startNode();\r\n\r\n    const _const = this.tsTryNextParseConstantContext();\r\n\r\n    node.typeAnnotation = _const || this.tsNextThenParseType();\r\n    this.expect(44);\r\n    node.expression = this.parseMaybeUnary();\r\n    return this.finishNode(node, \"TSTypeAssertion\");\r\n  }\r\n\r\n  tsParseHeritageClause(descriptor) {\r\n    const originalStart = this.state.start;\r\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\r\n\r\n    if (!delimitedList.length) {\r\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\r\n    }\r\n\r\n    return delimitedList;\r\n  }\r\n\r\n  tsParseExpressionWithTypeArguments() {\r\n    const node = this.startNode();\r\n    node.expression = this.tsParseEntityName(false);\r\n\r\n    if (this.match(43)) {\r\n      node.typeParameters = this.tsParseTypeArguments();\r\n    }\r\n\r\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\r\n  }\r\n\r\n  tsParseInterfaceDeclaration(node) {\r\n    if (tokenIsIdentifier(this.state.type)) {\r\n      node.id = this.parseIdentifier();\r\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\r\n    } else {\r\n      node.id = null;\r\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\r\n    }\r\n\r\n    node.typeParameters = this.tsTryParseTypeParameters();\r\n\r\n    if (this.eat(75)) {\r\n      node.extends = this.tsParseHeritageClause(\"extends\");\r\n    }\r\n\r\n    const body = this.startNode();\r\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\r\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\r\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\r\n  }\r\n\r\n  tsParseTypeAliasDeclaration(node) {\r\n    node.id = this.parseIdentifier();\r\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\r\n    node.typeParameters = this.tsTryParseTypeParameters();\r\n    node.typeAnnotation = this.tsInType(() => {\r\n      this.expect(27);\r\n\r\n      if (this.isContextual(105) && this.lookahead().type !== 16) {\r\n        const node = this.startNode();\r\n        this.next();\r\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\r\n      }\r\n\r\n      return this.tsParseType();\r\n    });\r\n    this.semicolon();\r\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\r\n  }\r\n\r\n  tsInNoContext(cb) {\r\n    const oldContext = this.state.context;\r\n    this.state.context = [oldContext[0]];\r\n\r\n    try {\r\n      return cb();\r\n    } finally {\r\n      this.state.context = oldContext;\r\n    }\r\n  }\r\n\r\n  tsInType(cb) {\r\n    const oldInType = this.state.inType;\r\n    this.state.inType = true;\r\n\r\n    try {\r\n      return cb();\r\n    } finally {\r\n      this.state.inType = oldInType;\r\n    }\r\n  }\r\n\r\n  tsEatThenParseType(token) {\r\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\r\n  }\r\n\r\n  tsExpectThenParseType(token) {\r\n    return this.tsDoThenParseType(() => this.expect(token));\r\n  }\r\n\r\n  tsNextThenParseType() {\r\n    return this.tsDoThenParseType(() => this.next());\r\n  }\r\n\r\n  tsDoThenParseType(cb) {\r\n    return this.tsInType(() => {\r\n      cb();\r\n      return this.tsParseType();\r\n    });\r\n  }\r\n\r\n  tsParseEnumMember() {\r\n    const node = this.startNode();\r\n    node.id = this.match(123) ? this.parseExprAtom() : this.parseIdentifier(true);\r\n\r\n    if (this.eat(27)) {\r\n      node.initializer = this.parseMaybeAssignAllowIn();\r\n    }\r\n\r\n    return this.finishNode(node, \"TSEnumMember\");\r\n  }\r\n\r\n  tsParseEnumDeclaration(node, isConst) {\r\n    if (isConst) node.const = true;\r\n    node.id = this.parseIdentifier();\r\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\r\n    this.expect(5);\r\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\r\n    this.expect(8);\r\n    return this.finishNode(node, \"TSEnumDeclaration\");\r\n  }\r\n\r\n  tsParseModuleBlock() {\r\n    const node = this.startNode();\r\n    this.scope.enter(SCOPE_OTHER);\r\n    this.expect(5);\r\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\r\n    this.scope.exit();\r\n    return this.finishNode(node, \"TSModuleBlock\");\r\n  }\r\n\r\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\r\n    node.id = this.parseIdentifier();\r\n\r\n    if (!nested) {\r\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\r\n    }\r\n\r\n    if (this.eat(16)) {\r\n      const inner = this.startNode();\r\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\r\n      node.body = inner;\r\n    } else {\r\n      this.scope.enter(SCOPE_TS_MODULE);\r\n      this.prodParam.enter(PARAM);\r\n      node.body = this.tsParseModuleBlock();\r\n      this.prodParam.exit();\r\n      this.scope.exit();\r\n    }\r\n\r\n    return this.finishNode(node, \"TSModuleDeclaration\");\r\n  }\r\n\r\n  tsParseAmbientExternalModuleDeclaration(node) {\r\n    if (this.isContextual(103)) {\r\n      node.global = true;\r\n      node.id = this.parseIdentifier();\r\n    } else if (this.match(123)) {\r\n      node.id = this.parseExprAtom();\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n\r\n    if (this.match(5)) {\r\n      this.scope.enter(SCOPE_TS_MODULE);\r\n      this.prodParam.enter(PARAM);\r\n      node.body = this.tsParseModuleBlock();\r\n      this.prodParam.exit();\r\n      this.scope.exit();\r\n    } else {\r\n      this.semicolon();\r\n    }\r\n\r\n    return this.finishNode(node, \"TSModuleDeclaration\");\r\n  }\r\n\r\n  tsParseImportEqualsDeclaration(node, isExport) {\r\n    node.isExport = isExport || false;\r\n    node.id = this.parseIdentifier();\r\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\r\n    this.expect(27);\r\n    const moduleReference = this.tsParseModuleReference();\r\n\r\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\r\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\r\n    }\r\n\r\n    node.moduleReference = moduleReference;\r\n    this.semicolon();\r\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\r\n  }\r\n\r\n  tsIsExternalModuleReference() {\r\n    return this.isContextual(110) && this.lookaheadCharCode() === 40;\r\n  }\r\n\r\n  tsParseModuleReference() {\r\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\r\n  }\r\n\r\n  tsParseExternalModuleReference() {\r\n    const node = this.startNode();\r\n    this.expectContextual(110);\r\n    this.expect(10);\r\n\r\n    if (!this.match(123)) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    node.expression = this.parseExprAtom();\r\n    this.expect(11);\r\n    return this.finishNode(node, \"TSExternalModuleReference\");\r\n  }\r\n\r\n  tsLookAhead(f) {\r\n    const state = this.state.clone();\r\n    const res = f();\r\n    this.state = state;\r\n    return res;\r\n  }\r\n\r\n  tsTryParseAndCatch(f) {\r\n    const result = this.tryParse(abort => f() || abort());\r\n    if (result.aborted || !result.node) return undefined;\r\n    if (result.error) this.state = result.failState;\r\n    return result.node;\r\n  }\r\n\r\n  tsTryParse(f) {\r\n    const state = this.state.clone();\r\n    const result = f();\r\n\r\n    if (result !== undefined && result !== false) {\r\n      return result;\r\n    } else {\r\n      this.state = state;\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  tsTryParseDeclare(nany) {\r\n    if (this.isLineTerminator()) {\r\n      return;\r\n    }\r\n\r\n    let starttype = this.state.type;\r\n    let kind;\r\n\r\n    if (this.isContextual(93)) {\r\n      starttype = 68;\r\n      kind = \"let\";\r\n    }\r\n\r\n    return this.tsInAmbientContext(() => {\r\n      switch (starttype) {\r\n        case 62:\r\n          nany.declare = true;\r\n          return this.parseFunctionStatement(nany, false, true);\r\n\r\n        case 74:\r\n          nany.declare = true;\r\n          return this.parseClass(nany, true, false);\r\n\r\n        case 69:\r\n          if (this.match(69) && this.isLookaheadContextual(\"enum\")) {\r\n            this.expect(69);\r\n            this.expectContextual(116);\r\n            return this.tsParseEnumDeclaration(nany, true);\r\n          }\r\n\r\n        case 68:\r\n          kind = kind || this.state.value;\r\n          return this.parseVarStatement(nany, kind);\r\n\r\n        case 103:\r\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\r\n\r\n        default:\r\n          {\r\n            if (tokenIsIdentifier(starttype)) {\r\n              return this.tsParseDeclaration(nany, this.state.value, true);\r\n            }\r\n          }\r\n      }\r\n    });\r\n  }\r\n\r\n  tsTryParseExportDeclaration() {\r\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\r\n  }\r\n\r\n  tsParseExpressionStatement(node, expr) {\r\n    switch (expr.name) {\r\n      case \"declare\":\r\n        {\r\n          const declaration = this.tsTryParseDeclare(node);\r\n\r\n          if (declaration) {\r\n            declaration.declare = true;\r\n            return declaration;\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case \"global\":\r\n        if (this.match(5)) {\r\n          this.scope.enter(SCOPE_TS_MODULE);\r\n          this.prodParam.enter(PARAM);\r\n          const mod = node;\r\n          mod.global = true;\r\n          mod.id = expr;\r\n          mod.body = this.tsParseModuleBlock();\r\n          this.scope.exit();\r\n          this.prodParam.exit();\r\n          return this.finishNode(mod, \"TSModuleDeclaration\");\r\n        }\r\n\r\n        break;\r\n\r\n      default:\r\n        return this.tsParseDeclaration(node, expr.name, false);\r\n    }\r\n  }\r\n\r\n  tsParseDeclaration(node, value, next) {\r\n    switch (value) {\r\n      case \"abstract\":\r\n        if (this.tsCheckLineTerminator(next) && (this.match(74) || tokenIsIdentifier(this.state.type))) {\r\n          return this.tsParseAbstractDeclaration(node);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"enum\":\r\n        if (next || tokenIsIdentifier(this.state.type)) {\r\n          if (next) this.next();\r\n          return this.tsParseEnumDeclaration(node, false);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"interface\":\r\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\r\n          return this.tsParseInterfaceDeclaration(node);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"module\":\r\n        if (this.tsCheckLineTerminator(next)) {\r\n          if (this.match(123)) {\r\n            return this.tsParseAmbientExternalModuleDeclaration(node);\r\n          } else if (tokenIsIdentifier(this.state.type)) {\r\n            return this.tsParseModuleOrNamespaceDeclaration(node);\r\n          }\r\n        }\r\n\r\n        break;\r\n\r\n      case \"namespace\":\r\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\r\n          return this.tsParseModuleOrNamespaceDeclaration(node);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"type\":\r\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\r\n          return this.tsParseTypeAliasDeclaration(node);\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  tsCheckLineTerminator(next) {\r\n    if (next) {\r\n      if (this.hasFollowingLineBreak()) return false;\r\n      this.next();\r\n      return true;\r\n    }\r\n\r\n    return !this.isLineTerminator();\r\n  }\r\n\r\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\r\n    if (!this.match(43)) {\r\n      return undefined;\r\n    }\r\n\r\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\r\n    this.state.maybeInArrowParameters = true;\r\n    const res = this.tsTryParseAndCatch(() => {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.typeParameters = this.tsParseTypeParameters();\r\n      super.parseFunctionParams(node);\r\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\r\n      this.expect(19);\r\n      return node;\r\n    });\r\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\r\n\r\n    if (!res) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.parseArrowExpression(res, null, true);\r\n  }\r\n\r\n  tsParseTypeArguments() {\r\n    const node = this.startNode();\r\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\r\n      this.expect(43);\r\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\r\n    }));\r\n\r\n    if (node.params.length === 0) {\r\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\r\n    }\r\n\r\n    this.expect(44);\r\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\r\n  }\r\n\r\n  tsIsDeclarationStart() {\r\n    return tokenIsTSDeclarationStart(this.state.type);\r\n  }\r\n\r\n  isExportDefaultSpecifier() {\r\n    if (this.tsIsDeclarationStart()) return false;\r\n    return super.isExportDefaultSpecifier();\r\n  }\r\n\r\n  parseAssignableListItem(allowModifiers, decorators) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    let accessibility;\r\n    let readonly = false;\r\n    let override = false;\r\n\r\n    if (allowModifiers !== undefined) {\r\n      const modified = {};\r\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\r\n      accessibility = modified.accessibility;\r\n      override = modified.override;\r\n      readonly = modified.readonly;\r\n\r\n      if (allowModifiers === false && (accessibility || readonly || override)) {\r\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\r\n      }\r\n    }\r\n\r\n    const left = this.parseMaybeDefault();\r\n    this.parseAssignableListItemTypes(left);\r\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\r\n\r\n    if (accessibility || readonly || override) {\r\n      const pp = this.startNodeAt(startPos, startLoc);\r\n\r\n      if (decorators.length) {\r\n        pp.decorators = decorators;\r\n      }\r\n\r\n      if (accessibility) pp.accessibility = accessibility;\r\n      if (readonly) pp.readonly = readonly;\r\n      if (override) pp.override = override;\r\n\r\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\r\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\r\n      }\r\n\r\n      pp.parameter = elt;\r\n      return this.finishNode(pp, \"TSParameterProperty\");\r\n    }\r\n\r\n    if (decorators.length) {\r\n      left.decorators = decorators;\r\n    }\r\n\r\n    return elt;\r\n  }\r\n\r\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\r\n    if (this.match(14)) {\r\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\r\n    }\r\n\r\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\r\n\r\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\r\n      this.finishNode(node, bodilessType);\r\n      return;\r\n    }\r\n\r\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\r\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\r\n\r\n      if (node.declare) {\r\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\r\n        return;\r\n      }\r\n    }\r\n\r\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\r\n  }\r\n\r\n  registerFunctionStatementId(node) {\r\n    if (!node.body && node.id) {\r\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\r\n    } else {\r\n      super.registerFunctionStatementId(...arguments);\r\n    }\r\n  }\r\n\r\n  tsCheckForInvalidTypeCasts(items) {\r\n    items.forEach(node => {\r\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\r\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\r\n      }\r\n    });\r\n  }\r\n\r\n  toReferencedList(exprList, isInParens) {\r\n    this.tsCheckForInvalidTypeCasts(exprList);\r\n    return exprList;\r\n  }\r\n\r\n  parseArrayLike(...args) {\r\n    const node = super.parseArrayLike(...args);\r\n\r\n    if (node.type === \"ArrayExpression\") {\r\n      this.tsCheckForInvalidTypeCasts(node.elements);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\r\n    if (!this.hasPrecedingLineBreak() && this.match(33)) {\r\n      this.state.canStartJSXElement = false;\r\n      this.next();\r\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\r\n      nonNullExpression.expression = base;\r\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\r\n    }\r\n\r\n    let isOptionalCall = false;\r\n\r\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\r\n      if (noCalls) {\r\n        state.stop = true;\r\n        return base;\r\n      }\r\n\r\n      state.optionalChainMember = isOptionalCall = true;\r\n      this.next();\r\n    }\r\n\r\n    if (this.match(43)) {\r\n      let missingParenErrorPos;\r\n      const result = this.tsTryParseAndCatch(() => {\r\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\r\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\r\n\r\n          if (asyncArrowFn) {\r\n            return asyncArrowFn;\r\n          }\r\n        }\r\n\r\n        const node = this.startNodeAt(startPos, startLoc);\r\n        node.callee = base;\r\n        const typeArguments = this.tsParseTypeArguments();\r\n\r\n        if (typeArguments) {\r\n          if (isOptionalCall && !this.match(10)) {\r\n            missingParenErrorPos = this.state.pos;\r\n            this.unexpected();\r\n          }\r\n\r\n          if (!noCalls && this.eat(10)) {\r\n            node.arguments = this.parseCallExpressionArguments(11, false);\r\n            this.tsCheckForInvalidTypeCasts(node.arguments);\r\n            node.typeParameters = typeArguments;\r\n\r\n            if (state.optionalChainMember) {\r\n              node.optional = isOptionalCall;\r\n            }\r\n\r\n            return this.finishCallExpression(node, state.optionalChainMember);\r\n          } else if (this.match(22)) {\r\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\r\n            result.typeParameters = typeArguments;\r\n            return result;\r\n          }\r\n        }\r\n\r\n        this.unexpected();\r\n      });\r\n\r\n      if (missingParenErrorPos) {\r\n        this.unexpected(missingParenErrorPos, 10);\r\n      }\r\n\r\n      if (result) return result;\r\n    }\r\n\r\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\r\n  }\r\n\r\n  parseNewArguments(node) {\r\n    if (this.match(43)) {\r\n      const typeParameters = this.tsTryParseAndCatch(() => {\r\n        const args = this.tsParseTypeArguments();\r\n        if (!this.match(10)) this.unexpected();\r\n        return args;\r\n      });\r\n\r\n      if (typeParameters) {\r\n        node.typeParameters = typeParameters;\r\n      }\r\n    }\r\n\r\n    super.parseNewArguments(node);\r\n  }\r\n\r\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\r\n    if (tokenOperatorPrecedence(52) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(87)) {\r\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\r\n      node.expression = left;\r\n\r\n      const _const = this.tsTryNextParseConstantContext();\r\n\r\n      if (_const) {\r\n        node.typeAnnotation = _const;\r\n      } else {\r\n        node.typeAnnotation = this.tsNextThenParseType();\r\n      }\r\n\r\n      this.finishNode(node, \"TSAsExpression\");\r\n      this.reScan_lt_gt();\r\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\r\n    }\r\n\r\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\r\n  }\r\n\r\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\r\n\r\n  checkDuplicateExports() {}\r\n\r\n  parseImport(node) {\r\n    node.importKind = \"value\";\r\n\r\n    if (tokenIsIdentifier(this.state.type) || this.match(49) || this.match(5)) {\r\n      let ahead = this.lookahead();\r\n\r\n      if (this.isContextual(120) && ahead.type !== 12 && ahead.type !== 91 && ahead.type !== 27) {\r\n        node.importKind = \"type\";\r\n        this.next();\r\n        ahead = this.lookahead();\r\n      }\r\n\r\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 27) {\r\n        return this.tsParseImportEqualsDeclaration(node);\r\n      }\r\n    }\r\n\r\n    const importNode = super.parseImport(node);\r\n\r\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\r\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\r\n    }\r\n\r\n    return importNode;\r\n  }\r\n\r\n  parseExport(node) {\r\n    if (this.match(77)) {\r\n      this.next();\r\n\r\n      if (this.isContextual(120) && this.lookaheadCharCode() !== 61) {\r\n        node.importKind = \"type\";\r\n        this.next();\r\n      } else {\r\n        node.importKind = \"value\";\r\n      }\r\n\r\n      return this.tsParseImportEqualsDeclaration(node, true);\r\n    } else if (this.eat(27)) {\r\n      const assign = node;\r\n      assign.expression = this.parseExpression();\r\n      this.semicolon();\r\n      return this.finishNode(assign, \"TSExportAssignment\");\r\n    } else if (this.eatContextual(87)) {\r\n      const decl = node;\r\n      this.expectContextual(118);\r\n      decl.id = this.parseIdentifier();\r\n      this.semicolon();\r\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\r\n    } else {\r\n      if (this.isContextual(120) && this.lookahead().type === 5) {\r\n        this.next();\r\n        node.exportKind = \"type\";\r\n      } else {\r\n        node.exportKind = \"value\";\r\n      }\r\n\r\n      return super.parseExport(node);\r\n    }\r\n  }\r\n\r\n  isAbstractClass() {\r\n    return this.isContextual(114) && this.lookahead().type === 74;\r\n  }\r\n\r\n  parseExportDefaultExpression() {\r\n    if (this.isAbstractClass()) {\r\n      const cls = this.startNode();\r\n      this.next();\r\n      cls.abstract = true;\r\n      this.parseClass(cls, true, true);\r\n      return cls;\r\n    }\r\n\r\n    if (this.match(119)) {\r\n      const interfaceNode = this.startNode();\r\n      this.next();\r\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\r\n      if (result) return result;\r\n    }\r\n\r\n    return super.parseExportDefaultExpression();\r\n  }\r\n\r\n  parseStatementContent(context, topLevel) {\r\n    if (this.state.type === 69) {\r\n      const ahead = this.lookahead();\r\n\r\n      if (ahead.type === 116) {\r\n        const node = this.startNode();\r\n        this.next();\r\n        this.expectContextual(116);\r\n        return this.tsParseEnumDeclaration(node, true);\r\n      }\r\n    }\r\n\r\n    return super.parseStatementContent(context, topLevel);\r\n  }\r\n\r\n  parseAccessModifier() {\r\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\r\n  }\r\n\r\n  tsHasSomeModifiers(member, modifiers) {\r\n    return modifiers.some(modifier => {\r\n      if (tsIsAccessModifier(modifier)) {\r\n        return member.accessibility === modifier;\r\n      }\r\n\r\n      return !!member[modifier];\r\n    });\r\n  }\r\n\r\n  tsIsStartOfStaticBlocks() {\r\n    return this.isContextual(98) && this.lookaheadCharCode() === 123;\r\n  }\r\n\r\n  parseClassMember(classBody, member, state) {\r\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\r\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\r\n\r\n    const callParseClassMemberWithIsStatic = () => {\r\n      if (this.tsIsStartOfStaticBlocks()) {\r\n        this.next();\r\n        this.next();\r\n\r\n        if (this.tsHasSomeModifiers(member, modifiers)) {\r\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\r\n        }\r\n\r\n        this.parseClassStaticBlock(classBody, member);\r\n      } else {\r\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\r\n      }\r\n    };\r\n\r\n    if (member.declare) {\r\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\r\n    } else {\r\n      callParseClassMemberWithIsStatic();\r\n    }\r\n  }\r\n\r\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\r\n    const idx = this.tsTryParseIndexSignature(member);\r\n\r\n    if (idx) {\r\n      classBody.body.push(idx);\r\n\r\n      if (member.abstract) {\r\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\r\n      }\r\n\r\n      if (member.accessibility) {\r\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\r\n      }\r\n\r\n      if (member.declare) {\r\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\r\n      }\r\n\r\n      if (member.override) {\r\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this.state.inAbstractClass && member.abstract) {\r\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\r\n    }\r\n\r\n    if (member.override) {\r\n      if (!state.hadSuperClass) {\r\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\r\n      }\r\n    }\r\n\r\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\r\n  }\r\n\r\n  parsePostMemberNameModifiers(methodOrProp) {\r\n    const optional = this.eat(17);\r\n    if (optional) methodOrProp.optional = true;\r\n\r\n    if (methodOrProp.readonly && this.match(10)) {\r\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\r\n    }\r\n\r\n    if (methodOrProp.declare && this.match(10)) {\r\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\r\n    }\r\n  }\r\n\r\n  parseExpressionStatement(node, expr) {\r\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\r\n    return decl || super.parseExpressionStatement(node, expr);\r\n  }\r\n\r\n  shouldParseExportDeclaration() {\r\n    if (this.tsIsDeclarationStart()) return true;\r\n    return super.shouldParseExportDeclaration();\r\n  }\r\n\r\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\r\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\r\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\r\n    }\r\n\r\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\r\n\r\n    if (!result.node) {\r\n      if (result.error) {\r\n        super.setOptionalParametersError(refExpressionErrors, result.error);\r\n      }\r\n\r\n      return expr;\r\n    }\r\n\r\n    if (result.error) this.state = result.failState;\r\n    return result.node;\r\n  }\r\n\r\n  parseParenItem(node, startPos, startLoc) {\r\n    node = super.parseParenItem(node, startPos, startLoc);\r\n\r\n    if (this.eat(17)) {\r\n      node.optional = true;\r\n      this.resetEndLocation(node);\r\n    }\r\n\r\n    if (this.match(14)) {\r\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\r\n      typeCastNode.expression = node;\r\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\r\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  parseExportDeclaration(node) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const isDeclare = this.eatContextual(115);\r\n\r\n    if (isDeclare && (this.isContextual(115) || !this.shouldParseExportDeclaration())) {\r\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\r\n    }\r\n\r\n    let declaration;\r\n\r\n    if (tokenIsIdentifier(this.state.type)) {\r\n      declaration = this.tsTryParseExportDeclaration();\r\n    }\r\n\r\n    if (!declaration) {\r\n      declaration = super.parseExportDeclaration(node);\r\n    }\r\n\r\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\r\n      node.exportKind = \"type\";\r\n    }\r\n\r\n    if (declaration && isDeclare) {\r\n      this.resetStartLocation(declaration, startPos, startLoc);\r\n      declaration.declare = true;\r\n    }\r\n\r\n    return declaration;\r\n  }\r\n\r\n  parseClassId(node, isStatement, optionalId) {\r\n    if ((!isStatement || optionalId) && this.isContextual(104)) {\r\n      return;\r\n    }\r\n\r\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\r\n    const typeParameters = this.tsTryParseTypeParameters();\r\n    if (typeParameters) node.typeParameters = typeParameters;\r\n  }\r\n\r\n  parseClassPropertyAnnotation(node) {\r\n    if (!node.optional && this.eat(33)) {\r\n      node.definite = true;\r\n    }\r\n\r\n    const type = this.tsTryParseTypeAnnotation();\r\n    if (type) node.typeAnnotation = type;\r\n  }\r\n\r\n  parseClassProperty(node) {\r\n    this.parseClassPropertyAnnotation(node);\r\n\r\n    if (this.state.isAmbientContext && this.match(27)) {\r\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\r\n    }\r\n\r\n    if (node.abstract && this.match(27)) {\r\n      const {\r\n        key\r\n      } = node;\r\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\r\n    }\r\n\r\n    return super.parseClassProperty(node);\r\n  }\r\n\r\n  parseClassPrivateProperty(node) {\r\n    if (node.abstract) {\r\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\r\n    }\r\n\r\n    if (node.accessibility) {\r\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\r\n    }\r\n\r\n    this.parseClassPropertyAnnotation(node);\r\n    return super.parseClassPrivateProperty(node);\r\n  }\r\n\r\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\r\n    const typeParameters = this.tsTryParseTypeParameters();\r\n\r\n    if (typeParameters && isConstructor) {\r\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\r\n    }\r\n\r\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\r\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\r\n    }\r\n\r\n    if (typeParameters) method.typeParameters = typeParameters;\r\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\r\n  }\r\n\r\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\r\n    const typeParameters = this.tsTryParseTypeParameters();\r\n    if (typeParameters) method.typeParameters = typeParameters;\r\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\r\n  }\r\n\r\n  declareClassPrivateMethodInScope(node, kind) {\r\n    if (node.type === \"TSDeclareMethod\") return;\r\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\r\n    super.declareClassPrivateMethodInScope(node, kind);\r\n  }\r\n\r\n  parseClassSuper(node) {\r\n    super.parseClassSuper(node);\r\n\r\n    if (node.superClass && this.match(43)) {\r\n      node.superTypeParameters = this.tsParseTypeArguments();\r\n    }\r\n\r\n    if (this.eatContextual(104)) {\r\n      node.implements = this.tsParseHeritageClause(\"implements\");\r\n    }\r\n  }\r\n\r\n  parseObjPropValue(prop, ...args) {\r\n    const typeParameters = this.tsTryParseTypeParameters();\r\n    if (typeParameters) prop.typeParameters = typeParameters;\r\n    super.parseObjPropValue(prop, ...args);\r\n  }\r\n\r\n  parseFunctionParams(node, allowModifiers) {\r\n    const typeParameters = this.tsTryParseTypeParameters();\r\n    if (typeParameters) node.typeParameters = typeParameters;\r\n    super.parseFunctionParams(node, allowModifiers);\r\n  }\r\n\r\n  parseVarId(decl, kind) {\r\n    super.parseVarId(decl, kind);\r\n\r\n    if (decl.id.type === \"Identifier\" && this.eat(33)) {\r\n      decl.definite = true;\r\n    }\r\n\r\n    const type = this.tsTryParseTypeAnnotation();\r\n\r\n    if (type) {\r\n      decl.id.typeAnnotation = type;\r\n      this.resetEndLocation(decl.id);\r\n    }\r\n  }\r\n\r\n  parseAsyncArrowFromCallExpression(node, call) {\r\n    if (this.match(14)) {\r\n      node.returnType = this.tsParseTypeAnnotation();\r\n    }\r\n\r\n    return super.parseAsyncArrowFromCallExpression(node, call);\r\n  }\r\n\r\n  parseMaybeAssign(...args) {\r\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\r\n\r\n    let state;\r\n    let jsx;\r\n    let typeCast;\r\n\r\n    if (this.hasPlugin(\"jsx\") && (this.match(132) || this.match(43))) {\r\n      state = this.state.clone();\r\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\r\n      if (!jsx.error) return jsx.node;\r\n      const {\r\n        context\r\n      } = this.state;\r\n\r\n      if (context[context.length - 1] === types.j_oTag) {\r\n        context.length -= 2;\r\n      } else if (context[context.length - 1] === types.j_expr) {\r\n        context.length -= 1;\r\n      }\r\n    }\r\n\r\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(43)) {\r\n      return super.parseMaybeAssign(...args);\r\n    }\r\n\r\n    let typeParameters;\r\n    state = state || this.state.clone();\r\n    const arrow = this.tryParse(abort => {\r\n      var _expr$extra, _typeParameters;\r\n\r\n      typeParameters = this.tsParseTypeParameters();\r\n      const expr = super.parseMaybeAssign(...args);\r\n\r\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\r\n        abort();\r\n      }\r\n\r\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\r\n        this.resetStartLocationFromNode(expr, typeParameters);\r\n      }\r\n\r\n      expr.typeParameters = typeParameters;\r\n      return expr;\r\n    }, state);\r\n\r\n    if (!arrow.error && !arrow.aborted) {\r\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\r\n      return arrow.node;\r\n    }\r\n\r\n    if (!jsx) {\r\n      assert(!this.hasPlugin(\"jsx\"));\r\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\r\n      if (!typeCast.error) return typeCast.node;\r\n    }\r\n\r\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\r\n      this.state = jsx.failState;\r\n      return jsx.node;\r\n    }\r\n\r\n    if (arrow.node) {\r\n      this.state = arrow.failState;\r\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\r\n      return arrow.node;\r\n    }\r\n\r\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\r\n      this.state = typeCast.failState;\r\n      return typeCast.node;\r\n    }\r\n\r\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\r\n    if (arrow.thrown) throw arrow.error;\r\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\r\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\r\n  }\r\n\r\n  reportReservedArrowTypeParam(node) {\r\n    var _node$extra;\r\n\r\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\r\n      this.raise(node.start, TSErrors.ReservedArrowTypeParam);\r\n    }\r\n  }\r\n\r\n  parseMaybeUnary(refExpressionErrors) {\r\n    if (!this.hasPlugin(\"jsx\") && this.match(43)) {\r\n      return this.tsParseTypeAssertion();\r\n    } else {\r\n      return super.parseMaybeUnary(refExpressionErrors);\r\n    }\r\n  }\r\n\r\n  parseArrow(node) {\r\n    if (this.match(14)) {\r\n      const result = this.tryParse(abort => {\r\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\r\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\r\n        return returnType;\r\n      });\r\n      if (result.aborted) return;\r\n\r\n      if (!result.thrown) {\r\n        if (result.error) this.state = result.failState;\r\n        node.returnType = result.node;\r\n      }\r\n    }\r\n\r\n    return super.parseArrow(node);\r\n  }\r\n\r\n  parseAssignableListItemTypes(param) {\r\n    if (this.eat(17)) {\r\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\r\n        this.raise(param.start, TSErrors.PatternIsOptional);\r\n      }\r\n\r\n      param.optional = true;\r\n    }\r\n\r\n    const type = this.tsTryParseTypeAnnotation();\r\n    if (type) param.typeAnnotation = type;\r\n    this.resetEndLocation(param);\r\n    return param;\r\n  }\r\n\r\n  isAssignable(node, isBinding) {\r\n    switch (node.type) {\r\n      case \"TSTypeCastExpression\":\r\n        return this.isAssignable(node.expression, isBinding);\r\n\r\n      case \"TSParameterProperty\":\r\n        return true;\r\n\r\n      default:\r\n        return super.isAssignable(node, isBinding);\r\n    }\r\n  }\r\n\r\n  toAssignable(node, isLHS = false) {\r\n    switch (node.type) {\r\n      case \"TSTypeCastExpression\":\r\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\r\n\r\n      case \"TSParameterProperty\":\r\n        return super.toAssignable(node, isLHS);\r\n\r\n      case \"ParenthesizedExpression\":\r\n        return this.toAssignableParenthesizedExpression(node, isLHS);\r\n\r\n      case \"TSAsExpression\":\r\n      case \"TSNonNullExpression\":\r\n      case \"TSTypeAssertion\":\r\n        node.expression = this.toAssignable(node.expression, isLHS);\r\n        return node;\r\n\r\n      default:\r\n        return super.toAssignable(node, isLHS);\r\n    }\r\n  }\r\n\r\n  toAssignableParenthesizedExpression(node, isLHS) {\r\n    switch (node.expression.type) {\r\n      case \"TSAsExpression\":\r\n      case \"TSNonNullExpression\":\r\n      case \"TSTypeAssertion\":\r\n      case \"ParenthesizedExpression\":\r\n        node.expression = this.toAssignable(node.expression, isLHS);\r\n        return node;\r\n\r\n      default:\r\n        return super.toAssignable(node, isLHS);\r\n    }\r\n  }\r\n\r\n  checkLVal(expr, contextDescription, ...args) {\r\n    var _expr$extra2;\r\n\r\n    switch (expr.type) {\r\n      case \"TSTypeCastExpression\":\r\n        return;\r\n\r\n      case \"TSParameterProperty\":\r\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\r\n        return;\r\n\r\n      case \"TSAsExpression\":\r\n      case \"TSTypeAssertion\":\r\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\r\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\r\n          break;\r\n        }\r\n\r\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\r\n        return;\r\n\r\n      case \"TSNonNullExpression\":\r\n        this.checkLVal(expr.expression, contextDescription, ...args);\r\n        return;\r\n\r\n      default:\r\n        super.checkLVal(expr, contextDescription, ...args);\r\n        return;\r\n    }\r\n  }\r\n\r\n  parseBindingAtom() {\r\n    switch (this.state.type) {\r\n      case 72:\r\n        return this.parseIdentifier(true);\r\n\r\n      default:\r\n        return super.parseBindingAtom();\r\n    }\r\n  }\r\n\r\n  parseMaybeDecoratorArguments(expr) {\r\n    if (this.match(43)) {\r\n      const typeArguments = this.tsParseTypeArguments();\r\n\r\n      if (this.match(10)) {\r\n        const call = super.parseMaybeDecoratorArguments(expr);\r\n        call.typeParameters = typeArguments;\r\n        return call;\r\n      }\r\n\r\n      this.unexpected(this.state.start, 10);\r\n    }\r\n\r\n    return super.parseMaybeDecoratorArguments(expr);\r\n  }\r\n\r\n  checkCommaAfterRest(close) {\r\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\r\n      this.next();\r\n    } else {\r\n      super.checkCommaAfterRest(close);\r\n    }\r\n  }\r\n\r\n  isClassMethod() {\r\n    return this.match(43) || super.isClassMethod();\r\n  }\r\n\r\n  isClassProperty() {\r\n    return this.match(33) || this.match(14) || super.isClassProperty();\r\n  }\r\n\r\n  parseMaybeDefault(...args) {\r\n    const node = super.parseMaybeDefault(...args);\r\n\r\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\r\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  getTokenFromCode(code) {\r\n    if (this.state.inType) {\r\n      if (code === 62) {\r\n        return this.finishOp(44, 1);\r\n      }\r\n\r\n      if (code === 60) {\r\n        return this.finishOp(43, 1);\r\n      }\r\n    }\r\n\r\n    return super.getTokenFromCode(code);\r\n  }\r\n\r\n  reScan_lt_gt() {\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (type === 43) {\r\n      this.state.pos -= 1;\r\n      this.readToken_lt();\r\n    } else if (type === 44) {\r\n      this.state.pos -= 1;\r\n      this.readToken_gt();\r\n    }\r\n  }\r\n\r\n  toAssignableList(exprList) {\r\n    for (let i = 0; i < exprList.length; i++) {\r\n      const expr = exprList[i];\r\n      if (!expr) continue;\r\n\r\n      switch (expr.type) {\r\n        case \"TSTypeCastExpression\":\r\n          exprList[i] = this.typeCastToParameter(expr);\r\n          break;\r\n\r\n        case \"TSAsExpression\":\r\n        case \"TSTypeAssertion\":\r\n          if (!this.state.maybeInArrowParameters) {\r\n            exprList[i] = this.typeCastToParameter(expr);\r\n          } else {\r\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\r\n          }\r\n\r\n          break;\r\n      }\r\n    }\r\n\r\n    return super.toAssignableList(...arguments);\r\n  }\r\n\r\n  typeCastToParameter(node) {\r\n    node.expression.typeAnnotation = node.typeAnnotation;\r\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\r\n    return node.expression;\r\n  }\r\n\r\n  shouldParseArrow(params) {\r\n    if (this.match(14)) {\r\n      return params.every(expr => this.isAssignable(expr, true));\r\n    }\r\n\r\n    return super.shouldParseArrow(params);\r\n  }\r\n\r\n  shouldParseAsyncArrow() {\r\n    return this.match(14) || super.shouldParseAsyncArrow();\r\n  }\r\n\r\n  canHaveLeadingDecorator() {\r\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\r\n  }\r\n\r\n  jsxParseOpeningElementAfterName(node) {\r\n    if (this.match(43)) {\r\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\r\n      if (typeArguments) node.typeParameters = typeArguments;\r\n    }\r\n\r\n    return super.jsxParseOpeningElementAfterName(node);\r\n  }\r\n\r\n  getGetterSetterExpectedParamCount(method) {\r\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\r\n    const params = this.getObjectOrClassMethodParams(method);\r\n    const firstParam = params[0];\r\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\r\n    return hasContextParam ? baseCount + 1 : baseCount;\r\n  }\r\n\r\n  parseCatchClauseParam() {\r\n    const param = super.parseCatchClauseParam();\r\n    const type = this.tsTryParseTypeAnnotation();\r\n\r\n    if (type) {\r\n      param.typeAnnotation = type;\r\n      this.resetEndLocation(param);\r\n    }\r\n\r\n    return param;\r\n  }\r\n\r\n  tsInAmbientContext(cb) {\r\n    const oldIsAmbientContext = this.state.isAmbientContext;\r\n    this.state.isAmbientContext = true;\r\n\r\n    try {\r\n      return cb();\r\n    } finally {\r\n      this.state.isAmbientContext = oldIsAmbientContext;\r\n    }\r\n  }\r\n\r\n  parseClass(node, ...args) {\r\n    const oldInAbstractClass = this.state.inAbstractClass;\r\n    this.state.inAbstractClass = !!node.abstract;\r\n\r\n    try {\r\n      return super.parseClass(node, ...args);\r\n    } finally {\r\n      this.state.inAbstractClass = oldInAbstractClass;\r\n    }\r\n  }\r\n\r\n  tsParseAbstractDeclaration(node) {\r\n    if (this.match(74)) {\r\n      node.abstract = true;\r\n      return this.parseClass(node, true, false);\r\n    } else if (this.isContextual(119)) {\r\n      if (!this.hasFollowingLineBreak()) {\r\n        node.abstract = true;\r\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\r\n        this.next();\r\n        return this.tsParseInterfaceDeclaration(node);\r\n      }\r\n    } else {\r\n      this.unexpected(null, 74);\r\n    }\r\n  }\r\n\r\n  parseMethod(...args) {\r\n    const method = super.parseMethod(...args);\r\n\r\n    if (method.abstract) {\r\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\r\n\r\n      if (hasBody) {\r\n        const {\r\n          key\r\n        } = method;\r\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\r\n      }\r\n    }\r\n\r\n    return method;\r\n  }\r\n\r\n  tsParseTypeParameterName() {\r\n    const typeName = this.parseIdentifier();\r\n    return typeName.name;\r\n  }\r\n\r\n  shouldParseAsAmbientContext() {\r\n    return !!this.getPluginOption(\"typescript\", \"dts\");\r\n  }\r\n\r\n  parse() {\r\n    if (this.shouldParseAsAmbientContext()) {\r\n      this.state.isAmbientContext = true;\r\n    }\r\n\r\n    return super.parse();\r\n  }\r\n\r\n  getExpression() {\r\n    if (this.shouldParseAsAmbientContext()) {\r\n      this.state.isAmbientContext = true;\r\n    }\r\n\r\n    return super.getExpression();\r\n  }\r\n\r\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\r\n    if (!isString && isMaybeTypeOnly) {\r\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\r\n      return this.finishNode(node, \"ExportSpecifier\");\r\n    }\r\n\r\n    node.exportKind = \"value\";\r\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\r\n  }\r\n\r\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\r\n    if (!importedIsString && isMaybeTypeOnly) {\r\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\r\n      return this.finishNode(specifier, \"ImportSpecifier\");\r\n    }\r\n\r\n    specifier.importKind = \"value\";\r\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\r\n  }\r\n\r\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\r\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\r\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\r\n    let leftOfAs = node[leftOfAsKey];\r\n    let rightOfAs;\r\n    let hasTypeSpecifier = false;\r\n    let canParseAsKeyword = true;\r\n    const pos = leftOfAs.start;\r\n\r\n    if (this.isContextual(87)) {\r\n      const firstAs = this.parseIdentifier();\r\n\r\n      if (this.isContextual(87)) {\r\n        const secondAs = this.parseIdentifier();\r\n\r\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\r\n          hasTypeSpecifier = true;\r\n          leftOfAs = firstAs;\r\n          rightOfAs = this.parseIdentifier();\r\n          canParseAsKeyword = false;\r\n        } else {\r\n          rightOfAs = secondAs;\r\n          canParseAsKeyword = false;\r\n        }\r\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\r\n        canParseAsKeyword = false;\r\n        rightOfAs = this.parseIdentifier();\r\n      } else {\r\n        hasTypeSpecifier = true;\r\n        leftOfAs = firstAs;\r\n      }\r\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\r\n      hasTypeSpecifier = true;\r\n      leftOfAs = this.parseIdentifier();\r\n    }\r\n\r\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\r\n      this.raise(pos, isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports);\r\n    }\r\n\r\n    node[leftOfAsKey] = leftOfAs;\r\n    node[rightOfAsKey] = rightOfAs;\r\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\r\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\r\n\r\n    if (canParseAsKeyword && this.eatContextual(87)) {\r\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\r\n    }\r\n\r\n    if (!node[rightOfAsKey]) {\r\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\r\n    }\r\n\r\n    if (isImport) {\r\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\r\n    }\r\n  }\r\n\r\n});\r\n\r\nconst PlaceHolderErrors = makeErrorTemplates({\r\n  ClassNameIsRequired: \"A class name is required.\"\r\n}, ErrorCodes.SyntaxError);\r\nvar placeholders = (superClass => class extends superClass {\r\n  parsePlaceholder(expectedNode) {\r\n    if (this.match(134)) {\r\n      const node = this.startNode();\r\n      this.next();\r\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\r\n      node.name = super.parseIdentifier(true);\r\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\r\n      this.expect(134);\r\n      return this.finishPlaceholder(node, expectedNode);\r\n    }\r\n  }\r\n\r\n  finishPlaceholder(node, expectedNode) {\r\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\r\n    node.expectedNode = expectedNode;\r\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\r\n  }\r\n\r\n  getTokenFromCode(code) {\r\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\r\n      return this.finishOp(134, 2);\r\n    }\r\n\r\n    return super.getTokenFromCode(...arguments);\r\n  }\r\n\r\n  parseExprAtom() {\r\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\r\n  }\r\n\r\n  parseIdentifier() {\r\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\r\n  }\r\n\r\n  checkReservedWord(word) {\r\n    if (word !== undefined) super.checkReservedWord(...arguments);\r\n  }\r\n\r\n  parseBindingAtom() {\r\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\r\n  }\r\n\r\n  checkLVal(expr) {\r\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\r\n  }\r\n\r\n  toAssignable(node) {\r\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\r\n      node.expectedNode = \"Pattern\";\r\n      return node;\r\n    }\r\n\r\n    return super.toAssignable(...arguments);\r\n  }\r\n\r\n  isLet(context) {\r\n    if (super.isLet(context)) {\r\n      return true;\r\n    }\r\n\r\n    if (!this.isContextual(93)) {\r\n      return false;\r\n    }\r\n\r\n    if (context) return false;\r\n    const nextToken = this.lookahead();\r\n\r\n    if (nextToken.type === 134) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  verifyBreakContinue(node) {\r\n    if (node.label && node.label.type === \"Placeholder\") return;\r\n    super.verifyBreakContinue(...arguments);\r\n  }\r\n\r\n  parseExpressionStatement(node, expr) {\r\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\r\n      return super.parseExpressionStatement(...arguments);\r\n    }\r\n\r\n    if (this.match(14)) {\r\n      const stmt = node;\r\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\r\n      this.next();\r\n      stmt.body = this.parseStatement(\"label\");\r\n      return this.finishNode(stmt, \"LabeledStatement\");\r\n    }\r\n\r\n    this.semicolon();\r\n    node.name = expr.name;\r\n    return this.finishPlaceholder(node, \"Statement\");\r\n  }\r\n\r\n  parseBlock() {\r\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\r\n  }\r\n\r\n  parseFunctionId() {\r\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\r\n  }\r\n\r\n  parseClass(node, isStatement, optionalId) {\r\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\r\n    this.next();\r\n    this.takeDecorators(node);\r\n    const oldStrict = this.state.strict;\r\n    const placeholder = this.parsePlaceholder(\"Identifier\");\r\n\r\n    if (placeholder) {\r\n      if (this.match(75) || this.match(134) || this.match(5)) {\r\n        node.id = placeholder;\r\n      } else if (optionalId || !isStatement) {\r\n        node.id = null;\r\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\r\n        return this.finishNode(node, type);\r\n      } else {\r\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\r\n      }\r\n    } else {\r\n      this.parseClassId(node, isStatement, optionalId);\r\n    }\r\n\r\n    this.parseClassSuper(node);\r\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\r\n    return this.finishNode(node, type);\r\n  }\r\n\r\n  parseExport(node) {\r\n    const placeholder = this.parsePlaceholder(\"Identifier\");\r\n    if (!placeholder) return super.parseExport(...arguments);\r\n\r\n    if (!this.isContextual(91) && !this.match(12)) {\r\n      node.specifiers = [];\r\n      node.source = null;\r\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\r\n      return this.finishNode(node, \"ExportNamedDeclaration\");\r\n    }\r\n\r\n    this.expectPlugin(\"exportDefaultFrom\");\r\n    const specifier = this.startNode();\r\n    specifier.exported = placeholder;\r\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\r\n    return super.parseExport(node);\r\n  }\r\n\r\n  isExportDefaultSpecifier() {\r\n    if (this.match(59)) {\r\n      const next = this.nextTokenStart();\r\n\r\n      if (this.isUnparsedContextual(next, \"from\")) {\r\n        if (this.input.startsWith(tokenLabelName(134), this.nextTokenStartSince(next + 4))) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return super.isExportDefaultSpecifier();\r\n  }\r\n\r\n  maybeParseExportDefaultSpecifier(node) {\r\n    if (node.specifiers && node.specifiers.length > 0) {\r\n      return true;\r\n    }\r\n\r\n    return super.maybeParseExportDefaultSpecifier(...arguments);\r\n  }\r\n\r\n  checkExport(node) {\r\n    const {\r\n      specifiers\r\n    } = node;\r\n\r\n    if (specifiers != null && specifiers.length) {\r\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\r\n    }\r\n\r\n    super.checkExport(node);\r\n    node.specifiers = specifiers;\r\n  }\r\n\r\n  parseImport(node) {\r\n    const placeholder = this.parsePlaceholder(\"Identifier\");\r\n    if (!placeholder) return super.parseImport(...arguments);\r\n    node.specifiers = [];\r\n\r\n    if (!this.isContextual(91) && !this.match(12)) {\r\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\r\n      this.semicolon();\r\n      return this.finishNode(node, \"ImportDeclaration\");\r\n    }\r\n\r\n    const specifier = this.startNodeAtNode(placeholder);\r\n    specifier.local = placeholder;\r\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\r\n    node.specifiers.push(specifier);\r\n\r\n    if (this.eat(12)) {\r\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\r\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\r\n    }\r\n\r\n    this.expectContextual(91);\r\n    node.source = this.parseImportSource();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ImportDeclaration\");\r\n  }\r\n\r\n  parseImportSource() {\r\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\r\n  }\r\n\r\n});\r\n\r\nvar v8intrinsic = (superClass => class extends superClass {\r\n  parseV8Intrinsic() {\r\n    if (this.match(48)) {\r\n      const v8IntrinsicStart = this.state.start;\r\n      const node = this.startNode();\r\n      this.next();\r\n\r\n      if (tokenIsIdentifier(this.state.type)) {\r\n        const name = this.parseIdentifierName(this.state.start);\r\n        const identifier = this.createIdentifier(node, name);\r\n        identifier.type = \"V8IntrinsicIdentifier\";\r\n\r\n        if (this.match(10)) {\r\n          return identifier;\r\n        }\r\n      }\r\n\r\n      this.unexpected(v8IntrinsicStart);\r\n    }\r\n  }\r\n\r\n  parseExprAtom() {\r\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\r\n  }\r\n\r\n});\r\n\r\nfunction hasPlugin(plugins, name) {\r\n  return plugins.some(plugin => {\r\n    if (Array.isArray(plugin)) {\r\n      return plugin[0] === name;\r\n    } else {\r\n      return plugin === name;\r\n    }\r\n  });\r\n}\r\nfunction getPluginOption(plugins, name, option) {\r\n  const plugin = plugins.find(plugin => {\r\n    if (Array.isArray(plugin)) {\r\n      return plugin[0] === name;\r\n    } else {\r\n      return plugin === name;\r\n    }\r\n  });\r\n\r\n  if (plugin && Array.isArray(plugin)) {\r\n    return plugin[1][option];\r\n  }\r\n\r\n  return null;\r\n}\r\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\r\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\r\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\r\nfunction validatePlugins(plugins) {\r\n  if (hasPlugin(plugins, \"decorators\")) {\r\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\r\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\r\n    }\r\n\r\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\r\n\r\n    if (decoratorsBeforeExport == null) {\r\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\r\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\r\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\r\n    }\r\n  }\r\n\r\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\r\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\r\n  }\r\n\r\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\r\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\r\n  }\r\n\r\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\r\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\r\n\r\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\r\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\r\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\r\n    }\r\n\r\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\r\n\r\n    if (proposal === \"hack\") {\r\n      if (hasPlugin(plugins, \"placeholders\")) {\r\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\r\n      }\r\n\r\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\r\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\r\n      }\r\n\r\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\r\n\r\n      if (!TOPIC_TOKENS.includes(topicToken)) {\r\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\r\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\r\n      }\r\n\r\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\r\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\r\n      }\r\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\r\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\r\n    }\r\n  }\r\n\r\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\r\n    {\r\n      if (hasPlugin(plugins, \"importAssertions\")) {\r\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\r\n      }\r\n\r\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\r\n\r\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\r\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\r\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\r\n  }\r\n\r\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\r\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\r\n    error.missingPlugins = \"doExpressions\";\r\n    throw error;\r\n  }\r\n}\r\nconst mixinPlugins = {\r\n  estree,\r\n  jsx,\r\n  flow,\r\n  typescript,\r\n  v8intrinsic,\r\n  placeholders\r\n};\r\nconst mixinPluginNames = Object.keys(mixinPlugins);\r\n\r\nconst defaultOptions = {\r\n  sourceType: \"script\",\r\n  sourceFilename: undefined,\r\n  startColumn: 0,\r\n  startLine: 1,\r\n  allowAwaitOutsideFunction: false,\r\n  allowReturnOutsideFunction: false,\r\n  allowImportExportEverywhere: false,\r\n  allowSuperOutsideMethod: false,\r\n  allowUndeclaredExports: false,\r\n  plugins: [],\r\n  strictMode: null,\r\n  ranges: false,\r\n  tokens: false,\r\n  createParenthesizedExpressions: false,\r\n  errorRecovery: false,\r\n  attachComment: true\r\n};\r\nfunction getOptions(opts) {\r\n  const options = {};\r\n\r\n  for (const key of Object.keys(defaultOptions)) {\r\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\nconst unwrapParenthesizedExpression = node => {\r\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\r\n};\r\n\r\nclass LValParser extends NodeUtils {\r\n  toAssignable(node, isLHS = false) {\r\n    var _node$extra, _node$extra3;\r\n\r\n    let parenthesized = undefined;\r\n\r\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\r\n      parenthesized = unwrapParenthesizedExpression(node);\r\n\r\n      if (isLHS) {\r\n        if (parenthesized.type === \"Identifier\") {\r\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\r\n        } else if (parenthesized.type !== \"MemberExpression\") {\r\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\r\n        }\r\n      } else {\r\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\r\n      }\r\n    }\r\n\r\n    switch (node.type) {\r\n      case \"Identifier\":\r\n      case \"ObjectPattern\":\r\n      case \"ArrayPattern\":\r\n      case \"AssignmentPattern\":\r\n      case \"RestElement\":\r\n        break;\r\n\r\n      case \"ObjectExpression\":\r\n        node.type = \"ObjectPattern\";\r\n\r\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\r\n          var _node$extra2;\r\n\r\n          const prop = node.properties[i];\r\n          const isLast = i === last;\r\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\r\n\r\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\r\n            this.raiseRestNotLast(node.extra.trailingComma);\r\n          }\r\n        }\r\n\r\n        break;\r\n\r\n      case \"ObjectProperty\":\r\n        this.toAssignable(node.value, isLHS);\r\n        break;\r\n\r\n      case \"SpreadElement\":\r\n        {\r\n          this.checkToRestConversion(node);\r\n          node.type = \"RestElement\";\r\n          const arg = node.argument;\r\n          this.toAssignable(arg, isLHS);\r\n          break;\r\n        }\r\n\r\n      case \"ArrayExpression\":\r\n        node.type = \"ArrayPattern\";\r\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\r\n        break;\r\n\r\n      case \"AssignmentExpression\":\r\n        if (node.operator !== \"=\") {\r\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\r\n        }\r\n\r\n        node.type = \"AssignmentPattern\";\r\n        delete node.operator;\r\n        this.toAssignable(node.left, isLHS);\r\n        break;\r\n\r\n      case \"ParenthesizedExpression\":\r\n        this.toAssignable(parenthesized, isLHS);\r\n        break;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\r\n    if (prop.type === \"ObjectMethod\") {\r\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\r\n      this.raise(prop.key.start, error);\r\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\r\n      this.raiseRestNotLast(prop.start);\r\n    } else {\r\n      this.toAssignable(prop, isLHS);\r\n    }\r\n  }\r\n\r\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\r\n    let end = exprList.length;\r\n\r\n    if (end) {\r\n      const last = exprList[end - 1];\r\n\r\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\r\n        --end;\r\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\r\n        last.type = \"RestElement\";\r\n        let arg = last.argument;\r\n        this.toAssignable(arg, isLHS);\r\n        arg = unwrapParenthesizedExpression(arg);\r\n\r\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\r\n          this.unexpected(arg.start);\r\n        }\r\n\r\n        if (trailingCommaPos) {\r\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\r\n        }\r\n\r\n        --end;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < end; i++) {\r\n      const elt = exprList[i];\r\n\r\n      if (elt) {\r\n        this.toAssignable(elt, isLHS);\r\n\r\n        if (elt.type === \"RestElement\") {\r\n          this.raiseRestNotLast(elt.start);\r\n        }\r\n      }\r\n    }\r\n\r\n    return exprList;\r\n  }\r\n\r\n  isAssignable(node, isBinding) {\r\n    switch (node.type) {\r\n      case \"Identifier\":\r\n      case \"ObjectPattern\":\r\n      case \"ArrayPattern\":\r\n      case \"AssignmentPattern\":\r\n      case \"RestElement\":\r\n        return true;\r\n\r\n      case \"ObjectExpression\":\r\n        {\r\n          const last = node.properties.length - 1;\r\n          return node.properties.every((prop, i) => {\r\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\r\n          });\r\n        }\r\n\r\n      case \"ObjectProperty\":\r\n        return this.isAssignable(node.value);\r\n\r\n      case \"SpreadElement\":\r\n        return this.isAssignable(node.argument);\r\n\r\n      case \"ArrayExpression\":\r\n        return node.elements.every(element => element === null || this.isAssignable(element));\r\n\r\n      case \"AssignmentExpression\":\r\n        return node.operator === \"=\";\r\n\r\n      case \"ParenthesizedExpression\":\r\n        return this.isAssignable(node.expression);\r\n\r\n      case \"MemberExpression\":\r\n      case \"OptionalMemberExpression\":\r\n        return !isBinding;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  toReferencedList(exprList, isParenthesizedExpr) {\r\n    return exprList;\r\n  }\r\n\r\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\r\n    this.toReferencedList(exprList, isParenthesizedExpr);\r\n\r\n    for (const expr of exprList) {\r\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\r\n        this.toReferencedListDeep(expr.elements);\r\n      }\r\n    }\r\n  }\r\n\r\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\r\n    const node = this.startNode();\r\n    this.next();\r\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\r\n    return this.finishNode(node, \"SpreadElement\");\r\n  }\r\n\r\n  parseRestBinding() {\r\n    const node = this.startNode();\r\n    this.next();\r\n    node.argument = this.parseBindingAtom();\r\n    return this.finishNode(node, \"RestElement\");\r\n  }\r\n\r\n  parseBindingAtom() {\r\n    switch (this.state.type) {\r\n      case 0:\r\n        {\r\n          const node = this.startNode();\r\n          this.next();\r\n          node.elements = this.parseBindingList(3, 93, true);\r\n          return this.finishNode(node, \"ArrayPattern\");\r\n        }\r\n\r\n      case 5:\r\n        return this.parseObjectLike(8, true);\r\n    }\r\n\r\n    return this.parseIdentifier();\r\n  }\r\n\r\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\r\n    const elts = [];\r\n    let first = true;\r\n\r\n    while (!this.eat(close)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        this.expect(12);\r\n      }\r\n\r\n      if (allowEmpty && this.match(12)) {\r\n        elts.push(null);\r\n      } else if (this.eat(close)) {\r\n        break;\r\n      } else if (this.match(21)) {\r\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\r\n        this.checkCommaAfterRest(closeCharCode);\r\n        this.expect(close);\r\n        break;\r\n      } else {\r\n        const decorators = [];\r\n\r\n        if (this.match(24) && this.hasPlugin(\"decorators\")) {\r\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\r\n        }\r\n\r\n        while (this.match(24)) {\r\n          decorators.push(this.parseDecorator());\r\n        }\r\n\r\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\r\n      }\r\n    }\r\n\r\n    return elts;\r\n  }\r\n\r\n  parseBindingRestProperty(prop) {\r\n    this.next();\r\n    prop.argument = this.parseIdentifier();\r\n    this.checkCommaAfterRest(125);\r\n    return this.finishNode(prop, \"RestElement\");\r\n  }\r\n\r\n  parseBindingProperty() {\r\n    const prop = this.startNode();\r\n    const {\r\n      type,\r\n      start: startPos,\r\n      startLoc\r\n    } = this.state;\r\n\r\n    if (type === 21) {\r\n      return this.parseBindingRestProperty(prop);\r\n    } else {\r\n      this.parsePropertyName(prop);\r\n    }\r\n\r\n    prop.method = false;\r\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\r\n    return prop;\r\n  }\r\n\r\n  parseAssignableListItem(allowModifiers, decorators) {\r\n    const left = this.parseMaybeDefault();\r\n    this.parseAssignableListItemTypes(left);\r\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\r\n\r\n    if (decorators.length) {\r\n      left.decorators = decorators;\r\n    }\r\n\r\n    return elt;\r\n  }\r\n\r\n  parseAssignableListItemTypes(param) {\r\n    return param;\r\n  }\r\n\r\n  parseMaybeDefault(startPos, startLoc, left) {\r\n    var _startLoc, _startPos, _left;\r\n\r\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\r\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\r\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\r\n    if (!this.eat(27)) return left;\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    node.left = left;\r\n    node.right = this.parseMaybeAssignAllowIn();\r\n    return this.finishNode(node, \"AssignmentPattern\");\r\n  }\r\n\r\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\r\n    switch (expr.type) {\r\n      case \"Identifier\":\r\n        {\r\n          const {\r\n            name\r\n          } = expr;\r\n\r\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\r\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\r\n          }\r\n\r\n          if (checkClashes) {\r\n            if (checkClashes.has(name)) {\r\n              this.raise(expr.start, ErrorMessages.ParamDupe);\r\n            } else {\r\n              checkClashes.add(name);\r\n            }\r\n          }\r\n\r\n          if (disallowLetBinding && name === \"let\") {\r\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\r\n          }\r\n\r\n          if (!(bindingType & BIND_NONE)) {\r\n            this.scope.declareName(name, bindingType, expr.start);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n      case \"MemberExpression\":\r\n        if (bindingType !== BIND_NONE) {\r\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"ObjectPattern\":\r\n        for (let prop of expr.properties) {\r\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\r\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\r\n        }\r\n\r\n        break;\r\n\r\n      case \"ArrayPattern\":\r\n        for (const elem of expr.elements) {\r\n          if (elem) {\r\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\r\n          }\r\n        }\r\n\r\n        break;\r\n\r\n      case \"AssignmentPattern\":\r\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\r\n        break;\r\n\r\n      case \"RestElement\":\r\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\r\n        break;\r\n\r\n      case \"ParenthesizedExpression\":\r\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\r\n        break;\r\n\r\n      default:\r\n        {\r\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\r\n        }\r\n    }\r\n  }\r\n\r\n  checkToRestConversion(node) {\r\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\r\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\r\n    }\r\n  }\r\n\r\n  checkCommaAfterRest(close) {\r\n    if (this.match(12)) {\r\n      if (this.lookaheadCharCode() === close) {\r\n        this.raiseTrailingCommaAfterRest(this.state.start);\r\n      } else {\r\n        this.raiseRestNotLast(this.state.start);\r\n      }\r\n    }\r\n  }\r\n\r\n  raiseRestNotLast(pos) {\r\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\r\n  }\r\n\r\n  raiseTrailingCommaAfterRest(pos) {\r\n    this.raise(pos, ErrorMessages.RestTrailingComma);\r\n  }\r\n\r\n}\r\n\r\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\r\nclass ExpressionParser extends LValParser {\r\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\r\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\r\n      return;\r\n    }\r\n\r\n    const key = prop.key;\r\n    const name = key.type === \"Identifier\" ? key.name : key.value;\r\n\r\n    if (name === \"__proto__\") {\r\n      if (isRecord) {\r\n        this.raise(key.start, ErrorMessages.RecordNoProto);\r\n        return;\r\n      }\r\n\r\n      if (protoRef.used) {\r\n        if (refExpressionErrors) {\r\n          if (refExpressionErrors.doubleProto === -1) {\r\n            refExpressionErrors.doubleProto = key.start;\r\n          }\r\n        } else {\r\n          this.raise(key.start, ErrorMessages.DuplicateProto);\r\n        }\r\n      }\r\n\r\n      protoRef.used = true;\r\n    }\r\n  }\r\n\r\n  shouldExitDescending(expr, potentialArrowAt) {\r\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\r\n  }\r\n\r\n  getExpression() {\r\n    this.enterInitialScopes();\r\n    this.nextToken();\r\n    const expr = this.parseExpression();\r\n\r\n    if (!this.match(129)) {\r\n      this.unexpected();\r\n    }\r\n\r\n    this.finalizeRemainingComments();\r\n    expr.comments = this.state.comments;\r\n    expr.errors = this.state.errors;\r\n\r\n    if (this.options.tokens) {\r\n      expr.tokens = this.tokens;\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  parseExpression(disallowIn, refExpressionErrors) {\r\n    if (disallowIn) {\r\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\r\n    }\r\n\r\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\r\n  }\r\n\r\n  parseExpressionBase(refExpressionErrors) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const expr = this.parseMaybeAssign(refExpressionErrors);\r\n\r\n    if (this.match(12)) {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.expressions = [expr];\r\n\r\n      while (this.eat(12)) {\r\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\r\n      }\r\n\r\n      this.toReferencedList(node.expressions);\r\n      return this.finishNode(node, \"SequenceExpression\");\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\r\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\r\n  }\r\n\r\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\r\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\r\n  }\r\n\r\n  setOptionalParametersError(refExpressionErrors, resultError) {\r\n    var _resultError$pos;\r\n\r\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\r\n  }\r\n\r\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n\r\n    if (this.isContextual(99)) {\r\n      if (this.prodParam.hasYield) {\r\n        let left = this.parseYield();\r\n\r\n        if (afterLeftParse) {\r\n          left = afterLeftParse.call(this, left, startPos, startLoc);\r\n        }\r\n\r\n        return left;\r\n      }\r\n    }\r\n\r\n    let ownExpressionErrors;\r\n\r\n    if (refExpressionErrors) {\r\n      ownExpressionErrors = false;\r\n    } else {\r\n      refExpressionErrors = new ExpressionErrors();\r\n      ownExpressionErrors = true;\r\n    }\r\n\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (type === 10 || tokenIsIdentifier(type)) {\r\n      this.state.potentialArrowAt = this.state.start;\r\n    }\r\n\r\n    let left = this.parseMaybeConditional(refExpressionErrors);\r\n\r\n    if (afterLeftParse) {\r\n      left = afterLeftParse.call(this, left, startPos, startLoc);\r\n    }\r\n\r\n    if (tokenIsAssignment(this.state.type)) {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      const operator = this.state.value;\r\n      node.operator = operator;\r\n\r\n      if (this.match(27)) {\r\n        node.left = this.toAssignable(left, true);\r\n\r\n        if (refExpressionErrors.doubleProto >= startPos) {\r\n          refExpressionErrors.doubleProto = -1;\r\n        }\r\n\r\n        if (refExpressionErrors.shorthandAssign >= startPos) {\r\n          refExpressionErrors.shorthandAssign = -1;\r\n        }\r\n      } else {\r\n        node.left = left;\r\n      }\r\n\r\n      this.checkLVal(left, \"assignment expression\");\r\n      this.next();\r\n      node.right = this.parseMaybeAssign();\r\n      return this.finishNode(node, \"AssignmentExpression\");\r\n    } else if (ownExpressionErrors) {\r\n      this.checkExpressionErrors(refExpressionErrors, true);\r\n    }\r\n\r\n    return left;\r\n  }\r\n\r\n  parseMaybeConditional(refExpressionErrors) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const potentialArrowAt = this.state.potentialArrowAt;\r\n    const expr = this.parseExprOps(refExpressionErrors);\r\n\r\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\r\n      return expr;\r\n    }\r\n\r\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\r\n  }\r\n\r\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\r\n    if (this.eat(17)) {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.test = expr;\r\n      node.consequent = this.parseMaybeAssignAllowIn();\r\n      this.expect(14);\r\n      node.alternate = this.parseMaybeAssign();\r\n      return this.finishNode(node, \"ConditionalExpression\");\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\r\n    return this.match(128) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\r\n  }\r\n\r\n  parseExprOps(refExpressionErrors) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const potentialArrowAt = this.state.potentialArrowAt;\r\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\r\n\r\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\r\n      return expr;\r\n    }\r\n\r\n    return this.parseExprOp(expr, startPos, startLoc, -1);\r\n  }\r\n\r\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\r\n    if (this.isPrivateName(left)) {\r\n      const value = this.getPrivateNameSV(left);\r\n      const {\r\n        start\r\n      } = left;\r\n\r\n      if (minPrec >= tokenOperatorPrecedence(52) || !this.prodParam.hasIn || !this.match(52)) {\r\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\r\n      }\r\n\r\n      this.classScope.usePrivateName(value, start);\r\n    }\r\n\r\n    const op = this.state.type;\r\n\r\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(52))) {\r\n      let prec = tokenOperatorPrecedence(op);\r\n\r\n      if (prec > minPrec) {\r\n        if (op === 35) {\r\n          this.expectPlugin(\"pipelineOperator\");\r\n\r\n          if (this.state.inFSharpPipelineDirectBody) {\r\n            return left;\r\n          }\r\n\r\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\r\n        }\r\n\r\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\r\n        node.left = left;\r\n        node.operator = this.state.value;\r\n        const logical = op === 37 || op === 38;\r\n        const coalesce = op === 36;\r\n\r\n        if (coalesce) {\r\n          prec = tokenOperatorPrecedence(38);\r\n        }\r\n\r\n        this.next();\r\n\r\n        if (op === 35 && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\r\n          if (this.state.type === 90 && this.prodParam.hasAwait) {\r\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\r\n          }\r\n        }\r\n\r\n        node.right = this.parseExprOpRightExpr(op, prec);\r\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\r\n        const nextOp = this.state.type;\r\n\r\n        if (coalesce && (nextOp === 37 || nextOp === 38) || logical && nextOp === 36) {\r\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\r\n        }\r\n\r\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\r\n      }\r\n    }\r\n\r\n    return left;\r\n  }\r\n\r\n  parseExprOpRightExpr(op, prec) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n\r\n    switch (op) {\r\n      case 35:\r\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\r\n          case \"hack\":\r\n            return this.withTopicBindingContext(() => {\r\n              return this.parseHackPipeBody();\r\n            });\r\n\r\n          case \"smart\":\r\n            return this.withTopicBindingContext(() => {\r\n              if (this.prodParam.hasYield && this.isContextual(99)) {\r\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\r\n              }\r\n\r\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\r\n            });\r\n\r\n          case \"fsharp\":\r\n            return this.withSoloAwaitPermittingContext(() => {\r\n              return this.parseFSharpPipelineBody(prec);\r\n            });\r\n        }\r\n\r\n      default:\r\n        return this.parseExprOpBaseRightExpr(op, prec);\r\n    }\r\n  }\r\n\r\n  parseExprOpBaseRightExpr(op, prec) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\r\n  }\r\n\r\n  parseHackPipeBody() {\r\n    var _body$extra;\r\n\r\n    const {\r\n      start\r\n    } = this.state;\r\n    const body = this.parseMaybeAssign();\r\n\r\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\r\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\r\n    }\r\n\r\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\r\n      this.raise(start, ErrorMessages.PipeTopicUnused);\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  checkExponentialAfterUnary(node) {\r\n    if (this.match(51)) {\r\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\r\n    }\r\n  }\r\n\r\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const isAwait = this.isContextual(90);\r\n\r\n    if (isAwait && this.isAwaitAllowed()) {\r\n      this.next();\r\n      const expr = this.parseAwait(startPos, startLoc);\r\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\r\n      return expr;\r\n    }\r\n\r\n    const update = this.match(32);\r\n    const node = this.startNode();\r\n\r\n    if (tokenIsPrefix(this.state.type)) {\r\n      node.operator = this.state.value;\r\n      node.prefix = true;\r\n\r\n      if (this.match(66)) {\r\n        this.expectPlugin(\"throwExpressions\");\r\n      }\r\n\r\n      const isDelete = this.match(83);\r\n      this.next();\r\n      node.argument = this.parseMaybeUnary(null, true);\r\n      this.checkExpressionErrors(refExpressionErrors, true);\r\n\r\n      if (this.state.strict && isDelete) {\r\n        const arg = node.argument;\r\n\r\n        if (arg.type === \"Identifier\") {\r\n          this.raise(node.start, ErrorMessages.StrictDelete);\r\n        } else if (this.hasPropertyAsPrivateName(arg)) {\r\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\r\n        }\r\n      }\r\n\r\n      if (!update) {\r\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\r\n        return this.finishNode(node, \"UnaryExpression\");\r\n      }\r\n    }\r\n\r\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\r\n\r\n    if (isAwait) {\r\n      const {\r\n        type\r\n      } = this.state;\r\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(48);\r\n\r\n      if (startsExpr && !this.isAmbiguousAwait()) {\r\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\r\n        return this.parseAwait(startPos, startLoc);\r\n      }\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  parseUpdate(node, update, refExpressionErrors) {\r\n    if (update) {\r\n      this.checkLVal(node.argument, \"prefix operation\");\r\n      return this.finishNode(node, \"UpdateExpression\");\r\n    }\r\n\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    let expr = this.parseExprSubscripts(refExpressionErrors);\r\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\r\n\r\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\r\n      const node = this.startNodeAt(startPos, startLoc);\r\n      node.operator = this.state.value;\r\n      node.prefix = false;\r\n      node.argument = expr;\r\n      this.checkLVal(expr, \"postfix operation\");\r\n      this.next();\r\n      expr = this.finishNode(node, \"UpdateExpression\");\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  parseExprSubscripts(refExpressionErrors) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    const potentialArrowAt = this.state.potentialArrowAt;\r\n    const expr = this.parseExprAtom(refExpressionErrors);\r\n\r\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\r\n      return expr;\r\n    }\r\n\r\n    return this.parseSubscripts(expr, startPos, startLoc);\r\n  }\r\n\r\n  parseSubscripts(base, startPos, startLoc, noCalls) {\r\n    const state = {\r\n      optionalChainMember: false,\r\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\r\n      stop: false\r\n    };\r\n\r\n    do {\r\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\r\n      state.maybeAsyncArrow = false;\r\n    } while (!state.stop);\r\n\r\n    return base;\r\n  }\r\n\r\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\r\n    if (!noCalls && this.eat(15)) {\r\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\r\n    } else if (this.match(22)) {\r\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\r\n    }\r\n\r\n    let optional = false;\r\n\r\n    if (this.match(18)) {\r\n      if (noCalls && this.lookaheadCharCode() === 40) {\r\n        state.stop = true;\r\n        return base;\r\n      }\r\n\r\n      state.optionalChainMember = optional = true;\r\n      this.next();\r\n    }\r\n\r\n    if (!noCalls && this.match(10)) {\r\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\r\n    } else {\r\n      const computed = this.eat(0);\r\n\r\n      if (computed || optional || this.eat(16)) {\r\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\r\n      } else {\r\n        state.stop = true;\r\n        return base;\r\n      }\r\n    }\r\n  }\r\n\r\n  parseMember(base, startPos, startLoc, state, computed, optional) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    node.object = base;\r\n    node.computed = computed;\r\n    const privateName = !computed && this.match(128) && this.state.value;\r\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\r\n\r\n    if (privateName !== false) {\r\n      if (node.object.type === \"Super\") {\r\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\r\n      }\r\n\r\n      this.classScope.usePrivateName(privateName, property.start);\r\n    }\r\n\r\n    node.property = property;\r\n\r\n    if (computed) {\r\n      this.expect(3);\r\n    }\r\n\r\n    if (state.optionalChainMember) {\r\n      node.optional = optional;\r\n      return this.finishNode(node, \"OptionalMemberExpression\");\r\n    } else {\r\n      return this.finishNode(node, \"MemberExpression\");\r\n    }\r\n  }\r\n\r\n  parseBind(base, startPos, startLoc, noCalls, state) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    node.object = base;\r\n    node.callee = this.parseNoCallExpr();\r\n    state.stop = true;\r\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\r\n  }\r\n\r\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\r\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\r\n    let refExpressionErrors = null;\r\n    this.state.maybeInArrowParameters = true;\r\n    this.next();\r\n    let node = this.startNodeAt(startPos, startLoc);\r\n    node.callee = base;\r\n\r\n    if (state.maybeAsyncArrow) {\r\n      this.expressionScope.enter(newAsyncArrowScope());\r\n      refExpressionErrors = new ExpressionErrors();\r\n    }\r\n\r\n    if (state.optionalChainMember) {\r\n      node.optional = optional;\r\n    }\r\n\r\n    if (optional) {\r\n      node.arguments = this.parseCallExpressionArguments(11);\r\n    } else {\r\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\r\n    }\r\n\r\n    this.finishCallExpression(node, state.optionalChainMember);\r\n\r\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\r\n      state.stop = true;\r\n      this.expressionScope.validateAsPattern();\r\n      this.expressionScope.exit();\r\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\r\n    } else {\r\n      if (state.maybeAsyncArrow) {\r\n        this.checkExpressionErrors(refExpressionErrors, true);\r\n        this.expressionScope.exit();\r\n      }\r\n\r\n      this.toReferencedArguments(node);\r\n    }\r\n\r\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\r\n    return node;\r\n  }\r\n\r\n  toReferencedArguments(node, isParenthesizedExpr) {\r\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\r\n  }\r\n\r\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    node.tag = base;\r\n    node.quasi = this.parseTemplate(true);\r\n\r\n    if (state.optionalChainMember) {\r\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\r\n    }\r\n\r\n    return this.finishNode(node, \"TaggedTemplateExpression\");\r\n  }\r\n\r\n  atPossibleAsyncArrow(base) {\r\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\r\n  }\r\n\r\n  finishCallExpression(node, optional) {\r\n    if (node.callee.type === \"Import\") {\r\n      if (node.arguments.length === 2) {\r\n        {\r\n          if (!this.hasPlugin(\"moduleAttributes\")) {\r\n            this.expectPlugin(\"importAssertions\");\r\n          }\r\n        }\r\n      }\r\n\r\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\r\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\r\n      } else {\r\n        for (const arg of node.arguments) {\r\n          if (arg.type === \"SpreadElement\") {\r\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\r\n  }\r\n\r\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\r\n    const elts = [];\r\n    let first = true;\r\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\r\n    this.state.inFSharpPipelineDirectBody = false;\r\n\r\n    while (!this.eat(close)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        this.expect(12);\r\n\r\n        if (this.match(close)) {\r\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\r\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\r\n          }\r\n\r\n          if (nodeForExtra) {\r\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\r\n          }\r\n\r\n          this.next();\r\n          break;\r\n        }\r\n      }\r\n\r\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\r\n    }\r\n\r\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\r\n    return elts;\r\n  }\r\n\r\n  shouldParseAsyncArrow() {\r\n    return this.match(19) && !this.canInsertSemicolon();\r\n  }\r\n\r\n  parseAsyncArrowFromCallExpression(node, call) {\r\n    var _call$extra;\r\n\r\n    this.resetPreviousNodeTrailingComments(call);\r\n    this.expect(19);\r\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\r\n\r\n    if (call.innerComments) {\r\n      setInnerComments(node, call.innerComments);\r\n    }\r\n\r\n    if (call.callee.trailingComments) {\r\n      setInnerComments(node, call.callee.trailingComments);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  parseNoCallExpr() {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\r\n  }\r\n\r\n  parseExprAtom(refExpressionErrors) {\r\n    let node;\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    switch (type) {\r\n      case 73:\r\n        return this.parseSuper();\r\n\r\n      case 77:\r\n        node = this.startNode();\r\n        this.next();\r\n\r\n        if (this.match(16)) {\r\n          return this.parseImportMetaProperty(node);\r\n        }\r\n\r\n        if (!this.match(10)) {\r\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\r\n        }\r\n\r\n        return this.finishNode(node, \"Import\");\r\n\r\n      case 72:\r\n        node = this.startNode();\r\n        this.next();\r\n        return this.finishNode(node, \"ThisExpression\");\r\n\r\n      case 84:\r\n        {\r\n          return this.parseDo(this.startNode(), false);\r\n        }\r\n\r\n      case 50:\r\n      case 29:\r\n        {\r\n          this.readRegexp();\r\n          return this.parseRegExpLiteral(this.state.value);\r\n        }\r\n\r\n      case 124:\r\n        return this.parseNumericLiteral(this.state.value);\r\n\r\n      case 125:\r\n        return this.parseBigIntLiteral(this.state.value);\r\n\r\n      case 126:\r\n        return this.parseDecimalLiteral(this.state.value);\r\n\r\n      case 123:\r\n        return this.parseStringLiteral(this.state.value);\r\n\r\n      case 78:\r\n        return this.parseNullLiteral();\r\n\r\n      case 79:\r\n        return this.parseBooleanLiteral(true);\r\n\r\n      case 80:\r\n        return this.parseBooleanLiteral(false);\r\n\r\n      case 10:\r\n        {\r\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\r\n          return this.parseParenAndDistinguishExpression(canBeArrow);\r\n        }\r\n\r\n      case 2:\r\n      case 1:\r\n        {\r\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\r\n        }\r\n\r\n      case 0:\r\n        {\r\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\r\n        }\r\n\r\n      case 6:\r\n      case 7:\r\n        {\r\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\r\n        }\r\n\r\n      case 5:\r\n        {\r\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\r\n        }\r\n\r\n      case 62:\r\n        return this.parseFunctionOrFunctionSent();\r\n\r\n      case 24:\r\n        this.parseDecorators();\r\n\r\n      case 74:\r\n        node = this.startNode();\r\n        this.takeDecorators(node);\r\n        return this.parseClass(node, false);\r\n\r\n      case 71:\r\n        return this.parseNewOrNewTarget();\r\n\r\n      case 22:\r\n        return this.parseTemplate(false);\r\n\r\n      case 15:\r\n        {\r\n          node = this.startNode();\r\n          this.next();\r\n          node.object = null;\r\n          const callee = node.callee = this.parseNoCallExpr();\r\n\r\n          if (callee.type === \"MemberExpression\") {\r\n            return this.finishNode(node, \"BindExpression\");\r\n          } else {\r\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\r\n          }\r\n        }\r\n\r\n      case 128:\r\n        {\r\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\r\n          return this.parsePrivateName();\r\n        }\r\n\r\n      case 31:\r\n        {\r\n          return this.parseTopicReferenceThenEqualsSign(48, \"%\");\r\n        }\r\n\r\n      case 30:\r\n        {\r\n          return this.parseTopicReferenceThenEqualsSign(40, \"^\");\r\n        }\r\n\r\n      case 40:\r\n      case 48:\r\n      case 25:\r\n        {\r\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\r\n\r\n          if (pipeProposal) {\r\n            return this.parseTopicReference(pipeProposal);\r\n          } else {\r\n            throw this.unexpected();\r\n          }\r\n        }\r\n\r\n      case 43:\r\n        {\r\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\r\n\r\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\r\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\r\n            break;\r\n          } else {\r\n            throw this.unexpected();\r\n          }\r\n        }\r\n\r\n      default:\r\n        if (tokenIsIdentifier(type)) {\r\n          if (this.isContextual(117) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\r\n            return this.parseModuleExpression();\r\n          }\r\n\r\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\r\n          const containsEsc = this.state.containsEsc;\r\n          const id = this.parseIdentifier();\r\n\r\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\r\n            const {\r\n              type\r\n            } = this.state;\r\n\r\n            if (type === 62) {\r\n              this.resetPreviousNodeTrailingComments(id);\r\n              this.next();\r\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\r\n            } else if (tokenIsIdentifier(type)) {\r\n              if (this.lookaheadCharCode() === 61) {\r\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\r\n              } else {\r\n                return id;\r\n              }\r\n            } else if (type === 84) {\r\n              this.resetPreviousNodeTrailingComments(id);\r\n              return this.parseDo(this.startNodeAtNode(id), true);\r\n            }\r\n          }\r\n\r\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\r\n            this.next();\r\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\r\n          }\r\n\r\n          return id;\r\n        } else {\r\n          throw this.unexpected();\r\n        }\r\n\r\n    }\r\n  }\r\n\r\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\r\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\r\n\r\n    if (pipeProposal) {\r\n      this.state.type = topicTokenType;\r\n      this.state.value = topicTokenValue;\r\n      this.state.pos--;\r\n      this.state.end--;\r\n      this.state.endLoc.column--;\r\n      return this.parseTopicReference(pipeProposal);\r\n    } else {\r\n      throw this.unexpected();\r\n    }\r\n  }\r\n\r\n  parseTopicReference(pipeProposal) {\r\n    const node = this.startNode();\r\n    const start = this.state.start;\r\n    const tokenType = this.state.type;\r\n    this.next();\r\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\r\n  }\r\n\r\n  finishTopicReference(node, start, pipeProposal, tokenType) {\r\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\r\n      let nodeType;\r\n\r\n      if (pipeProposal === \"smart\") {\r\n        nodeType = \"PipelinePrimaryTopicReference\";\r\n      } else {\r\n        nodeType = \"TopicReference\";\r\n      }\r\n\r\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\r\n        if (pipeProposal === \"smart\") {\r\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\r\n        } else {\r\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\r\n        }\r\n      }\r\n\r\n      this.registerTopicReference();\r\n      return this.finishNode(node, nodeType);\r\n    } else {\r\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\r\n    }\r\n  }\r\n\r\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\r\n    switch (pipeProposal) {\r\n      case \"hack\":\r\n        {\r\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\r\n          return tokenLabelName(tokenType) === pluginTopicToken;\r\n        }\r\n\r\n      case \"smart\":\r\n        return tokenType === 25;\r\n\r\n      default:\r\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\r\n    }\r\n  }\r\n\r\n  parseAsyncArrowUnaryFunction(node) {\r\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\r\n    const params = [this.parseIdentifier()];\r\n    this.prodParam.exit();\r\n\r\n    if (this.hasPrecedingLineBreak()) {\r\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\r\n    }\r\n\r\n    this.expect(19);\r\n    this.parseArrowExpression(node, params, true);\r\n    return node;\r\n  }\r\n\r\n  parseDo(node, isAsync) {\r\n    this.expectPlugin(\"doExpressions\");\r\n\r\n    if (isAsync) {\r\n      this.expectPlugin(\"asyncDoExpressions\");\r\n    }\r\n\r\n    node.async = isAsync;\r\n    this.next();\r\n    const oldLabels = this.state.labels;\r\n    this.state.labels = [];\r\n\r\n    if (isAsync) {\r\n      this.prodParam.enter(PARAM_AWAIT);\r\n      node.body = this.parseBlock();\r\n      this.prodParam.exit();\r\n    } else {\r\n      node.body = this.parseBlock();\r\n    }\r\n\r\n    this.state.labels = oldLabels;\r\n    return this.finishNode(node, \"DoExpression\");\r\n  }\r\n\r\n  parseSuper() {\r\n    const node = this.startNode();\r\n    this.next();\r\n\r\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\r\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\r\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\r\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\r\n    }\r\n\r\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\r\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\r\n    }\r\n\r\n    return this.finishNode(node, \"Super\");\r\n  }\r\n\r\n  parsePrivateName() {\r\n    const node = this.startNode();\r\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\r\n    const name = this.state.value;\r\n    this.next();\r\n    node.id = this.createIdentifier(id, name);\r\n    return this.finishNode(node, \"PrivateName\");\r\n  }\r\n\r\n  parseFunctionOrFunctionSent() {\r\n    const node = this.startNode();\r\n    this.next();\r\n\r\n    if (this.prodParam.hasYield && this.match(16)) {\r\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\r\n      this.next();\r\n\r\n      if (this.match(96)) {\r\n        this.expectPlugin(\"functionSent\");\r\n      } else if (!this.hasPlugin(\"functionSent\")) {\r\n        this.unexpected();\r\n      }\r\n\r\n      return this.parseMetaProperty(node, meta, \"sent\");\r\n    }\r\n\r\n    return this.parseFunction(node);\r\n  }\r\n\r\n  parseMetaProperty(node, meta, propertyName) {\r\n    node.meta = meta;\r\n    const containsEsc = this.state.containsEsc;\r\n    node.property = this.parseIdentifier(true);\r\n\r\n    if (node.property.name !== propertyName || containsEsc) {\r\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\r\n    }\r\n\r\n    return this.finishNode(node, \"MetaProperty\");\r\n  }\r\n\r\n  parseImportMetaProperty(node) {\r\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\r\n    this.next();\r\n\r\n    if (this.isContextual(94)) {\r\n      if (!this.inModule) {\r\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\r\n      }\r\n\r\n      this.sawUnambiguousESM = true;\r\n    }\r\n\r\n    return this.parseMetaProperty(node, id, \"meta\");\r\n  }\r\n\r\n  parseLiteralAtNode(value, type, node) {\r\n    this.addExtra(node, \"rawValue\", value);\r\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\r\n    node.value = value;\r\n    this.next();\r\n    return this.finishNode(node, type);\r\n  }\r\n\r\n  parseLiteral(value, type) {\r\n    const node = this.startNode();\r\n    return this.parseLiteralAtNode(value, type, node);\r\n  }\r\n\r\n  parseStringLiteral(value) {\r\n    return this.parseLiteral(value, \"StringLiteral\");\r\n  }\r\n\r\n  parseNumericLiteral(value) {\r\n    return this.parseLiteral(value, \"NumericLiteral\");\r\n  }\r\n\r\n  parseBigIntLiteral(value) {\r\n    return this.parseLiteral(value, \"BigIntLiteral\");\r\n  }\r\n\r\n  parseDecimalLiteral(value) {\r\n    return this.parseLiteral(value, \"DecimalLiteral\");\r\n  }\r\n\r\n  parseRegExpLiteral(value) {\r\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\r\n    node.pattern = value.pattern;\r\n    node.flags = value.flags;\r\n    return node;\r\n  }\r\n\r\n  parseBooleanLiteral(value) {\r\n    const node = this.startNode();\r\n    node.value = value;\r\n    this.next();\r\n    return this.finishNode(node, \"BooleanLiteral\");\r\n  }\r\n\r\n  parseNullLiteral() {\r\n    const node = this.startNode();\r\n    this.next();\r\n    return this.finishNode(node, \"NullLiteral\");\r\n  }\r\n\r\n  parseParenAndDistinguishExpression(canBeArrow) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    let val;\r\n    this.next();\r\n    this.expressionScope.enter(newArrowHeadScope());\r\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\r\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\r\n    this.state.maybeInArrowParameters = true;\r\n    this.state.inFSharpPipelineDirectBody = false;\r\n    const innerStartPos = this.state.start;\r\n    const innerStartLoc = this.state.startLoc;\r\n    const exprList = [];\r\n    const refExpressionErrors = new ExpressionErrors();\r\n    let first = true;\r\n    let spreadStart;\r\n    let optionalCommaStart;\r\n\r\n    while (!this.match(11)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        this.expect(12, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\r\n\r\n        if (this.match(11)) {\r\n          optionalCommaStart = this.state.start;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (this.match(21)) {\r\n        const spreadNodeStartPos = this.state.start;\r\n        const spreadNodeStartLoc = this.state.startLoc;\r\n        spreadStart = this.state.start;\r\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\r\n        this.checkCommaAfterRest(41);\r\n        break;\r\n      } else {\r\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\r\n      }\r\n    }\r\n\r\n    const innerEndPos = this.state.lastTokEnd;\r\n    const innerEndLoc = this.state.lastTokEndLoc;\r\n    this.expect(11);\r\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\r\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\r\n    let arrowNode = this.startNodeAt(startPos, startLoc);\r\n\r\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\r\n      this.expressionScope.validateAsPattern();\r\n      this.expressionScope.exit();\r\n      this.parseArrowExpression(arrowNode, exprList, false);\r\n      return arrowNode;\r\n    }\r\n\r\n    this.expressionScope.exit();\r\n\r\n    if (!exprList.length) {\r\n      this.unexpected(this.state.lastTokStart);\r\n    }\r\n\r\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\r\n    if (spreadStart) this.unexpected(spreadStart);\r\n    this.checkExpressionErrors(refExpressionErrors, true);\r\n    this.toReferencedListDeep(exprList, true);\r\n\r\n    if (exprList.length > 1) {\r\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\r\n      val.expressions = exprList;\r\n      this.finishNode(val, \"SequenceExpression\");\r\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\r\n    } else {\r\n      val = exprList[0];\r\n    }\r\n\r\n    if (!this.options.createParenthesizedExpressions) {\r\n      this.addExtra(val, \"parenthesized\", true);\r\n      this.addExtra(val, \"parenStart\", startPos);\r\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\r\n      return val;\r\n    }\r\n\r\n    const parenExpression = this.startNodeAt(startPos, startLoc);\r\n    parenExpression.expression = val;\r\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\r\n    return parenExpression;\r\n  }\r\n\r\n  shouldParseArrow(params) {\r\n    return !this.canInsertSemicolon();\r\n  }\r\n\r\n  parseArrow(node) {\r\n    if (this.eat(19)) {\r\n      return node;\r\n    }\r\n  }\r\n\r\n  parseParenItem(node, startPos, startLoc) {\r\n    return node;\r\n  }\r\n\r\n  parseNewOrNewTarget() {\r\n    const node = this.startNode();\r\n    this.next();\r\n\r\n    if (this.match(16)) {\r\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\r\n      this.next();\r\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\r\n\r\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\r\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\r\n      }\r\n\r\n      return metaProp;\r\n    }\r\n\r\n    return this.parseNew(node);\r\n  }\r\n\r\n  parseNew(node) {\r\n    node.callee = this.parseNoCallExpr();\r\n\r\n    if (node.callee.type === \"Import\") {\r\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\r\n    } else if (this.isOptionalChain(node.callee)) {\r\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\r\n    } else if (this.eat(18)) {\r\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\r\n    }\r\n\r\n    this.parseNewArguments(node);\r\n    return this.finishNode(node, \"NewExpression\");\r\n  }\r\n\r\n  parseNewArguments(node) {\r\n    if (this.eat(10)) {\r\n      const args = this.parseExprList(11);\r\n      this.toReferencedList(args);\r\n      node.arguments = args;\r\n    } else {\r\n      node.arguments = [];\r\n    }\r\n  }\r\n\r\n  parseTemplateElement(isTagged) {\r\n    const elem = this.startNode();\r\n\r\n    if (this.state.value === null) {\r\n      if (!isTagged) {\r\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\r\n      }\r\n    }\r\n\r\n    elem.value = {\r\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\r\n      cooked: this.state.value\r\n    };\r\n    this.next();\r\n    elem.tail = this.match(22);\r\n    return this.finishNode(elem, \"TemplateElement\");\r\n  }\r\n\r\n  parseTemplate(isTagged) {\r\n    const node = this.startNode();\r\n    this.next();\r\n    node.expressions = [];\r\n    let curElt = this.parseTemplateElement(isTagged);\r\n    node.quasis = [curElt];\r\n\r\n    while (!curElt.tail) {\r\n      this.expect(23);\r\n      node.expressions.push(this.parseTemplateSubstitution());\r\n      this.expect(8);\r\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\r\n    }\r\n\r\n    this.next();\r\n    return this.finishNode(node, \"TemplateLiteral\");\r\n  }\r\n\r\n  parseTemplateSubstitution() {\r\n    return this.parseExpression();\r\n  }\r\n\r\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\r\n    if (isRecord) {\r\n      this.expectPlugin(\"recordAndTuple\");\r\n    }\r\n\r\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\r\n    this.state.inFSharpPipelineDirectBody = false;\r\n    const propHash = Object.create(null);\r\n    let first = true;\r\n    const node = this.startNode();\r\n    node.properties = [];\r\n    this.next();\r\n\r\n    while (!this.match(close)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        this.expect(12);\r\n\r\n        if (this.match(close)) {\r\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\r\n          break;\r\n        }\r\n      }\r\n\r\n      let prop;\r\n\r\n      if (isPattern) {\r\n        prop = this.parseBindingProperty();\r\n      } else {\r\n        prop = this.parsePropertyDefinition(refExpressionErrors);\r\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\r\n      }\r\n\r\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\r\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\r\n      }\r\n\r\n      if (prop.shorthand) {\r\n        this.addExtra(prop, \"shorthand\", true);\r\n      }\r\n\r\n      node.properties.push(prop);\r\n    }\r\n\r\n    this.next();\r\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\r\n    let type = \"ObjectExpression\";\r\n\r\n    if (isPattern) {\r\n      type = \"ObjectPattern\";\r\n    } else if (isRecord) {\r\n      type = \"RecordExpression\";\r\n    }\r\n\r\n    return this.finishNode(node, type);\r\n  }\r\n\r\n  maybeAsyncOrAccessorProp(prop) {\r\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(49));\r\n  }\r\n\r\n  parsePropertyDefinition(refExpressionErrors) {\r\n    let decorators = [];\r\n\r\n    if (this.match(24)) {\r\n      if (this.hasPlugin(\"decorators\")) {\r\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\r\n      }\r\n\r\n      while (this.match(24)) {\r\n        decorators.push(this.parseDecorator());\r\n      }\r\n    }\r\n\r\n    const prop = this.startNode();\r\n    let isAsync = false;\r\n    let isAccessor = false;\r\n    let startPos;\r\n    let startLoc;\r\n\r\n    if (this.match(21)) {\r\n      if (decorators.length) this.unexpected();\r\n      return this.parseSpread();\r\n    }\r\n\r\n    if (decorators.length) {\r\n      prop.decorators = decorators;\r\n      decorators = [];\r\n    }\r\n\r\n    prop.method = false;\r\n\r\n    if (refExpressionErrors) {\r\n      startPos = this.state.start;\r\n      startLoc = this.state.startLoc;\r\n    }\r\n\r\n    let isGenerator = this.eat(49);\r\n    this.parsePropertyNamePrefixOperator(prop);\r\n    const containsEsc = this.state.containsEsc;\r\n    const key = this.parsePropertyName(prop);\r\n\r\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\r\n      const keyName = key.name;\r\n\r\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\r\n        isAsync = true;\r\n        this.resetPreviousNodeTrailingComments(key);\r\n        isGenerator = this.eat(49);\r\n        this.parsePropertyName(prop);\r\n      }\r\n\r\n      if (keyName === \"get\" || keyName === \"set\") {\r\n        isAccessor = true;\r\n        this.resetPreviousNodeTrailingComments(key);\r\n        prop.kind = keyName;\r\n\r\n        if (this.match(49)) {\r\n          isGenerator = true;\r\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\r\n          this.next();\r\n        }\r\n\r\n        this.parsePropertyName(prop);\r\n      }\r\n    }\r\n\r\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\r\n    return prop;\r\n  }\r\n\r\n  getGetterSetterExpectedParamCount(method) {\r\n    return method.kind === \"get\" ? 0 : 1;\r\n  }\r\n\r\n  getObjectOrClassMethodParams(method) {\r\n    return method.params;\r\n  }\r\n\r\n  checkGetterSetterParams(method) {\r\n    var _params;\r\n\r\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\r\n    const params = this.getObjectOrClassMethodParams(method);\r\n    const start = method.start;\r\n\r\n    if (params.length !== paramCount) {\r\n      if (method.kind === \"get\") {\r\n        this.raise(start, ErrorMessages.BadGetterArity);\r\n      } else {\r\n        this.raise(start, ErrorMessages.BadSetterArity);\r\n      }\r\n    }\r\n\r\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\r\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\r\n    }\r\n  }\r\n\r\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\r\n    if (isAccessor) {\r\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\r\n      this.checkGetterSetterParams(prop);\r\n      return prop;\r\n    }\r\n\r\n    if (isAsync || isGenerator || this.match(10)) {\r\n      if (isPattern) this.unexpected();\r\n      prop.kind = \"method\";\r\n      prop.method = true;\r\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\r\n    }\r\n  }\r\n\r\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\r\n    prop.shorthand = false;\r\n\r\n    if (this.eat(14)) {\r\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\r\n      return this.finishNode(prop, \"ObjectProperty\");\r\n    }\r\n\r\n    if (!prop.computed && prop.key.type === \"Identifier\") {\r\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\r\n\r\n      if (isPattern) {\r\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\r\n      } else if (this.match(27) && refExpressionErrors) {\r\n        if (refExpressionErrors.shorthandAssign === -1) {\r\n          refExpressionErrors.shorthandAssign = this.state.start;\r\n        }\r\n\r\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\r\n      } else {\r\n        prop.value = cloneIdentifier(prop.key);\r\n      }\r\n\r\n      prop.shorthand = true;\r\n      return this.finishNode(prop, \"ObjectProperty\");\r\n    }\r\n  }\r\n\r\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\r\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\r\n    if (!node) this.unexpected();\r\n    return node;\r\n  }\r\n\r\n  parsePropertyName(prop) {\r\n    if (this.eat(0)) {\r\n      prop.computed = true;\r\n      prop.key = this.parseMaybeAssignAllowIn();\r\n      this.expect(3);\r\n    } else {\r\n      const {\r\n        type,\r\n        value\r\n      } = this.state;\r\n      let key;\r\n\r\n      if (tokenIsKeywordOrIdentifier(type)) {\r\n        key = this.parseIdentifier(true);\r\n      } else {\r\n        switch (type) {\r\n          case 124:\r\n            key = this.parseNumericLiteral(value);\r\n            break;\r\n\r\n          case 123:\r\n            key = this.parseStringLiteral(value);\r\n            break;\r\n\r\n          case 125:\r\n            key = this.parseBigIntLiteral(value);\r\n            break;\r\n\r\n          case 126:\r\n            key = this.parseDecimalLiteral(value);\r\n            break;\r\n\r\n          case 128:\r\n            {\r\n              const privateKeyPos = this.state.start + 1;\r\n              this.raise(privateKeyPos, ErrorMessages.UnexpectedPrivateField);\r\n              key = this.parsePrivateName();\r\n              break;\r\n            }\r\n\r\n          default:\r\n            throw this.unexpected();\r\n        }\r\n      }\r\n\r\n      prop.key = key;\r\n\r\n      if (type !== 128) {\r\n        prop.computed = false;\r\n      }\r\n    }\r\n\r\n    return prop.key;\r\n  }\r\n\r\n  initFunction(node, isAsync) {\r\n    node.id = null;\r\n    node.generator = false;\r\n    node.async = !!isAsync;\r\n  }\r\n\r\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\r\n    this.initFunction(node, isAsync);\r\n    node.generator = !!isGenerator;\r\n    const allowModifiers = isConstructor;\r\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\r\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\r\n    this.parseFunctionParams(node, allowModifiers);\r\n    this.parseFunctionBodyAndFinish(node, type, true);\r\n    this.prodParam.exit();\r\n    this.scope.exit();\r\n    return node;\r\n  }\r\n\r\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\r\n    if (isTuple) {\r\n      this.expectPlugin(\"recordAndTuple\");\r\n    }\r\n\r\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\r\n    this.state.inFSharpPipelineDirectBody = false;\r\n    const node = this.startNode();\r\n    this.next();\r\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\r\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\r\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\r\n  }\r\n\r\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\r\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\r\n    let flags = functionFlags(isAsync, false);\r\n\r\n    if (!this.match(0) && this.prodParam.hasIn) {\r\n      flags |= PARAM_IN;\r\n    }\r\n\r\n    this.prodParam.enter(flags);\r\n    this.initFunction(node, isAsync);\r\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\r\n\r\n    if (params) {\r\n      this.state.maybeInArrowParameters = true;\r\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\r\n    }\r\n\r\n    this.state.maybeInArrowParameters = false;\r\n    this.parseFunctionBody(node, true);\r\n    this.prodParam.exit();\r\n    this.scope.exit();\r\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\r\n    return this.finishNode(node, \"ArrowFunctionExpression\");\r\n  }\r\n\r\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\r\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\r\n  }\r\n\r\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\r\n    this.parseFunctionBody(node, false, isMethod);\r\n    this.finishNode(node, type);\r\n  }\r\n\r\n  parseFunctionBody(node, allowExpression, isMethod = false) {\r\n    const isExpression = allowExpression && !this.match(5);\r\n    this.expressionScope.enter(newExpressionScope());\r\n\r\n    if (isExpression) {\r\n      node.body = this.parseMaybeAssign();\r\n      this.checkParams(node, false, allowExpression, false);\r\n    } else {\r\n      const oldStrict = this.state.strict;\r\n      const oldLabels = this.state.labels;\r\n      this.state.labels = [];\r\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\r\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\r\n        const nonSimple = !this.isSimpleParamList(node.params);\r\n\r\n        if (hasStrictModeDirective && nonSimple) {\r\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\r\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\r\n        }\r\n\r\n        const strictModeChanged = !oldStrict && this.state.strict;\r\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\r\n\r\n        if (this.state.strict && node.id) {\r\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\r\n        }\r\n      });\r\n      this.prodParam.exit();\r\n      this.state.labels = oldLabels;\r\n    }\r\n\r\n    this.expressionScope.exit();\r\n  }\r\n\r\n  isSimpleParamList(params) {\r\n    for (let i = 0, len = params.length; i < len; i++) {\r\n      if (params[i].type !== \"Identifier\") return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\r\n    const checkClashes = new Set();\r\n\r\n    for (const param of node.params) {\r\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\r\n    }\r\n  }\r\n\r\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\r\n    const elts = [];\r\n    let first = true;\r\n\r\n    while (!this.eat(close)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        this.expect(12);\r\n\r\n        if (this.match(close)) {\r\n          if (nodeForExtra) {\r\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\r\n          }\r\n\r\n          this.next();\r\n          break;\r\n        }\r\n      }\r\n\r\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\r\n    }\r\n\r\n    return elts;\r\n  }\r\n\r\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\r\n    let elt;\r\n\r\n    if (this.match(12)) {\r\n      if (!allowEmpty) {\r\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\r\n      }\r\n\r\n      elt = null;\r\n    } else if (this.match(21)) {\r\n      const spreadNodeStartPos = this.state.start;\r\n      const spreadNodeStartLoc = this.state.startLoc;\r\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\r\n    } else if (this.match(17)) {\r\n      this.expectPlugin(\"partialApplication\");\r\n\r\n      if (!allowPlaceholder) {\r\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\r\n      }\r\n\r\n      const node = this.startNode();\r\n      this.next();\r\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\r\n    } else {\r\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\r\n    }\r\n\r\n    return elt;\r\n  }\r\n\r\n  parseIdentifier(liberal) {\r\n    const node = this.startNode();\r\n    const name = this.parseIdentifierName(node.start, liberal);\r\n    return this.createIdentifier(node, name);\r\n  }\r\n\r\n  createIdentifier(node, name) {\r\n    node.name = name;\r\n    node.loc.identifierName = name;\r\n    return this.finishNode(node, \"Identifier\");\r\n  }\r\n\r\n  parseIdentifierName(pos, liberal) {\r\n    let name;\r\n    const {\r\n      start,\r\n      type\r\n    } = this.state;\r\n\r\n    if (tokenIsKeywordOrIdentifier(type)) {\r\n      name = this.state.value;\r\n    } else {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\r\n\r\n    if (liberal) {\r\n      if (tokenIsKeyword) {\r\n        this.replaceToken(122);\r\n      }\r\n    } else {\r\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\r\n    }\r\n\r\n    this.next();\r\n    return name;\r\n  }\r\n\r\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\r\n    if (word.length > 10) {\r\n      return;\r\n    }\r\n\r\n    if (!canBeReservedWord(word)) {\r\n      return;\r\n    }\r\n\r\n    if (word === \"yield\") {\r\n      if (this.prodParam.hasYield) {\r\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\r\n        return;\r\n      }\r\n    } else if (word === \"await\") {\r\n      if (this.prodParam.hasAwait) {\r\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\r\n        return;\r\n      } else if (this.scope.inStaticBlock) {\r\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\r\n        return;\r\n      } else {\r\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\r\n      }\r\n    } else if (word === \"arguments\") {\r\n      if (this.scope.inClassAndNotInNonArrowFunction) {\r\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (checkKeywords && isKeyword(word)) {\r\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\r\n      return;\r\n    }\r\n\r\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\r\n\r\n    if (reservedTest(word, this.inModule)) {\r\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\r\n    }\r\n  }\r\n\r\n  isAwaitAllowed() {\r\n    if (this.prodParam.hasAwait) return true;\r\n\r\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  parseAwait(startPos, startLoc) {\r\n    const node = this.startNodeAt(startPos, startLoc);\r\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\r\n\r\n    if (this.eat(49)) {\r\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\r\n    }\r\n\r\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\r\n      if (this.isAmbiguousAwait()) {\r\n        this.ambiguousScriptDifferentAst = true;\r\n      } else {\r\n        this.sawUnambiguousESM = true;\r\n      }\r\n    }\r\n\r\n    if (!this.state.soloAwait) {\r\n      node.argument = this.parseMaybeUnary(null, true);\r\n    }\r\n\r\n    return this.finishNode(node, \"AwaitExpression\");\r\n  }\r\n\r\n  isAmbiguousAwait() {\r\n    return this.hasPrecedingLineBreak() || this.match(47) || this.match(10) || this.match(0) || this.match(22) || this.match(127) || this.match(50) || this.hasPlugin(\"v8intrinsic\") && this.match(48);\r\n  }\r\n\r\n  parseYield() {\r\n    const node = this.startNode();\r\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\r\n    this.next();\r\n    let delegating = false;\r\n    let argument = null;\r\n\r\n    if (!this.hasPrecedingLineBreak()) {\r\n      delegating = this.eat(49);\r\n\r\n      switch (this.state.type) {\r\n        case 13:\r\n        case 129:\r\n        case 8:\r\n        case 11:\r\n        case 3:\r\n        case 9:\r\n        case 14:\r\n        case 12:\r\n          if (!delegating) break;\r\n\r\n        default:\r\n          argument = this.parseMaybeAssign();\r\n      }\r\n    }\r\n\r\n    node.delegate = delegating;\r\n    node.argument = argument;\r\n    return this.finishNode(node, \"YieldExpression\");\r\n  }\r\n\r\n  checkPipelineAtInfixOperator(left, leftStartPos) {\r\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\r\n      if (left.type === \"SequenceExpression\") {\r\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\r\n      }\r\n    }\r\n  }\r\n\r\n  checkHackPipeBodyEarlyErrors(startPos) {\r\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\r\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\r\n    }\r\n  }\r\n\r\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\r\n    const bodyNode = this.startNodeAt(startPos, startLoc);\r\n\r\n    if (this.isSimpleReference(childExpr)) {\r\n      bodyNode.callee = childExpr;\r\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\r\n    } else {\r\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\r\n      bodyNode.expression = childExpr;\r\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\r\n    }\r\n  }\r\n\r\n  isSimpleReference(expression) {\r\n    switch (expression.type) {\r\n      case \"MemberExpression\":\r\n        return !expression.computed && this.isSimpleReference(expression.object);\r\n\r\n      case \"Identifier\":\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\r\n    if (this.match(19)) {\r\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\r\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\r\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\r\n    }\r\n  }\r\n\r\n  withTopicBindingContext(callback) {\r\n    const outerContextTopicState = this.state.topicContext;\r\n    this.state.topicContext = {\r\n      maxNumOfResolvableTopics: 1,\r\n      maxTopicIndex: null\r\n    };\r\n\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.state.topicContext = outerContextTopicState;\r\n    }\r\n  }\r\n\r\n  withSmartMixTopicForbiddingContext(callback) {\r\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\r\n\r\n    if (proposal === \"smart\") {\r\n      const outerContextTopicState = this.state.topicContext;\r\n      this.state.topicContext = {\r\n        maxNumOfResolvableTopics: 0,\r\n        maxTopicIndex: null\r\n      };\r\n\r\n      try {\r\n        return callback();\r\n      } finally {\r\n        this.state.topicContext = outerContextTopicState;\r\n      }\r\n    } else {\r\n      return callback();\r\n    }\r\n  }\r\n\r\n  withSoloAwaitPermittingContext(callback) {\r\n    const outerContextSoloAwaitState = this.state.soloAwait;\r\n    this.state.soloAwait = true;\r\n\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.state.soloAwait = outerContextSoloAwaitState;\r\n    }\r\n  }\r\n\r\n  allowInAnd(callback) {\r\n    const flags = this.prodParam.currentFlags();\r\n    const prodParamToSet = PARAM_IN & ~flags;\r\n\r\n    if (prodParamToSet) {\r\n      this.prodParam.enter(flags | PARAM_IN);\r\n\r\n      try {\r\n        return callback();\r\n      } finally {\r\n        this.prodParam.exit();\r\n      }\r\n    }\r\n\r\n    return callback();\r\n  }\r\n\r\n  disallowInAnd(callback) {\r\n    const flags = this.prodParam.currentFlags();\r\n    const prodParamToClear = PARAM_IN & flags;\r\n\r\n    if (prodParamToClear) {\r\n      this.prodParam.enter(flags & ~PARAM_IN);\r\n\r\n      try {\r\n        return callback();\r\n      } finally {\r\n        this.prodParam.exit();\r\n      }\r\n    }\r\n\r\n    return callback();\r\n  }\r\n\r\n  registerTopicReference() {\r\n    this.state.topicContext.maxTopicIndex = 0;\r\n  }\r\n\r\n  topicReferenceIsAllowedInCurrentContext() {\r\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\r\n  }\r\n\r\n  topicReferenceWasUsedInCurrentContext() {\r\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\r\n  }\r\n\r\n  parseFSharpPipelineBody(prec) {\r\n    const startPos = this.state.start;\r\n    const startLoc = this.state.startLoc;\r\n    this.state.potentialArrowAt = this.state.start;\r\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\r\n    this.state.inFSharpPipelineDirectBody = true;\r\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\r\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\r\n    return ret;\r\n  }\r\n\r\n  parseModuleExpression() {\r\n    this.expectPlugin(\"moduleBlocks\");\r\n    const node = this.startNode();\r\n    this.next();\r\n    this.eat(5);\r\n    const revertScopes = this.initializeScopes(true);\r\n    this.enterInitialScopes();\r\n    const program = this.startNode();\r\n\r\n    try {\r\n      node.body = this.parseProgram(program, 8, \"module\");\r\n    } finally {\r\n      revertScopes();\r\n    }\r\n\r\n    this.eat(8);\r\n    return this.finishNode(node, \"ModuleExpression\");\r\n  }\r\n\r\n  parsePropertyNamePrefixOperator(prop) {}\r\n\r\n}\r\n\r\nconst loopLabel = {\r\n  kind: \"loop\"\r\n},\r\n      switchLabel = {\r\n  kind: \"switch\"\r\n};\r\nconst FUNC_NO_FLAGS = 0b000,\r\n      FUNC_STATEMENT = 0b001,\r\n      FUNC_HANGING_STATEMENT = 0b010,\r\n      FUNC_NULLABLE_ID = 0b100;\r\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\r\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\r\n\r\nfunction babel7CompatTokens(tokens) {\r\n  for (let i = 0; i < tokens.length; i++) {\r\n    const token = tokens[i];\r\n    const {\r\n      type\r\n    } = token;\r\n\r\n    if (type === 128) {\r\n      {\r\n        const {\r\n          loc,\r\n          start,\r\n          value,\r\n          end\r\n        } = token;\r\n        const hashEndPos = start + 1;\r\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\r\n        tokens.splice(i, 1, new Token({\r\n          type: getExportedToken(25),\r\n          value: \"#\",\r\n          start: start,\r\n          end: hashEndPos,\r\n          startLoc: loc.start,\r\n          endLoc: hashEndLoc\r\n        }), new Token({\r\n          type: getExportedToken(122),\r\n          value: value,\r\n          start: hashEndPos,\r\n          end: end,\r\n          startLoc: hashEndLoc,\r\n          endLoc: loc.end\r\n        }));\r\n        i++;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (typeof type === \"number\") {\r\n      token.type = getExportedToken(type);\r\n    }\r\n  }\r\n\r\n  return tokens;\r\n}\r\n\r\nclass StatementParser extends ExpressionParser {\r\n  parseTopLevel(file, program) {\r\n    file.program = this.parseProgram(program);\r\n    file.comments = this.state.comments;\r\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\r\n    return this.finishNode(file, \"File\");\r\n  }\r\n\r\n  parseProgram(program, end = 129, sourceType = this.options.sourceType) {\r\n    program.sourceType = sourceType;\r\n    program.interpreter = this.parseInterpreterDirective();\r\n    this.parseBlockBody(program, true, true, end);\r\n\r\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\r\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\r\n        const pos = this.scope.undefinedExports.get(name);\r\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\r\n      }\r\n    }\r\n\r\n    return this.finishNode(program, \"Program\");\r\n  }\r\n\r\n  stmtToDirective(stmt) {\r\n    const directive = stmt;\r\n    directive.type = \"Directive\";\r\n    directive.value = directive.expression;\r\n    delete directive.expression;\r\n    const directiveLiteral = directive.value;\r\n    const expressionValue = directiveLiteral.value;\r\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\r\n    const val = directiveLiteral.value = raw.slice(1, -1);\r\n    this.addExtra(directiveLiteral, \"raw\", raw);\r\n    this.addExtra(directiveLiteral, \"rawValue\", val);\r\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\r\n    directiveLiteral.type = \"DirectiveLiteral\";\r\n    return directive;\r\n  }\r\n\r\n  parseInterpreterDirective() {\r\n    if (!this.match(26)) {\r\n      return null;\r\n    }\r\n\r\n    const node = this.startNode();\r\n    node.value = this.state.value;\r\n    this.next();\r\n    return this.finishNode(node, \"InterpreterDirective\");\r\n  }\r\n\r\n  isLet(context) {\r\n    if (!this.isContextual(93)) {\r\n      return false;\r\n    }\r\n\r\n    return this.isLetKeyword(context);\r\n  }\r\n\r\n  isLetKeyword(context) {\r\n    const next = this.nextTokenStart();\r\n    const nextCh = this.codePointAtPos(next);\r\n\r\n    if (nextCh === 92 || nextCh === 91) {\r\n      return true;\r\n    }\r\n\r\n    if (context) return false;\r\n    if (nextCh === 123) return true;\r\n\r\n    if (isIdentifierStart(nextCh)) {\r\n      keywordRelationalOperator.lastIndex = next;\r\n\r\n      if (keywordRelationalOperator.test(this.input)) {\r\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\r\n\r\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  parseStatement(context, topLevel) {\r\n    if (this.match(24)) {\r\n      this.parseDecorators(true);\r\n    }\r\n\r\n    return this.parseStatementContent(context, topLevel);\r\n  }\r\n\r\n  parseStatementContent(context, topLevel) {\r\n    let starttype = this.state.type;\r\n    const node = this.startNode();\r\n    let kind;\r\n\r\n    if (this.isLet(context)) {\r\n      starttype = 68;\r\n      kind = \"let\";\r\n    }\r\n\r\n    switch (starttype) {\r\n      case 54:\r\n        return this.parseBreakContinueStatement(node, true);\r\n\r\n      case 57:\r\n        return this.parseBreakContinueStatement(node, false);\r\n\r\n      case 58:\r\n        return this.parseDebuggerStatement(node);\r\n\r\n      case 84:\r\n        return this.parseDoStatement(node);\r\n\r\n      case 85:\r\n        return this.parseForStatement(node);\r\n\r\n      case 62:\r\n        if (this.lookaheadCharCode() === 46) break;\r\n\r\n        if (context) {\r\n          if (this.state.strict) {\r\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\r\n          } else if (context !== \"if\" && context !== \"label\") {\r\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\r\n          }\r\n        }\r\n\r\n        return this.parseFunctionStatement(node, false, !context);\r\n\r\n      case 74:\r\n        if (context) this.unexpected();\r\n        return this.parseClass(node, true);\r\n\r\n      case 63:\r\n        return this.parseIfStatement(node);\r\n\r\n      case 64:\r\n        return this.parseReturnStatement(node);\r\n\r\n      case 65:\r\n        return this.parseSwitchStatement(node);\r\n\r\n      case 66:\r\n        return this.parseThrowStatement(node);\r\n\r\n      case 67:\r\n        return this.parseTryStatement(node);\r\n\r\n      case 69:\r\n      case 68:\r\n        kind = kind || this.state.value;\r\n\r\n        if (context && kind !== \"var\") {\r\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\r\n        }\r\n\r\n        return this.parseVarStatement(node, kind);\r\n\r\n      case 86:\r\n        return this.parseWhileStatement(node);\r\n\r\n      case 70:\r\n        return this.parseWithStatement(node);\r\n\r\n      case 5:\r\n        return this.parseBlock();\r\n\r\n      case 13:\r\n        return this.parseEmptyStatement(node);\r\n\r\n      case 77:\r\n        {\r\n          const nextTokenCharCode = this.lookaheadCharCode();\r\n\r\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\r\n            break;\r\n          }\r\n        }\r\n\r\n      case 76:\r\n        {\r\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\r\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\r\n          }\r\n\r\n          this.next();\r\n          let result;\r\n\r\n          if (starttype === 77) {\r\n            result = this.parseImport(node);\r\n\r\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\r\n              this.sawUnambiguousESM = true;\r\n            }\r\n          } else {\r\n            result = this.parseExport(node);\r\n\r\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\r\n              this.sawUnambiguousESM = true;\r\n            }\r\n          }\r\n\r\n          this.assertModuleNodeAllowed(node);\r\n          return result;\r\n        }\r\n\r\n      default:\r\n        {\r\n          if (this.isAsyncFunction()) {\r\n            if (context) {\r\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\r\n            }\r\n\r\n            this.next();\r\n            return this.parseFunctionStatement(node, true, !context);\r\n          }\r\n        }\r\n    }\r\n\r\n    const maybeName = this.state.value;\r\n    const expr = this.parseExpression();\r\n\r\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\r\n      return this.parseLabeledStatement(node, maybeName, expr, context);\r\n    } else {\r\n      return this.parseExpressionStatement(node, expr);\r\n    }\r\n  }\r\n\r\n  assertModuleNodeAllowed(node) {\r\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\r\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\r\n    }\r\n  }\r\n\r\n  takeDecorators(node) {\r\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\r\n\r\n    if (decorators.length) {\r\n      node.decorators = decorators;\r\n      this.resetStartLocationFromNode(node, decorators[0]);\r\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\r\n    }\r\n  }\r\n\r\n  canHaveLeadingDecorator() {\r\n    return this.match(74);\r\n  }\r\n\r\n  parseDecorators(allowExport) {\r\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\r\n\r\n    while (this.match(24)) {\r\n      const decorator = this.parseDecorator();\r\n      currentContextDecorators.push(decorator);\r\n    }\r\n\r\n    if (this.match(76)) {\r\n      if (!allowExport) {\r\n        this.unexpected();\r\n      }\r\n\r\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\r\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\r\n      }\r\n    } else if (!this.canHaveLeadingDecorator()) {\r\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\r\n    }\r\n  }\r\n\r\n  parseDecorator() {\r\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\r\n    const node = this.startNode();\r\n    this.next();\r\n\r\n    if (this.hasPlugin(\"decorators\")) {\r\n      this.state.decoratorStack.push([]);\r\n      const startPos = this.state.start;\r\n      const startLoc = this.state.startLoc;\r\n      let expr;\r\n\r\n      if (this.eat(10)) {\r\n        expr = this.parseExpression();\r\n        this.expect(11);\r\n      } else {\r\n        expr = this.parseIdentifier(false);\r\n\r\n        while (this.eat(16)) {\r\n          const node = this.startNodeAt(startPos, startLoc);\r\n          node.object = expr;\r\n          node.property = this.parseIdentifier(true);\r\n          node.computed = false;\r\n          expr = this.finishNode(node, \"MemberExpression\");\r\n        }\r\n      }\r\n\r\n      node.expression = this.parseMaybeDecoratorArguments(expr);\r\n      this.state.decoratorStack.pop();\r\n    } else {\r\n      node.expression = this.parseExprSubscripts();\r\n    }\r\n\r\n    return this.finishNode(node, \"Decorator\");\r\n  }\r\n\r\n  parseMaybeDecoratorArguments(expr) {\r\n    if (this.eat(10)) {\r\n      const node = this.startNodeAtNode(expr);\r\n      node.callee = expr;\r\n      node.arguments = this.parseCallExpressionArguments(11, false);\r\n      this.toReferencedList(node.arguments);\r\n      return this.finishNode(node, \"CallExpression\");\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  parseBreakContinueStatement(node, isBreak) {\r\n    this.next();\r\n\r\n    if (this.isLineTerminator()) {\r\n      node.label = null;\r\n    } else {\r\n      node.label = this.parseIdentifier();\r\n      this.semicolon();\r\n    }\r\n\r\n    this.verifyBreakContinue(node, isBreak);\r\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\r\n  }\r\n\r\n  verifyBreakContinue(node, isBreak) {\r\n    let i;\r\n\r\n    for (i = 0; i < this.state.labels.length; ++i) {\r\n      const lab = this.state.labels[i];\r\n\r\n      if (node.label == null || lab.name === node.label.name) {\r\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\r\n        if (node.label && isBreak) break;\r\n      }\r\n    }\r\n\r\n    if (i === this.state.labels.length) {\r\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\r\n    }\r\n  }\r\n\r\n  parseDebuggerStatement(node) {\r\n    this.next();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"DebuggerStatement\");\r\n  }\r\n\r\n  parseHeaderExpression() {\r\n    this.expect(10);\r\n    const val = this.parseExpression();\r\n    this.expect(11);\r\n    return val;\r\n  }\r\n\r\n  parseDoStatement(node) {\r\n    this.next();\r\n    this.state.labels.push(loopLabel);\r\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\r\n    this.state.labels.pop();\r\n    this.expect(86);\r\n    node.test = this.parseHeaderExpression();\r\n    this.eat(13);\r\n    return this.finishNode(node, \"DoWhileStatement\");\r\n  }\r\n\r\n  parseForStatement(node) {\r\n    this.next();\r\n    this.state.labels.push(loopLabel);\r\n    let awaitAt = -1;\r\n\r\n    if (this.isAwaitAllowed() && this.eatContextual(90)) {\r\n      awaitAt = this.state.lastTokStart;\r\n    }\r\n\r\n    this.scope.enter(SCOPE_OTHER);\r\n    this.expect(10);\r\n\r\n    if (this.match(13)) {\r\n      if (awaitAt > -1) {\r\n        this.unexpected(awaitAt);\r\n      }\r\n\r\n      return this.parseFor(node, null);\r\n    }\r\n\r\n    const startsWithLet = this.isContextual(93);\r\n    const isLet = startsWithLet && this.isLetKeyword();\r\n\r\n    if (this.match(68) || this.match(69) || isLet) {\r\n      const init = this.startNode();\r\n      const kind = isLet ? \"let\" : this.state.value;\r\n      this.next();\r\n      this.parseVar(init, true, kind);\r\n      this.finishNode(init, \"VariableDeclaration\");\r\n\r\n      if ((this.match(52) || this.isContextual(95)) && init.declarations.length === 1) {\r\n        return this.parseForIn(node, init, awaitAt);\r\n      }\r\n\r\n      if (awaitAt > -1) {\r\n        this.unexpected(awaitAt);\r\n      }\r\n\r\n      return this.parseFor(node, init);\r\n    }\r\n\r\n    const startsWithAsync = this.isContextual(89);\r\n    const refExpressionErrors = new ExpressionErrors();\r\n    const init = this.parseExpression(true, refExpressionErrors);\r\n    const isForOf = this.isContextual(95);\r\n\r\n    if (isForOf) {\r\n      if (startsWithLet) {\r\n        this.raise(init.start, ErrorMessages.ForOfLet);\r\n      } else if (awaitAt === -1 && startsWithAsync && init.type === \"Identifier\") {\r\n        this.raise(init.start, ErrorMessages.ForOfAsync);\r\n      }\r\n    }\r\n\r\n    if (isForOf || this.match(52)) {\r\n      this.toAssignable(init, true);\r\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\r\n      this.checkLVal(init, description);\r\n      return this.parseForIn(node, init, awaitAt);\r\n    } else {\r\n      this.checkExpressionErrors(refExpressionErrors, true);\r\n    }\r\n\r\n    if (awaitAt > -1) {\r\n      this.unexpected(awaitAt);\r\n    }\r\n\r\n    return this.parseFor(node, init);\r\n  }\r\n\r\n  parseFunctionStatement(node, isAsync, declarationPosition) {\r\n    this.next();\r\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\r\n  }\r\n\r\n  parseIfStatement(node) {\r\n    this.next();\r\n    node.test = this.parseHeaderExpression();\r\n    node.consequent = this.parseStatement(\"if\");\r\n    node.alternate = this.eat(60) ? this.parseStatement(\"if\") : null;\r\n    return this.finishNode(node, \"IfStatement\");\r\n  }\r\n\r\n  parseReturnStatement(node) {\r\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\r\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\r\n    }\r\n\r\n    this.next();\r\n\r\n    if (this.isLineTerminator()) {\r\n      node.argument = null;\r\n    } else {\r\n      node.argument = this.parseExpression();\r\n      this.semicolon();\r\n    }\r\n\r\n    return this.finishNode(node, \"ReturnStatement\");\r\n  }\r\n\r\n  parseSwitchStatement(node) {\r\n    this.next();\r\n    node.discriminant = this.parseHeaderExpression();\r\n    const cases = node.cases = [];\r\n    this.expect(5);\r\n    this.state.labels.push(switchLabel);\r\n    this.scope.enter(SCOPE_OTHER);\r\n    let cur;\r\n\r\n    for (let sawDefault; !this.match(8);) {\r\n      if (this.match(55) || this.match(59)) {\r\n        const isCase = this.match(55);\r\n        if (cur) this.finishNode(cur, \"SwitchCase\");\r\n        cases.push(cur = this.startNode());\r\n        cur.consequent = [];\r\n        this.next();\r\n\r\n        if (isCase) {\r\n          cur.test = this.parseExpression();\r\n        } else {\r\n          if (sawDefault) {\r\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\r\n          }\r\n\r\n          sawDefault = true;\r\n          cur.test = null;\r\n        }\r\n\r\n        this.expect(14);\r\n      } else {\r\n        if (cur) {\r\n          cur.consequent.push(this.parseStatement(null));\r\n        } else {\r\n          this.unexpected();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.scope.exit();\r\n    if (cur) this.finishNode(cur, \"SwitchCase\");\r\n    this.next();\r\n    this.state.labels.pop();\r\n    return this.finishNode(node, \"SwitchStatement\");\r\n  }\r\n\r\n  parseThrowStatement(node) {\r\n    this.next();\r\n\r\n    if (this.hasPrecedingLineBreak()) {\r\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\r\n    }\r\n\r\n    node.argument = this.parseExpression();\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ThrowStatement\");\r\n  }\r\n\r\n  parseCatchClauseParam() {\r\n    const param = this.parseBindingAtom();\r\n    const simple = param.type === \"Identifier\";\r\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\r\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\r\n    return param;\r\n  }\r\n\r\n  parseTryStatement(node) {\r\n    this.next();\r\n    node.block = this.parseBlock();\r\n    node.handler = null;\r\n\r\n    if (this.match(56)) {\r\n      const clause = this.startNode();\r\n      this.next();\r\n\r\n      if (this.match(10)) {\r\n        this.expect(10);\r\n        clause.param = this.parseCatchClauseParam();\r\n        this.expect(11);\r\n      } else {\r\n        clause.param = null;\r\n        this.scope.enter(SCOPE_OTHER);\r\n      }\r\n\r\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\r\n      this.scope.exit();\r\n      node.handler = this.finishNode(clause, \"CatchClause\");\r\n    }\r\n\r\n    node.finalizer = this.eat(61) ? this.parseBlock() : null;\r\n\r\n    if (!node.handler && !node.finalizer) {\r\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\r\n    }\r\n\r\n    return this.finishNode(node, \"TryStatement\");\r\n  }\r\n\r\n  parseVarStatement(node, kind) {\r\n    this.next();\r\n    this.parseVar(node, false, kind);\r\n    this.semicolon();\r\n    return this.finishNode(node, \"VariableDeclaration\");\r\n  }\r\n\r\n  parseWhileStatement(node) {\r\n    this.next();\r\n    node.test = this.parseHeaderExpression();\r\n    this.state.labels.push(loopLabel);\r\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\r\n    this.state.labels.pop();\r\n    return this.finishNode(node, \"WhileStatement\");\r\n  }\r\n\r\n  parseWithStatement(node) {\r\n    if (this.state.strict) {\r\n      this.raise(this.state.start, ErrorMessages.StrictWith);\r\n    }\r\n\r\n    this.next();\r\n    node.object = this.parseHeaderExpression();\r\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\r\n    return this.finishNode(node, \"WithStatement\");\r\n  }\r\n\r\n  parseEmptyStatement(node) {\r\n    this.next();\r\n    return this.finishNode(node, \"EmptyStatement\");\r\n  }\r\n\r\n  parseLabeledStatement(node, maybeName, expr, context) {\r\n    for (const label of this.state.labels) {\r\n      if (label.name === maybeName) {\r\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\r\n      }\r\n    }\r\n\r\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(65) ? \"switch\" : null;\r\n\r\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\r\n      const label = this.state.labels[i];\r\n\r\n      if (label.statementStart === node.start) {\r\n        label.statementStart = this.state.start;\r\n        label.kind = kind;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.state.labels.push({\r\n      name: maybeName,\r\n      kind: kind,\r\n      statementStart: this.state.start\r\n    });\r\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\r\n    this.state.labels.pop();\r\n    node.label = expr;\r\n    return this.finishNode(node, \"LabeledStatement\");\r\n  }\r\n\r\n  parseExpressionStatement(node, expr) {\r\n    node.expression = expr;\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ExpressionStatement\");\r\n  }\r\n\r\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\r\n    const node = this.startNode();\r\n\r\n    if (allowDirectives) {\r\n      this.state.strictErrors.clear();\r\n    }\r\n\r\n    this.expect(5);\r\n\r\n    if (createNewLexicalScope) {\r\n      this.scope.enter(SCOPE_OTHER);\r\n    }\r\n\r\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\r\n\r\n    if (createNewLexicalScope) {\r\n      this.scope.exit();\r\n    }\r\n\r\n    return this.finishNode(node, \"BlockStatement\");\r\n  }\r\n\r\n  isValidDirective(stmt) {\r\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\r\n  }\r\n\r\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\r\n    const body = node.body = [];\r\n    const directives = node.directives = [];\r\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\r\n  }\r\n\r\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\r\n    const oldStrict = this.state.strict;\r\n    let hasStrictModeDirective = false;\r\n    let parsedNonDirective = false;\r\n\r\n    while (!this.match(end)) {\r\n      const stmt = this.parseStatement(null, topLevel);\r\n\r\n      if (directives && !parsedNonDirective) {\r\n        if (this.isValidDirective(stmt)) {\r\n          const directive = this.stmtToDirective(stmt);\r\n          directives.push(directive);\r\n\r\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\r\n            hasStrictModeDirective = true;\r\n            this.setStrict(true);\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        parsedNonDirective = true;\r\n        this.state.strictErrors.clear();\r\n      }\r\n\r\n      body.push(stmt);\r\n    }\r\n\r\n    if (afterBlockParse) {\r\n      afterBlockParse.call(this, hasStrictModeDirective);\r\n    }\r\n\r\n    if (!oldStrict) {\r\n      this.setStrict(false);\r\n    }\r\n\r\n    this.next();\r\n  }\r\n\r\n  parseFor(node, init) {\r\n    node.init = init;\r\n    this.semicolon(false);\r\n    node.test = this.match(13) ? null : this.parseExpression();\r\n    this.semicolon(false);\r\n    node.update = this.match(11) ? null : this.parseExpression();\r\n    this.expect(11);\r\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\r\n    this.scope.exit();\r\n    this.state.labels.pop();\r\n    return this.finishNode(node, \"ForStatement\");\r\n  }\r\n\r\n  parseForIn(node, init, awaitAt) {\r\n    const isForIn = this.match(52);\r\n    this.next();\r\n\r\n    if (isForIn) {\r\n      if (awaitAt > -1) this.unexpected(awaitAt);\r\n    } else {\r\n      node.await = awaitAt > -1;\r\n    }\r\n\r\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\r\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\r\n    } else if (init.type === \"AssignmentPattern\") {\r\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\r\n    }\r\n\r\n    node.left = init;\r\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\r\n    this.expect(11);\r\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\r\n    this.scope.exit();\r\n    this.state.labels.pop();\r\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\r\n  }\r\n\r\n  parseVar(node, isFor, kind) {\r\n    const declarations = node.declarations = [];\r\n    const isTypescript = this.hasPlugin(\"typescript\");\r\n    node.kind = kind;\r\n\r\n    for (;;) {\r\n      const decl = this.startNode();\r\n      this.parseVarId(decl, kind);\r\n\r\n      if (this.eat(27)) {\r\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\r\n      } else {\r\n        if (kind === \"const\" && !(this.match(52) || this.isContextual(95))) {\r\n          if (!isTypescript) {\r\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\r\n          }\r\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(52) || this.isContextual(95)))) {\r\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\r\n        }\r\n\r\n        decl.init = null;\r\n      }\r\n\r\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\r\n      if (!this.eat(12)) break;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  parseVarId(decl, kind) {\r\n    decl.id = this.parseBindingAtom();\r\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\r\n  }\r\n\r\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\r\n    const isStatement = statement & FUNC_STATEMENT;\r\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\r\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\r\n    this.initFunction(node, isAsync);\r\n\r\n    if (this.match(49) && isHangingStatement) {\r\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\r\n    }\r\n\r\n    node.generator = this.eat(49);\r\n\r\n    if (isStatement) {\r\n      node.id = this.parseFunctionId(requireId);\r\n    }\r\n\r\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\r\n    this.state.maybeInArrowParameters = false;\r\n    this.scope.enter(SCOPE_FUNCTION);\r\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\r\n\r\n    if (!isStatement) {\r\n      node.id = this.parseFunctionId();\r\n    }\r\n\r\n    this.parseFunctionParams(node, false);\r\n    this.withSmartMixTopicForbiddingContext(() => {\r\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\r\n    });\r\n    this.prodParam.exit();\r\n    this.scope.exit();\r\n\r\n    if (isStatement && !isHangingStatement) {\r\n      this.registerFunctionStatementId(node);\r\n    }\r\n\r\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\r\n    return node;\r\n  }\r\n\r\n  parseFunctionId(requireId) {\r\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\r\n  }\r\n\r\n  parseFunctionParams(node, allowModifiers) {\r\n    this.expect(10);\r\n    this.expressionScope.enter(newParameterDeclarationScope());\r\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\r\n    this.expressionScope.exit();\r\n  }\r\n\r\n  registerFunctionStatementId(node) {\r\n    if (!node.id) return;\r\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\r\n  }\r\n\r\n  parseClass(node, isStatement, optionalId) {\r\n    this.next();\r\n    this.takeDecorators(node);\r\n    const oldStrict = this.state.strict;\r\n    this.state.strict = true;\r\n    this.parseClassId(node, isStatement, optionalId);\r\n    this.parseClassSuper(node);\r\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\r\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\r\n  }\r\n\r\n  isClassProperty() {\r\n    return this.match(27) || this.match(13) || this.match(8);\r\n  }\r\n\r\n  isClassMethod() {\r\n    return this.match(10);\r\n  }\r\n\r\n  isNonstaticConstructor(method) {\r\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\r\n  }\r\n\r\n  parseClassBody(hadSuperClass, oldStrict) {\r\n    this.classScope.enter();\r\n    const state = {\r\n      hadConstructor: false,\r\n      hadSuperClass\r\n    };\r\n    let decorators = [];\r\n    const classBody = this.startNode();\r\n    classBody.body = [];\r\n    this.expect(5);\r\n    this.withSmartMixTopicForbiddingContext(() => {\r\n      while (!this.match(8)) {\r\n        if (this.eat(13)) {\r\n          if (decorators.length > 0) {\r\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        if (this.match(24)) {\r\n          decorators.push(this.parseDecorator());\r\n          continue;\r\n        }\r\n\r\n        const member = this.startNode();\r\n\r\n        if (decorators.length) {\r\n          member.decorators = decorators;\r\n          this.resetStartLocationFromNode(member, decorators[0]);\r\n          decorators = [];\r\n        }\r\n\r\n        this.parseClassMember(classBody, member, state);\r\n\r\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\r\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\r\n        }\r\n      }\r\n    });\r\n    this.state.strict = oldStrict;\r\n    this.next();\r\n\r\n    if (decorators.length) {\r\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\r\n    }\r\n\r\n    this.classScope.exit();\r\n    return this.finishNode(classBody, \"ClassBody\");\r\n  }\r\n\r\n  parseClassMemberFromModifier(classBody, member) {\r\n    const key = this.parseIdentifier(true);\r\n\r\n    if (this.isClassMethod()) {\r\n      const method = member;\r\n      method.kind = \"method\";\r\n      method.computed = false;\r\n      method.key = key;\r\n      method.static = false;\r\n      this.pushClassMethod(classBody, method, false, false, false, false);\r\n      return true;\r\n    } else if (this.isClassProperty()) {\r\n      const prop = member;\r\n      prop.computed = false;\r\n      prop.key = key;\r\n      prop.static = false;\r\n      classBody.body.push(this.parseClassProperty(prop));\r\n      return true;\r\n    }\r\n\r\n    this.resetPreviousNodeTrailingComments(key);\r\n    return false;\r\n  }\r\n\r\n  parseClassMember(classBody, member, state) {\r\n    const isStatic = this.isContextual(98);\r\n\r\n    if (isStatic) {\r\n      if (this.parseClassMemberFromModifier(classBody, member)) {\r\n        return;\r\n      }\r\n\r\n      if (this.eat(5)) {\r\n        this.parseClassStaticBlock(classBody, member);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\r\n  }\r\n\r\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\r\n    const publicMethod = member;\r\n    const privateMethod = member;\r\n    const publicProp = member;\r\n    const privateProp = member;\r\n    const method = publicMethod;\r\n    const publicMember = publicMethod;\r\n    member.static = isStatic;\r\n    this.parsePropertyNamePrefixOperator(member);\r\n\r\n    if (this.eat(49)) {\r\n      method.kind = \"method\";\r\n      const isPrivateName = this.match(128);\r\n      this.parseClassElementName(method);\r\n\r\n      if (isPrivateName) {\r\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\r\n        return;\r\n      }\r\n\r\n      if (this.isNonstaticConstructor(publicMethod)) {\r\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\r\n      }\r\n\r\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\r\n      return;\r\n    }\r\n\r\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\r\n    const isPrivate = this.match(128);\r\n    const key = this.parseClassElementName(member);\r\n    const maybeQuestionTokenStart = this.state.start;\r\n    this.parsePostMemberNameModifiers(publicMember);\r\n\r\n    if (this.isClassMethod()) {\r\n      method.kind = \"method\";\r\n\r\n      if (isPrivate) {\r\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\r\n        return;\r\n      }\r\n\r\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\r\n      let allowsDirectSuper = false;\r\n\r\n      if (isConstructor) {\r\n        publicMethod.kind = \"constructor\";\r\n\r\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\r\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\r\n        }\r\n\r\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\r\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\r\n        }\r\n\r\n        state.hadConstructor = true;\r\n        allowsDirectSuper = state.hadSuperClass;\r\n      }\r\n\r\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\r\n    } else if (this.isClassProperty()) {\r\n      if (isPrivate) {\r\n        this.pushClassPrivateProperty(classBody, privateProp);\r\n      } else {\r\n        this.pushClassProperty(classBody, publicProp);\r\n      }\r\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\r\n      this.resetPreviousNodeTrailingComments(key);\r\n      const isGenerator = this.eat(49);\r\n\r\n      if (publicMember.optional) {\r\n        this.unexpected(maybeQuestionTokenStart);\r\n      }\r\n\r\n      method.kind = \"method\";\r\n      const isPrivate = this.match(128);\r\n      this.parseClassElementName(method);\r\n      this.parsePostMemberNameModifiers(publicMember);\r\n\r\n      if (isPrivate) {\r\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\r\n      } else {\r\n        if (this.isNonstaticConstructor(publicMethod)) {\r\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\r\n        }\r\n\r\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\r\n      }\r\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(49) && this.isLineTerminator())) {\r\n      this.resetPreviousNodeTrailingComments(key);\r\n      method.kind = key.name;\r\n      const isPrivate = this.match(128);\r\n      this.parseClassElementName(publicMethod);\r\n\r\n      if (isPrivate) {\r\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\r\n      } else {\r\n        if (this.isNonstaticConstructor(publicMethod)) {\r\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\r\n        }\r\n\r\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\r\n      }\r\n\r\n      this.checkGetterSetterParams(publicMethod);\r\n    } else if (this.isLineTerminator()) {\r\n      if (isPrivate) {\r\n        this.pushClassPrivateProperty(classBody, privateProp);\r\n      } else {\r\n        this.pushClassProperty(classBody, publicProp);\r\n      }\r\n    } else {\r\n      this.unexpected();\r\n    }\r\n  }\r\n\r\n  parseClassElementName(member) {\r\n    const {\r\n      type,\r\n      value,\r\n      start\r\n    } = this.state;\r\n\r\n    if ((type === 122 || type === 123) && member.static && value === \"prototype\") {\r\n      this.raise(start, ErrorMessages.StaticPrototype);\r\n    }\r\n\r\n    if (type === 128) {\r\n      if (value === \"constructor\") {\r\n        this.raise(start, ErrorMessages.ConstructorClassPrivateField);\r\n      }\r\n\r\n      const key = this.parsePrivateName();\r\n      member.key = key;\r\n      return key;\r\n    }\r\n\r\n    return this.parsePropertyName(member);\r\n  }\r\n\r\n  parseClassStaticBlock(classBody, member) {\r\n    var _member$decorators;\r\n\r\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\r\n    const oldLabels = this.state.labels;\r\n    this.state.labels = [];\r\n    this.prodParam.enter(PARAM);\r\n    const body = member.body = [];\r\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\r\n    this.prodParam.exit();\r\n    this.scope.exit();\r\n    this.state.labels = oldLabels;\r\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\r\n\r\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\r\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\r\n    }\r\n  }\r\n\r\n  pushClassProperty(classBody, prop) {\r\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\r\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\r\n    }\r\n\r\n    classBody.body.push(this.parseClassProperty(prop));\r\n  }\r\n\r\n  pushClassPrivateProperty(classBody, prop) {\r\n    const node = this.parseClassPrivateProperty(prop);\r\n    classBody.body.push(node);\r\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\r\n  }\r\n\r\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\r\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\r\n  }\r\n\r\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\r\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\r\n    classBody.body.push(node);\r\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\r\n    this.declareClassPrivateMethodInScope(node, kind);\r\n  }\r\n\r\n  declareClassPrivateMethodInScope(node, kind) {\r\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\r\n  }\r\n\r\n  parsePostMemberNameModifiers(methodOrProp) {}\r\n\r\n  parseClassPrivateProperty(node) {\r\n    this.parseInitializer(node);\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ClassPrivateProperty\");\r\n  }\r\n\r\n  parseClassProperty(node) {\r\n    this.parseInitializer(node);\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ClassProperty\");\r\n  }\r\n\r\n  parseInitializer(node) {\r\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\r\n    this.expressionScope.enter(newExpressionScope());\r\n    this.prodParam.enter(PARAM);\r\n    node.value = this.eat(27) ? this.parseMaybeAssignAllowIn() : null;\r\n    this.expressionScope.exit();\r\n    this.prodParam.exit();\r\n    this.scope.exit();\r\n  }\r\n\r\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\r\n    if (tokenIsIdentifier(this.state.type)) {\r\n      node.id = this.parseIdentifier();\r\n\r\n      if (isStatement) {\r\n        this.checkLVal(node.id, \"class name\", bindingType);\r\n      }\r\n    } else {\r\n      if (optionalId || !isStatement) {\r\n        node.id = null;\r\n      } else {\r\n        this.unexpected(null, ErrorMessages.MissingClassName);\r\n      }\r\n    }\r\n  }\r\n\r\n  parseClassSuper(node) {\r\n    node.superClass = this.eat(75) ? this.parseExprSubscripts() : null;\r\n  }\r\n\r\n  parseExport(node) {\r\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\r\n    const parseAfterDefault = !hasDefault || this.eat(12);\r\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\r\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\r\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\r\n    const isFromRequired = hasDefault || hasStar;\r\n\r\n    if (hasStar && !hasNamespace) {\r\n      if (hasDefault) this.unexpected();\r\n      this.parseExportFrom(node, true);\r\n      return this.finishNode(node, \"ExportAllDeclaration\");\r\n    }\r\n\r\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\r\n\r\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\r\n      throw this.unexpected(null, 5);\r\n    }\r\n\r\n    let hasDeclaration;\r\n\r\n    if (isFromRequired || hasSpecifiers) {\r\n      hasDeclaration = false;\r\n      this.parseExportFrom(node, isFromRequired);\r\n    } else {\r\n      hasDeclaration = this.maybeParseExportDeclaration(node);\r\n    }\r\n\r\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\r\n      this.checkExport(node, true, false, !!node.source);\r\n      return this.finishNode(node, \"ExportNamedDeclaration\");\r\n    }\r\n\r\n    if (this.eat(59)) {\r\n      node.declaration = this.parseExportDefaultExpression();\r\n      this.checkExport(node, true, true);\r\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\r\n    }\r\n\r\n    throw this.unexpected(null, 5);\r\n  }\r\n\r\n  eatExportStar(node) {\r\n    return this.eat(49);\r\n  }\r\n\r\n  maybeParseExportDefaultSpecifier(node) {\r\n    if (this.isExportDefaultSpecifier()) {\r\n      this.expectPlugin(\"exportDefaultFrom\");\r\n      const specifier = this.startNode();\r\n      specifier.exported = this.parseIdentifier(true);\r\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  maybeParseExportNamespaceSpecifier(node) {\r\n    if (this.isContextual(87)) {\r\n      if (!node.specifiers) node.specifiers = [];\r\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\r\n      this.next();\r\n      specifier.exported = this.parseModuleExportName();\r\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  maybeParseExportNamedSpecifiers(node) {\r\n    if (this.match(5)) {\r\n      if (!node.specifiers) node.specifiers = [];\r\n      const isTypeExport = node.exportKind === \"type\";\r\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\r\n      node.source = null;\r\n      node.declaration = null;\r\n\r\n      if (this.hasPlugin(\"importAssertions\")) {\r\n        node.assertions = [];\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  maybeParseExportDeclaration(node) {\r\n    if (this.shouldParseExportDeclaration()) {\r\n      node.specifiers = [];\r\n      node.source = null;\r\n\r\n      if (this.hasPlugin(\"importAssertions\")) {\r\n        node.assertions = [];\r\n      }\r\n\r\n      node.declaration = this.parseExportDeclaration(node);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isAsyncFunction() {\r\n    if (!this.isContextual(89)) return false;\r\n    const next = this.nextTokenStart();\r\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\r\n  }\r\n\r\n  parseExportDefaultExpression() {\r\n    const expr = this.startNode();\r\n    const isAsync = this.isAsyncFunction();\r\n\r\n    if (this.match(62) || isAsync) {\r\n      this.next();\r\n\r\n      if (isAsync) {\r\n        this.next();\r\n      }\r\n\r\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\r\n    } else if (this.match(74)) {\r\n      return this.parseClass(expr, true, true);\r\n    } else if (this.match(24)) {\r\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\r\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\r\n      }\r\n\r\n      this.parseDecorators(false);\r\n      return this.parseClass(expr, true, true);\r\n    } else if (this.match(69) || this.match(68) || this.isLet()) {\r\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\r\n    } else {\r\n      const res = this.parseMaybeAssignAllowIn();\r\n      this.semicolon();\r\n      return res;\r\n    }\r\n  }\r\n\r\n  parseExportDeclaration(node) {\r\n    return this.parseStatement(null);\r\n  }\r\n\r\n  isExportDefaultSpecifier() {\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (tokenIsIdentifier(type)) {\r\n      if (type === 89 && !this.state.containsEsc || type === 93) {\r\n        return false;\r\n      }\r\n\r\n      if ((type === 120 || type === 119) && !this.state.containsEsc) {\r\n        const {\r\n          type: nextType\r\n        } = this.lookahead();\r\n\r\n        if (tokenIsIdentifier(nextType) && nextType !== 91 || nextType === 5) {\r\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\r\n          return false;\r\n        }\r\n      }\r\n    } else if (!this.match(59)) {\r\n      return false;\r\n    }\r\n\r\n    const next = this.nextTokenStart();\r\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\r\n\r\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\r\n      return true;\r\n    }\r\n\r\n    if (this.match(59) && hasFrom) {\r\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\r\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  parseExportFrom(node, expect) {\r\n    if (this.eatContextual(91)) {\r\n      node.source = this.parseImportSource();\r\n      this.checkExport(node);\r\n      const assertions = this.maybeParseImportAssertions();\r\n\r\n      if (assertions) {\r\n        node.assertions = assertions;\r\n      }\r\n    } else if (expect) {\r\n      this.unexpected();\r\n    }\r\n\r\n    this.semicolon();\r\n  }\r\n\r\n  shouldParseExportDeclaration() {\r\n    const {\r\n      type\r\n    } = this.state;\r\n\r\n    if (type === 24) {\r\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\r\n\r\n      if (this.hasPlugin(\"decorators\")) {\r\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\r\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return type === 68 || type === 69 || type === 62 || type === 74 || this.isLet() || this.isAsyncFunction();\r\n  }\r\n\r\n  checkExport(node, checkNames, isDefault, isFrom) {\r\n    if (checkNames) {\r\n      if (isDefault) {\r\n        this.checkDuplicateExports(node, \"default\");\r\n\r\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\r\n          var _declaration$extra;\r\n\r\n          const declaration = node.declaration;\r\n\r\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\r\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\r\n          }\r\n        }\r\n      } else if (node.specifiers && node.specifiers.length) {\r\n        for (const specifier of node.specifiers) {\r\n          const {\r\n            exported\r\n          } = specifier;\r\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\r\n          this.checkDuplicateExports(specifier, exportedName);\r\n\r\n          if (!isFrom && specifier.local) {\r\n            const {\r\n              local\r\n            } = specifier;\r\n\r\n            if (local.type !== \"Identifier\") {\r\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\r\n            } else {\r\n              this.checkReservedWord(local.name, local.start, true, false);\r\n              this.scope.checkLocalExport(local);\r\n            }\r\n          }\r\n        }\r\n      } else if (node.declaration) {\r\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\r\n          const id = node.declaration.id;\r\n          if (!id) throw new Error(\"Assertion failure\");\r\n          this.checkDuplicateExports(node, id.name);\r\n        } else if (node.declaration.type === \"VariableDeclaration\") {\r\n          for (const declaration of node.declaration.declarations) {\r\n            this.checkDeclaration(declaration.id);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\r\n\r\n    if (currentContextDecorators.length) {\r\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\r\n    }\r\n  }\r\n\r\n  checkDeclaration(node) {\r\n    if (node.type === \"Identifier\") {\r\n      this.checkDuplicateExports(node, node.name);\r\n    } else if (node.type === \"ObjectPattern\") {\r\n      for (const prop of node.properties) {\r\n        this.checkDeclaration(prop);\r\n      }\r\n    } else if (node.type === \"ArrayPattern\") {\r\n      for (const elem of node.elements) {\r\n        if (elem) {\r\n          this.checkDeclaration(elem);\r\n        }\r\n      }\r\n    } else if (node.type === \"ObjectProperty\") {\r\n      this.checkDeclaration(node.value);\r\n    } else if (node.type === \"RestElement\") {\r\n      this.checkDeclaration(node.argument);\r\n    } else if (node.type === \"AssignmentPattern\") {\r\n      this.checkDeclaration(node.left);\r\n    }\r\n  }\r\n\r\n  checkDuplicateExports(node, name) {\r\n    if (this.exportedIdentifiers.has(name)) {\r\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\r\n    }\r\n\r\n    this.exportedIdentifiers.add(name);\r\n  }\r\n\r\n  parseExportSpecifiers(isInTypeExport) {\r\n    const nodes = [];\r\n    let first = true;\r\n    this.expect(5);\r\n\r\n    while (!this.eat(8)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        this.expect(12);\r\n        if (this.eat(8)) break;\r\n      }\r\n\r\n      const isMaybeTypeOnly = this.isContextual(120);\r\n      const isString = this.match(123);\r\n      const node = this.startNode();\r\n      node.local = this.parseModuleExportName();\r\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n\r\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\r\n    if (this.eatContextual(87)) {\r\n      node.exported = this.parseModuleExportName();\r\n    } else if (isString) {\r\n      node.exported = cloneStringLiteral(node.local);\r\n    } else if (!node.exported) {\r\n      node.exported = cloneIdentifier(node.local);\r\n    }\r\n\r\n    return this.finishNode(node, \"ExportSpecifier\");\r\n  }\r\n\r\n  parseModuleExportName() {\r\n    if (this.match(123)) {\r\n      const result = this.parseStringLiteral(this.state.value);\r\n      const surrogate = result.value.match(loneSurrogate);\r\n\r\n      if (surrogate) {\r\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    return this.parseIdentifier(true);\r\n  }\r\n\r\n  parseImport(node) {\r\n    node.specifiers = [];\r\n\r\n    if (!this.match(123)) {\r\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\r\n      const parseNext = !hasDefault || this.eat(12);\r\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\r\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\r\n      this.expectContextual(91);\r\n    }\r\n\r\n    node.source = this.parseImportSource();\r\n    const assertions = this.maybeParseImportAssertions();\r\n\r\n    if (assertions) {\r\n      node.assertions = assertions;\r\n    } else {\r\n      const attributes = this.maybeParseModuleAttributes();\r\n\r\n      if (attributes) {\r\n        node.attributes = attributes;\r\n      }\r\n    }\r\n\r\n    this.semicolon();\r\n    return this.finishNode(node, \"ImportDeclaration\");\r\n  }\r\n\r\n  parseImportSource() {\r\n    if (!this.match(123)) this.unexpected();\r\n    return this.parseExprAtom();\r\n  }\r\n\r\n  shouldParseDefaultImport(node) {\r\n    return tokenIsIdentifier(this.state.type);\r\n  }\r\n\r\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\r\n    specifier.local = this.parseIdentifier();\r\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\r\n    node.specifiers.push(this.finishNode(specifier, type));\r\n  }\r\n\r\n  parseAssertEntries() {\r\n    const attrs = [];\r\n    const attrNames = new Set();\r\n\r\n    do {\r\n      if (this.match(8)) {\r\n        break;\r\n      }\r\n\r\n      const node = this.startNode();\r\n      const keyName = this.state.value;\r\n\r\n      if (attrNames.has(keyName)) {\r\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\r\n      }\r\n\r\n      attrNames.add(keyName);\r\n\r\n      if (this.match(123)) {\r\n        node.key = this.parseStringLiteral(keyName);\r\n      } else {\r\n        node.key = this.parseIdentifier(true);\r\n      }\r\n\r\n      this.expect(14);\r\n\r\n      if (!this.match(123)) {\r\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\r\n      }\r\n\r\n      node.value = this.parseStringLiteral(this.state.value);\r\n      this.finishNode(node, \"ImportAttribute\");\r\n      attrs.push(node);\r\n    } while (this.eat(12));\r\n\r\n    return attrs;\r\n  }\r\n\r\n  maybeParseModuleAttributes() {\r\n    if (this.match(70) && !this.hasPrecedingLineBreak()) {\r\n      this.expectPlugin(\"moduleAttributes\");\r\n      this.next();\r\n    } else {\r\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\r\n      return null;\r\n    }\r\n\r\n    const attrs = [];\r\n    const attributes = new Set();\r\n\r\n    do {\r\n      const node = this.startNode();\r\n      node.key = this.parseIdentifier(true);\r\n\r\n      if (node.key.name !== \"type\") {\r\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\r\n      }\r\n\r\n      if (attributes.has(node.key.name)) {\r\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\r\n      }\r\n\r\n      attributes.add(node.key.name);\r\n      this.expect(14);\r\n\r\n      if (!this.match(123)) {\r\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\r\n      }\r\n\r\n      node.value = this.parseStringLiteral(this.state.value);\r\n      this.finishNode(node, \"ImportAttribute\");\r\n      attrs.push(node);\r\n    } while (this.eat(12));\r\n\r\n    return attrs;\r\n  }\r\n\r\n  maybeParseImportAssertions() {\r\n    if (this.isContextual(88) && !this.hasPrecedingLineBreak()) {\r\n      this.expectPlugin(\"importAssertions\");\r\n      this.next();\r\n    } else {\r\n      if (this.hasPlugin(\"importAssertions\")) return [];\r\n      return null;\r\n    }\r\n\r\n    this.eat(5);\r\n    const attrs = this.parseAssertEntries();\r\n    this.eat(8);\r\n    return attrs;\r\n  }\r\n\r\n  maybeParseDefaultImportSpecifier(node) {\r\n    if (this.shouldParseDefaultImport(node)) {\r\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  maybeParseStarImportSpecifier(node) {\r\n    if (this.match(49)) {\r\n      const specifier = this.startNode();\r\n      this.next();\r\n      this.expectContextual(87);\r\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  parseNamedImportSpecifiers(node) {\r\n    let first = true;\r\n    this.expect(5);\r\n\r\n    while (!this.eat(8)) {\r\n      if (first) {\r\n        first = false;\r\n      } else {\r\n        if (this.eat(14)) {\r\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\r\n        }\r\n\r\n        this.expect(12);\r\n        if (this.eat(8)) break;\r\n      }\r\n\r\n      const specifier = this.startNode();\r\n      const importedIsString = this.match(123);\r\n      const isMaybeTypeOnly = this.isContextual(120);\r\n      specifier.imported = this.parseModuleExportName();\r\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\r\n      node.specifiers.push(importSpecifier);\r\n    }\r\n  }\r\n\r\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\r\n    if (this.eatContextual(87)) {\r\n      specifier.local = this.parseIdentifier();\r\n    } else {\r\n      const {\r\n        imported\r\n      } = specifier;\r\n\r\n      if (importedIsString) {\r\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\r\n      }\r\n\r\n      this.checkReservedWord(imported.name, specifier.start, true, true);\r\n\r\n      if (!specifier.local) {\r\n        specifier.local = cloneIdentifier(imported);\r\n      }\r\n    }\r\n\r\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\r\n    return this.finishNode(specifier, \"ImportSpecifier\");\r\n  }\r\n\r\n  isThisParam(param) {\r\n    return param.type === \"Identifier\" && param.name === \"this\";\r\n  }\r\n\r\n}\r\n\r\nclass Parser extends StatementParser {\r\n  constructor(options, input) {\r\n    options = getOptions(options);\r\n    super(options, input);\r\n    this.options = options;\r\n    this.initializeScopes();\r\n    this.plugins = pluginsMap(this.options.plugins);\r\n    this.filename = options.sourceFilename;\r\n  }\r\n\r\n  getScopeHandler() {\r\n    return ScopeHandler;\r\n  }\r\n\r\n  parse() {\r\n    this.enterInitialScopes();\r\n    const file = this.startNode();\r\n    const program = this.startNode();\r\n    this.nextToken();\r\n    file.errors = null;\r\n    this.parseTopLevel(file, program);\r\n    file.errors = this.state.errors;\r\n    return file;\r\n  }\r\n\r\n}\r\n\r\nfunction pluginsMap(plugins) {\r\n  const pluginMap = new Map();\r\n\r\n  for (const plugin of plugins) {\r\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\r\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\r\n  }\r\n\r\n  return pluginMap;\r\n}\r\n\r\nfunction parse(input, options) {\r\n  var _options;\r\n\r\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\r\n    options = Object.assign({}, options);\r\n\r\n    try {\r\n      options.sourceType = \"module\";\r\n      const parser = getParser(options, input);\r\n      const ast = parser.parse();\r\n\r\n      if (parser.sawUnambiguousESM) {\r\n        return ast;\r\n      }\r\n\r\n      if (parser.ambiguousScriptDifferentAst) {\r\n        try {\r\n          options.sourceType = \"script\";\r\n          return getParser(options, input).parse();\r\n        } catch (_unused) {}\r\n      } else {\r\n        ast.program.sourceType = \"script\";\r\n      }\r\n\r\n      return ast;\r\n    } catch (moduleError) {\r\n      try {\r\n        options.sourceType = \"script\";\r\n        return getParser(options, input).parse();\r\n      } catch (_unused2) {}\r\n\r\n      throw moduleError;\r\n    }\r\n  } else {\r\n    return getParser(options, input).parse();\r\n  }\r\n}\r\nfunction parseExpression(input, options) {\r\n  const parser = getParser(options, input);\r\n\r\n  if (parser.options.strictMode) {\r\n    parser.state.strict = true;\r\n  }\r\n\r\n  return parser.getExpression();\r\n}\r\n\r\nfunction generateExportedTokenTypes(internalTokenTypes) {\r\n  const tokenTypes = {};\r\n\r\n  for (const typeName of Object.keys(internalTokenTypes)) {\r\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\r\n  }\r\n\r\n  return tokenTypes;\r\n}\r\n\r\nconst tokTypes = generateExportedTokenTypes(tt);\r\n\r\nfunction getParser(options, input) {\r\n  let cls = Parser;\r\n\r\n  if (options != null && options.plugins) {\r\n    validatePlugins(options.plugins);\r\n    cls = getParserClass(options.plugins);\r\n  }\r\n\r\n  return new cls(options, input);\r\n}\r\n\r\nconst parserClassCache = {};\r\n\r\nfunction getParserClass(pluginsFromOptions) {\r\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\r\n  const key = pluginList.join(\"/\");\r\n  let cls = parserClassCache[key];\r\n\r\n  if (!cls) {\r\n    cls = Parser;\r\n\r\n    for (const plugin of pluginList) {\r\n      cls = mixinPlugins[plugin](cls);\r\n    }\r\n\r\n    parserClassCache[key] = cls;\r\n  }\r\n\r\n  return cls;\r\n}\r\n\r\nexports.parse = parse;\r\nexports.parseExpression = parseExpression;\r\nexports.tokTypes = tokTypes;\r\n//# sourceMappingURL=index.js.map\r\n"]},"metadata":{},"sourceType":"script"}