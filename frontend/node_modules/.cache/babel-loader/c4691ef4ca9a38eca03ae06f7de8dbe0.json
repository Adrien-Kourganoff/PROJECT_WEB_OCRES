{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treto\\\\OneDrive\\\\Documents\\\\ING 4\\\\WEB\\\\PROJECT_WEB_OCRES\\\\frontend\\\\src\\\\components\\\\galerie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, LineMarkSeries, VerticalRectSeries } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst {\n  default: axios\n} = require('axios');\n\nconst timestamp = new Date('May 23 2017').getTime();\nconst ONE_DAY = 86400000;\nconst DATA = [{\n  x0: ONE_DAY * 2,\n  x: ONE_DAY * 3,\n  y: 1\n}, {\n  x0: ONE_DAY * 7,\n  x: ONE_DAY * 8,\n  y: 1\n}, {\n  x0: ONE_DAY * 8,\n  x: ONE_DAY * 9,\n  y: 1\n}, {\n  x0: ONE_DAY * 9,\n  x: ONE_DAY * 10,\n  y: 2\n}, {\n  x0: ONE_DAY * 10,\n  x: ONE_DAY * 11,\n  y: 2.2\n}, {\n  x0: ONE_DAY * 19,\n  x: ONE_DAY * 20,\n  y: 1\n}, {\n  x0: ONE_DAY * 20,\n  x: ONE_DAY * 21,\n  y: 2.5\n}, {\n  x0: ONE_DAY * 21,\n  x: ONE_DAY * 24,\n  y: 1\n}].map(_c = el => ({\n  x0: el.x0 + timestamp,\n  x: el.x + timestamp,\n  y: el.y\n})); // A card used to contain all data from api\n\n_c2 = DATA;\nexport default function Graphs() {\n  _s();\n\n  const [events, setEvents] = useState([]);\n\n  const fetchEvents = async () => {\n    await axios.get('http://localhost:9000/albums').then(all => setEvents(all.data));\n  };\n\n  useEffect(() => {\n    fetchEvents(); //console.log( {events} );\n  }, []);\n  var datas = [];\n\n  for (let i = 0; i < events.length; i++) {\n    datas.push({\n      x: i,\n      y: events[i].Album.ImageCount\n    });\n  }\n\n  console.log(\"coucou\");\n  /**\r\n   * Same as precedent datas just added the real time to put them in the chart and order them\r\n   * Elements are stored like that \r\n   * \"LastUpdated\": \"2021-09-24 04:59:39\"\r\n   */\n\n  var datasTime = [];\n\n  for (let i = 0; i < events.length; i++) {\n    datasTime.push({\n      x0: new Date(events[i].Album.LastUpdated).getTime(),\n      x: new Date(events[i].Album.LastUpdated).getTime() + ONE_DAY,\n      y: events[i].Album.ImageCount\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    children: [/*#__PURE__*/_jsxDEV(XYPlot, {\n      width: 500,\n      height: 500,\n      margin: 70,\n      children: [/*#__PURE__*/_jsxDEV(HorizontalGridLines, {\n        style: {\n          stroke: '#B7E9ED'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VerticalGridLines, {\n        style: {\n          stroke: '#B7E9ED'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        title: \"Num\\xE9ro de l'\\xE9v\\xE8nement\",\n        style: {\n          line: {\n            stroke: '#ADDDE1'\n          },\n          ticks: {\n            stroke: '#ADDDE1'\n          },\n          text: {\n            stroke: 'none',\n            fill: '#ffffff',\n            fontWeight: 600\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        title: \"Nombre de photos\",\n        style: {\n          text: {\n            stroke: 'none',\n            fill: '#ffffff',\n            fontWeight: 600\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n        className: \"first-series\",\n        data: datas,\n        style: {\n          strokeWidth: 2.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(XYPlot, {\n      xDomain: [timestamp - 2 * ONE_DAY, timestamp + 30 * ONE_DAY],\n      yDomain: [0.1, 2.1],\n      xType: \"time\",\n      width: 300,\n      height: 300,\n      children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(VerticalRectSeries, {\n        data: DATA,\n        style: {\n          stroke: '#fff'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graphs, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n\n_c3 = Graphs;\n\nfunction List(props) {\n  var list = [];\n\n  for (let i = 0; i < props.events.length; i++) {\n    list.push({\n      \"id\": i,\n      \"date\": props.events[i].Album.LastUpdated,\n      \"nom\": props.events[i].Album.Title,\n      \"nb\": props.events[i].Album.ImageCount\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: list.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"lieu\",\n        children: [\"N\\xB0\", event.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"date\",\n        children: [\"Date : \", event.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"nom\",\n        children: [\"Nom : \", event.nom]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"photo\",\n        children: [\"Nb photos : \", event.nb]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n\n_c4 = List;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DATA$[\\r\\n  {x0: ONE_DAY * 2, x: ONE_DAY * 3, y: 1},\\r\\n  {x0: ONE_DAY * 7, x: ONE_DAY * 8, y: 1},\\r\\n  {x0: ONE_DAY * 8, x: ONE_DAY * 9, y: 1},\\r\\n  {x0: ONE_DAY * 9, x: ONE_DAY * 10, y: 2},\\r\\n  {x0: ONE_DAY * 10, x: ONE_DAY * 11, y: 2.2},\\r\\n  {x0: ONE_DAY * 19, x: ONE_DAY * 20, y: 1},\\r\\n  {x0: ONE_DAY * 20, x: ONE_DAY * 21, y: 2.5},\\r\\n  {x0: ONE_DAY * 21, x: ONE_DAY * 24, y: 1}\\r\\n].map\");\n$RefreshReg$(_c2, \"DATA\");\n$RefreshReg$(_c3, \"Graphs\");\n$RefreshReg$(_c4, \"List\");","map":{"version":3,"sources":["C:/Users/treto/OneDrive/Documents/ING 4/WEB/PROJECT_WEB_OCRES/frontend/src/components/galerie.js"],"names":["React","useEffect","useState","XYPlot","XAxis","YAxis","HorizontalGridLines","VerticalGridLines","LineMarkSeries","VerticalRectSeries","default","axios","require","timestamp","Date","getTime","ONE_DAY","DATA","x0","x","y","map","el","Graphs","events","setEvents","fetchEvents","get","then","all","data","datas","i","length","push","Album","ImageCount","console","log","datasTime","LastUpdated","stroke","line","ticks","text","fill","fontWeight","strokeWidth","List","props","list","Title","event","id","date","nom","nb"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  LineMarkSeries,\r\n  VerticalRectSeries,\r\n} from 'react-vis';\r\nconst { default: axios } = require('axios');\r\n\r\nconst timestamp = new Date('May 23 2017').getTime();\r\nconst ONE_DAY = 86400000;\r\n\r\nconst DATA = [\r\n  {x0: ONE_DAY * 2, x: ONE_DAY * 3, y: 1},\r\n  {x0: ONE_DAY * 7, x: ONE_DAY * 8, y: 1},\r\n  {x0: ONE_DAY * 8, x: ONE_DAY * 9, y: 1},\r\n  {x0: ONE_DAY * 9, x: ONE_DAY * 10, y: 2},\r\n  {x0: ONE_DAY * 10, x: ONE_DAY * 11, y: 2.2},\r\n  {x0: ONE_DAY * 19, x: ONE_DAY * 20, y: 1},\r\n  {x0: ONE_DAY * 20, x: ONE_DAY * 21, y: 2.5},\r\n  {x0: ONE_DAY * 21, x: ONE_DAY * 24, y: 1}\r\n].map(el => ({x0: el.x0 + timestamp, x: el.x + timestamp, y: el.y}));\r\n\r\n// A card used to contain all data from api\r\nexport default function Graphs(){\r\n\r\n    const [events, setEvents] = useState([]);\r\n\r\n    const fetchEvents = async () => {\r\n        await axios.get('http://localhost:9000/albums').then(all => setEvents(all.data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchEvents();\r\n        //console.log( {events} );\r\n    }, []);\r\n\r\n    var datas = [];\r\n    for (let i = 0; i < events.length; i++) {\r\n        datas.push({x: i, y: events[i].Album.ImageCount});\r\n    }\r\n    console.log(\"coucou\");\r\n\r\n    /**\r\n     * Same as precedent datas just added the real time to put them in the chart and order them\r\n     * Elements are stored like that \r\n     * \"LastUpdated\": \"2021-09-24 04:59:39\"\r\n     */\r\n    var datasTime = [];\r\n    for (let i = 0; i < events.length; i++) {\r\n        datasTime.push(\r\n            {\r\n                x0: new Date(events[i].Album.LastUpdated).getTime(), \r\n                x:  new Date(events[i].Album.LastUpdated).getTime() + ONE_DAY, \r\n                y:  events[i].Album.ImageCount\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='chart'>\r\n            <XYPlot width={500} height={500} margin={70}>\r\n                <HorizontalGridLines style={{stroke: '#B7E9ED'}} />\r\n                <VerticalGridLines style={{stroke: '#B7E9ED'}} />\r\n                <XAxis\r\n                    title=\"Numéro de l'évènement\"\r\n                    style={{\r\n                        line: {stroke: '#ADDDE1'},\r\n                        ticks: {stroke: '#ADDDE1'},\r\n                        text: {stroke: 'none', fill: '#ffffff', fontWeight: 600}\r\n                    }}\r\n                />\r\n                <YAxis title=\"Nombre de photos\" style={{text: {stroke: 'none', fill: '#ffffff', fontWeight: 600}}}/>\r\n                <LineMarkSeries\r\n                    className=\"first-series\"\r\n                    data={datas}\r\n                    style={{\r\n                        strokeWidth: 2.5\r\n                    }}\r\n                />\r\n            </XYPlot>\r\n            <div className='list'>\r\n                <List events={events}/>\r\n            </div>\r\n            <XYPlot\r\n      xDomain={[timestamp - 2 * ONE_DAY, timestamp + 30 * ONE_DAY]}\r\n      yDomain={[0.1, 2.1]}\r\n      xType=\"time\"\r\n      width={300}\r\n      height={300}\r\n    >\r\n      <VerticalGridLines />\r\n      <HorizontalGridLines />\r\n      <XAxis />\r\n      <YAxis />\r\n      <VerticalRectSeries data={DATA} style={{stroke: '#fff'}} />\r\n    </XYPlot>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction List(props){\r\n\r\n    var list = [];\r\n\r\n    for (let i = 0; i < props.events.length; i++) {\r\n        list.push({\r\n            \"id\":i,\r\n            \"date\": props.events[i].Album.LastUpdated,\r\n            \"nom\": props.events[i].Album.Title,\r\n            \"nb\": props.events[i].Album.ImageCount\r\n        });\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {list.map(event => (\r\n                <div className='event'>\r\n                    <h3 className='lieu'>N°{event.id}</h3>\r\n                    <h5 className='date'>Date : {event.date}</h5>\r\n                    <h5 className='nom'>Nom : {event.nom}</h5>\r\n                    <h5 className='photo'>Nb photos : {event.nb}</h5>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}