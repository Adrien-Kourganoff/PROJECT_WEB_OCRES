{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar assert_1 = tslib_1.__importDefault(require(\"assert\"));\n\nvar util_1 = require(\"./util\");\n\nvar Mapping =\n/** @class */\nfunction () {\n  function Mapping(sourceLines, sourceLoc, targetLoc) {\n    if (targetLoc === void 0) {\n      targetLoc = sourceLoc;\n    }\n\n    this.sourceLines = sourceLines;\n    this.sourceLoc = sourceLoc;\n    this.targetLoc = targetLoc;\n  }\n\n  Mapping.prototype.slice = function (lines, start, end) {\n    if (end === void 0) {\n      end = lines.lastPos();\n    }\n\n    var sourceLines = this.sourceLines;\n    var sourceLoc = this.sourceLoc;\n    var targetLoc = this.targetLoc;\n\n    function skip(name) {\n      var sourceFromPos = sourceLoc[name];\n      var targetFromPos = targetLoc[name];\n      var targetToPos = start;\n\n      if (name === \"end\") {\n        targetToPos = end;\n      } else {\n        assert_1.default.strictEqual(name, \"start\");\n      }\n\n      return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);\n    }\n\n    if (util_1.comparePos(start, targetLoc.start) <= 0) {\n      if (util_1.comparePos(targetLoc.end, end) <= 0) {\n        targetLoc = {\n          start: subtractPos(targetLoc.start, start.line, start.column),\n          end: subtractPos(targetLoc.end, start.line, start.column)\n        }; // The sourceLoc can stay the same because the contents of the\n        // targetLoc have not changed.\n      } else if (util_1.comparePos(end, targetLoc.start) <= 0) {\n        return null;\n      } else {\n        sourceLoc = {\n          start: sourceLoc.start,\n          end: skip(\"end\")\n        };\n        targetLoc = {\n          start: subtractPos(targetLoc.start, start.line, start.column),\n          end: subtractPos(end, start.line, start.column)\n        };\n      }\n    } else {\n      if (util_1.comparePos(targetLoc.end, start) <= 0) {\n        return null;\n      }\n\n      if (util_1.comparePos(targetLoc.end, end) <= 0) {\n        sourceLoc = {\n          start: skip(\"start\"),\n          end: sourceLoc.end\n        };\n        targetLoc = {\n          // Same as subtractPos(start, start.line, start.column):\n          start: {\n            line: 1,\n            column: 0\n          },\n          end: subtractPos(targetLoc.end, start.line, start.column)\n        };\n      } else {\n        sourceLoc = {\n          start: skip(\"start\"),\n          end: skip(\"end\")\n        };\n        targetLoc = {\n          // Same as subtractPos(start, start.line, start.column):\n          start: {\n            line: 1,\n            column: 0\n          },\n          end: subtractPos(end, start.line, start.column)\n        };\n      }\n    }\n\n    return new Mapping(this.sourceLines, sourceLoc, targetLoc);\n  };\n\n  Mapping.prototype.add = function (line, column) {\n    return new Mapping(this.sourceLines, this.sourceLoc, {\n      start: addPos(this.targetLoc.start, line, column),\n      end: addPos(this.targetLoc.end, line, column)\n    });\n  };\n\n  Mapping.prototype.subtract = function (line, column) {\n    return new Mapping(this.sourceLines, this.sourceLoc, {\n      start: subtractPos(this.targetLoc.start, line, column),\n      end: subtractPos(this.targetLoc.end, line, column)\n    });\n  };\n\n  Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {\n    if (skipFirstLine === void 0) {\n      skipFirstLine = false;\n    }\n\n    if (noNegativeColumns === void 0) {\n      noNegativeColumns = false;\n    }\n\n    if (by === 0) {\n      return this;\n    }\n\n    var targetLoc = this.targetLoc;\n    var startLine = targetLoc.start.line;\n    var endLine = targetLoc.end.line;\n\n    if (skipFirstLine && startLine === 1 && endLine === 1) {\n      return this;\n    }\n\n    targetLoc = {\n      start: targetLoc.start,\n      end: targetLoc.end\n    };\n\n    if (!skipFirstLine || startLine > 1) {\n      var startColumn = targetLoc.start.column + by;\n      targetLoc.start = {\n        line: startLine,\n        column: noNegativeColumns ? Math.max(0, startColumn) : startColumn\n      };\n    }\n\n    if (!skipFirstLine || endLine > 1) {\n      var endColumn = targetLoc.end.column + by;\n      targetLoc.end = {\n        line: endLine,\n        column: noNegativeColumns ? Math.max(0, endColumn) : endColumn\n      };\n    }\n\n    return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);\n  };\n\n  return Mapping;\n}();\n\nexports.default = Mapping;\n\nfunction addPos(toPos, line, column) {\n  return {\n    line: toPos.line + line - 1,\n    column: toPos.line === 1 ? toPos.column + column : toPos.column\n  };\n}\n\nfunction subtractPos(fromPos, line, column) {\n  return {\n    line: fromPos.line - line + 1,\n    column: fromPos.line === line ? fromPos.column - column : fromPos.column\n  };\n}\n\nfunction skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {\n  var targetComparison = util_1.comparePos(targetFromPos, targetToPos);\n\n  if (targetComparison === 0) {\n    // Trivial case: no characters to skip.\n    return sourceFromPos;\n  }\n\n  var sourceCursor, targetCursor;\n\n  if (targetComparison < 0) {\n    // Skipping forward.\n    sourceCursor = sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();\n    targetCursor = targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();\n    var lineDiff = targetToPos.line - targetCursor.line;\n    sourceCursor.line += lineDiff;\n    targetCursor.line += lineDiff;\n\n    if (lineDiff > 0) {\n      // If jumping to later lines, reset columns to the beginnings\n      // of those lines.\n      sourceCursor.column = 0;\n      targetCursor.column = 0;\n    } else {\n      assert_1.default.strictEqual(lineDiff, 0);\n    }\n\n    while (util_1.comparePos(targetCursor, targetToPos) < 0 && targetLines.nextPos(targetCursor, true)) {\n      assert_1.default.ok(sourceLines.nextPos(sourceCursor, true));\n      assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));\n    }\n  } else {\n    // Skipping backward.\n    sourceCursor = sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();\n    targetCursor = targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();\n    var lineDiff = targetToPos.line - targetCursor.line;\n    sourceCursor.line += lineDiff;\n    targetCursor.line += lineDiff;\n\n    if (lineDiff < 0) {\n      // If jumping to earlier lines, reset columns to the ends of\n      // those lines.\n      sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);\n      targetCursor.column = targetLines.getLineLength(targetCursor.line);\n    } else {\n      assert_1.default.strictEqual(lineDiff, 0);\n    }\n\n    while (util_1.comparePos(targetToPos, targetCursor) < 0 && targetLines.prevPos(targetCursor, true)) {\n      assert_1.default.ok(sourceLines.prevPos(sourceCursor, true));\n      assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));\n    }\n  }\n\n  return sourceCursor;\n}","map":{"version":3,"sources":["C:/Users/tara0/OneDrive/Bureau/Travail/Ing 4/Techno web/PROJECT_WEB_OCRES/frontend/node_modules/jscodeshift/node_modules/recast/lib/mapping.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","assert_1","__importDefault","util_1","Mapping","sourceLines","sourceLoc","targetLoc","prototype","slice","lines","start","end","lastPos","skip","name","sourceFromPos","targetFromPos","targetToPos","default","strictEqual","skipChars","comparePos","subtractPos","line","column","add","addPos","subtract","indent","by","skipFirstLine","noNegativeColumns","startLine","endLine","startColumn","Math","max","endColumn","toPos","fromPos","targetLines","targetComparison","sourceCursor","targetCursor","skipSpaces","lineDiff","nextPos","ok","charAt","firstPos","getLineLength","prevPos"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar assert_1 = tslib_1.__importDefault(require(\"assert\"));\r\nvar util_1 = require(\"./util\");\r\nvar Mapping = /** @class */ (function () {\r\n    function Mapping(sourceLines, sourceLoc, targetLoc) {\r\n        if (targetLoc === void 0) { targetLoc = sourceLoc; }\r\n        this.sourceLines = sourceLines;\r\n        this.sourceLoc = sourceLoc;\r\n        this.targetLoc = targetLoc;\r\n    }\r\n    Mapping.prototype.slice = function (lines, start, end) {\r\n        if (end === void 0) { end = lines.lastPos(); }\r\n        var sourceLines = this.sourceLines;\r\n        var sourceLoc = this.sourceLoc;\r\n        var targetLoc = this.targetLoc;\r\n        function skip(name) {\r\n            var sourceFromPos = sourceLoc[name];\r\n            var targetFromPos = targetLoc[name];\r\n            var targetToPos = start;\r\n            if (name === \"end\") {\r\n                targetToPos = end;\r\n            }\r\n            else {\r\n                assert_1.default.strictEqual(name, \"start\");\r\n            }\r\n            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);\r\n        }\r\n        if (util_1.comparePos(start, targetLoc.start) <= 0) {\r\n            if (util_1.comparePos(targetLoc.end, end) <= 0) {\r\n                targetLoc = {\r\n                    start: subtractPos(targetLoc.start, start.line, start.column),\r\n                    end: subtractPos(targetLoc.end, start.line, start.column),\r\n                };\r\n                // The sourceLoc can stay the same because the contents of the\r\n                // targetLoc have not changed.\r\n            }\r\n            else if (util_1.comparePos(end, targetLoc.start) <= 0) {\r\n                return null;\r\n            }\r\n            else {\r\n                sourceLoc = {\r\n                    start: sourceLoc.start,\r\n                    end: skip(\"end\"),\r\n                };\r\n                targetLoc = {\r\n                    start: subtractPos(targetLoc.start, start.line, start.column),\r\n                    end: subtractPos(end, start.line, start.column),\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            if (util_1.comparePos(targetLoc.end, start) <= 0) {\r\n                return null;\r\n            }\r\n            if (util_1.comparePos(targetLoc.end, end) <= 0) {\r\n                sourceLoc = {\r\n                    start: skip(\"start\"),\r\n                    end: sourceLoc.end,\r\n                };\r\n                targetLoc = {\r\n                    // Same as subtractPos(start, start.line, start.column):\r\n                    start: { line: 1, column: 0 },\r\n                    end: subtractPos(targetLoc.end, start.line, start.column),\r\n                };\r\n            }\r\n            else {\r\n                sourceLoc = {\r\n                    start: skip(\"start\"),\r\n                    end: skip(\"end\"),\r\n                };\r\n                targetLoc = {\r\n                    // Same as subtractPos(start, start.line, start.column):\r\n                    start: { line: 1, column: 0 },\r\n                    end: subtractPos(end, start.line, start.column),\r\n                };\r\n            }\r\n        }\r\n        return new Mapping(this.sourceLines, sourceLoc, targetLoc);\r\n    };\r\n    Mapping.prototype.add = function (line, column) {\r\n        return new Mapping(this.sourceLines, this.sourceLoc, {\r\n            start: addPos(this.targetLoc.start, line, column),\r\n            end: addPos(this.targetLoc.end, line, column),\r\n        });\r\n    };\r\n    Mapping.prototype.subtract = function (line, column) {\r\n        return new Mapping(this.sourceLines, this.sourceLoc, {\r\n            start: subtractPos(this.targetLoc.start, line, column),\r\n            end: subtractPos(this.targetLoc.end, line, column),\r\n        });\r\n    };\r\n    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {\r\n        if (skipFirstLine === void 0) { skipFirstLine = false; }\r\n        if (noNegativeColumns === void 0) { noNegativeColumns = false; }\r\n        if (by === 0) {\r\n            return this;\r\n        }\r\n        var targetLoc = this.targetLoc;\r\n        var startLine = targetLoc.start.line;\r\n        var endLine = targetLoc.end.line;\r\n        if (skipFirstLine && startLine === 1 && endLine === 1) {\r\n            return this;\r\n        }\r\n        targetLoc = {\r\n            start: targetLoc.start,\r\n            end: targetLoc.end,\r\n        };\r\n        if (!skipFirstLine || startLine > 1) {\r\n            var startColumn = targetLoc.start.column + by;\r\n            targetLoc.start = {\r\n                line: startLine,\r\n                column: noNegativeColumns ? Math.max(0, startColumn) : startColumn,\r\n            };\r\n        }\r\n        if (!skipFirstLine || endLine > 1) {\r\n            var endColumn = targetLoc.end.column + by;\r\n            targetLoc.end = {\r\n                line: endLine,\r\n                column: noNegativeColumns ? Math.max(0, endColumn) : endColumn,\r\n            };\r\n        }\r\n        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);\r\n    };\r\n    return Mapping;\r\n}());\r\nexports.default = Mapping;\r\nfunction addPos(toPos, line, column) {\r\n    return {\r\n        line: toPos.line + line - 1,\r\n        column: toPos.line === 1 ? toPos.column + column : toPos.column,\r\n    };\r\n}\r\nfunction subtractPos(fromPos, line, column) {\r\n    return {\r\n        line: fromPos.line - line + 1,\r\n        column: fromPos.line === line ? fromPos.column - column : fromPos.column,\r\n    };\r\n}\r\nfunction skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {\r\n    var targetComparison = util_1.comparePos(targetFromPos, targetToPos);\r\n    if (targetComparison === 0) {\r\n        // Trivial case: no characters to skip.\r\n        return sourceFromPos;\r\n    }\r\n    var sourceCursor, targetCursor;\r\n    if (targetComparison < 0) {\r\n        // Skipping forward.\r\n        sourceCursor =\r\n            sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();\r\n        targetCursor =\r\n            targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();\r\n        var lineDiff = targetToPos.line - targetCursor.line;\r\n        sourceCursor.line += lineDiff;\r\n        targetCursor.line += lineDiff;\r\n        if (lineDiff > 0) {\r\n            // If jumping to later lines, reset columns to the beginnings\r\n            // of those lines.\r\n            sourceCursor.column = 0;\r\n            targetCursor.column = 0;\r\n        }\r\n        else {\r\n            assert_1.default.strictEqual(lineDiff, 0);\r\n        }\r\n        while (util_1.comparePos(targetCursor, targetToPos) < 0 &&\r\n            targetLines.nextPos(targetCursor, true)) {\r\n            assert_1.default.ok(sourceLines.nextPos(sourceCursor, true));\r\n            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));\r\n        }\r\n    }\r\n    else {\r\n        // Skipping backward.\r\n        sourceCursor =\r\n            sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();\r\n        targetCursor =\r\n            targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();\r\n        var lineDiff = targetToPos.line - targetCursor.line;\r\n        sourceCursor.line += lineDiff;\r\n        targetCursor.line += lineDiff;\r\n        if (lineDiff < 0) {\r\n            // If jumping to earlier lines, reset columns to the ends of\r\n            // those lines.\r\n            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);\r\n            targetCursor.column = targetLines.getLineLength(targetCursor.line);\r\n        }\r\n        else {\r\n            assert_1.default.strictEqual(lineDiff, 0);\r\n        }\r\n        while (util_1.comparePos(targetToPos, targetCursor) < 0 &&\r\n            targetLines.prevPos(targetCursor, true)) {\r\n            assert_1.default.ok(sourceLines.prevPos(sourceCursor, true));\r\n            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));\r\n        }\r\n    }\r\n    return sourceCursor;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}