{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar fork_1 = tslib_1.__importDefault(require(\"./fork\"));\n\nvar core_1 = tslib_1.__importDefault(require(\"./def/core\"));\n\nvar es6_1 = tslib_1.__importDefault(require(\"./def/es6\"));\n\nvar es2016_1 = tslib_1.__importDefault(require(\"./def/es2016\"));\n\nvar es2017_1 = tslib_1.__importDefault(require(\"./def/es2017\"));\n\nvar es2018_1 = tslib_1.__importDefault(require(\"./def/es2018\"));\n\nvar es2019_1 = tslib_1.__importDefault(require(\"./def/es2019\"));\n\nvar es2020_1 = tslib_1.__importDefault(require(\"./def/es2020\"));\n\nvar jsx_1 = tslib_1.__importDefault(require(\"./def/jsx\"));\n\nvar flow_1 = tslib_1.__importDefault(require(\"./def/flow\"));\n\nvar esprima_1 = tslib_1.__importDefault(require(\"./def/esprima\"));\n\nvar babel_1 = tslib_1.__importDefault(require(\"./def/babel\"));\n\nvar typescript_1 = tslib_1.__importDefault(require(\"./def/typescript\"));\n\nvar es_proposals_1 = tslib_1.__importDefault(require(\"./def/es-proposals\"));\n\nvar namedTypes_1 = require(\"./gen/namedTypes\");\n\nObject.defineProperty(exports, \"namedTypes\", {\n  enumerable: true,\n  get: function () {\n    return namedTypes_1.namedTypes;\n  }\n});\n\nvar _a = fork_1.default([// This core module of AST types captures ES5 as it is parsed today by\n// git://github.com/ariya/esprima.git#master.\ncore_1.default, // Feel free to add to or remove from this list of extension modules to\n// configure the precise type hierarchy that you need.\nes6_1.default, es2016_1.default, es2017_1.default, es2018_1.default, es2019_1.default, es2020_1.default, jsx_1.default, flow_1.default, esprima_1.default, babel_1.default, typescript_1.default, es_proposals_1.default]),\n    astNodesAreEquivalent = _a.astNodesAreEquivalent,\n    builders = _a.builders,\n    builtInTypes = _a.builtInTypes,\n    defineMethod = _a.defineMethod,\n    eachField = _a.eachField,\n    finalize = _a.finalize,\n    getBuilderName = _a.getBuilderName,\n    getFieldNames = _a.getFieldNames,\n    getFieldValue = _a.getFieldValue,\n    getSupertypeNames = _a.getSupertypeNames,\n    n = _a.namedTypes,\n    NodePath = _a.NodePath,\n    Path = _a.Path,\n    PathVisitor = _a.PathVisitor,\n    someField = _a.someField,\n    Type = _a.Type,\n    use = _a.use,\n    visit = _a.visit;\n\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\nexports.builders = builders;\nexports.builtInTypes = builtInTypes;\nexports.defineMethod = defineMethod;\nexports.eachField = eachField;\nexports.finalize = finalize;\nexports.getBuilderName = getBuilderName;\nexports.getFieldNames = getFieldNames;\nexports.getFieldValue = getFieldValue;\nexports.getSupertypeNames = getSupertypeNames;\nexports.NodePath = NodePath;\nexports.Path = Path;\nexports.PathVisitor = PathVisitor;\nexports.someField = someField;\nexports.Type = Type;\nexports.use = use;\nexports.visit = visit; // Populate the exported fields of the namedTypes namespace, while still\n// retaining its member types.\n\nObject.assign(namedTypes_1.namedTypes, n);","map":{"version":3,"sources":["C:/Users/tara0/OneDrive/Bureau/Travail/Ing 4/Techno web/PROJECT_WEB_OCRES/frontend/node_modules/ast-types/main.js"],"names":["Object","defineProperty","exports","value","visit","use","Type","someField","PathVisitor","Path","NodePath","namedTypes","getSupertypeNames","getFieldValue","getFieldNames","getBuilderName","finalize","eachField","defineMethod","builtInTypes","builders","astNodesAreEquivalent","tslib_1","require","fork_1","__importDefault","core_1","es6_1","es2016_1","es2017_1","es2018_1","es2019_1","es2020_1","jsx_1","flow_1","esprima_1","babel_1","typescript_1","es_proposals_1","namedTypes_1","enumerable","get","_a","default","n","assign"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\r\nvar tslib_1 = require(\"tslib\");\r\nvar fork_1 = tslib_1.__importDefault(require(\"./fork\"));\r\nvar core_1 = tslib_1.__importDefault(require(\"./def/core\"));\r\nvar es6_1 = tslib_1.__importDefault(require(\"./def/es6\"));\r\nvar es2016_1 = tslib_1.__importDefault(require(\"./def/es2016\"));\r\nvar es2017_1 = tslib_1.__importDefault(require(\"./def/es2017\"));\r\nvar es2018_1 = tslib_1.__importDefault(require(\"./def/es2018\"));\r\nvar es2019_1 = tslib_1.__importDefault(require(\"./def/es2019\"));\r\nvar es2020_1 = tslib_1.__importDefault(require(\"./def/es2020\"));\r\nvar jsx_1 = tslib_1.__importDefault(require(\"./def/jsx\"));\r\nvar flow_1 = tslib_1.__importDefault(require(\"./def/flow\"));\r\nvar esprima_1 = tslib_1.__importDefault(require(\"./def/esprima\"));\r\nvar babel_1 = tslib_1.__importDefault(require(\"./def/babel\"));\r\nvar typescript_1 = tslib_1.__importDefault(require(\"./def/typescript\"));\r\nvar es_proposals_1 = tslib_1.__importDefault(require(\"./def/es-proposals\"));\r\nvar namedTypes_1 = require(\"./gen/namedTypes\");\r\nObject.defineProperty(exports, \"namedTypes\", { enumerable: true, get: function () { return namedTypes_1.namedTypes; } });\r\nvar _a = fork_1.default([\r\n    // This core module of AST types captures ES5 as it is parsed today by\r\n    // git://github.com/ariya/esprima.git#master.\r\n    core_1.default,\r\n    // Feel free to add to or remove from this list of extension modules to\r\n    // configure the precise type hierarchy that you need.\r\n    es6_1.default,\r\n    es2016_1.default,\r\n    es2017_1.default,\r\n    es2018_1.default,\r\n    es2019_1.default,\r\n    es2020_1.default,\r\n    jsx_1.default,\r\n    flow_1.default,\r\n    esprima_1.default,\r\n    babel_1.default,\r\n    typescript_1.default,\r\n    es_proposals_1.default,\r\n]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;\r\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\r\nexports.builders = builders;\r\nexports.builtInTypes = builtInTypes;\r\nexports.defineMethod = defineMethod;\r\nexports.eachField = eachField;\r\nexports.finalize = finalize;\r\nexports.getBuilderName = getBuilderName;\r\nexports.getFieldNames = getFieldNames;\r\nexports.getFieldValue = getFieldValue;\r\nexports.getSupertypeNames = getSupertypeNames;\r\nexports.NodePath = NodePath;\r\nexports.Path = Path;\r\nexports.PathVisitor = PathVisitor;\r\nexports.someField = someField;\r\nexports.Type = Type;\r\nexports.use = use;\r\nexports.visit = visit;\r\n// Populate the exported fields of the namedTypes namespace, while still\r\n// retaining its member types.\r\nObject.assign(namedTypes_1.namedTypes, n);\r\n"]},"metadata":{},"sourceType":"script"}