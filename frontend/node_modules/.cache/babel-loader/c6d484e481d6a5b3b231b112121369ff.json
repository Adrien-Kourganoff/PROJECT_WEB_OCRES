{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treto\\\\OneDrive\\\\Documents\\\\ING 4\\\\WEB\\\\PROJECT_WEB_OCRES\\\\frontend\\\\src\\\\components\\\\events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  default: axios\n} = require('axios'); // A card used to contain all data from api\n\n\nexport default function EventListTable() {\n  _s();\n\n  const [dat, setDat] = useState([]);\n\n  const fetchDat = async () => {\n    await axios.get('http://localhost:9000/albums').then(all => setDat(all.data));\n  };\n\n  useEffect(() => {\n    fetchDat(); //console.log( {dat} );\n  }, []);\n  const data = React.useMemo(() => [{\n    col1: 'Hello',\n    col2: 'World'\n  }, {\n    col1: 'react-table',\n    col2: 'rocks'\n  }, {\n    col1: 'whatever',\n    col2: 'you want'\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: 'Column 1',\n    accessor: 'col1' // accessor is the \"key\" in the data\n\n  }, {\n    Header: 'Column 2',\n    accessor: 'col2'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    style: {\n      border: 'solid 1px blue'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          style: {\n            borderBottom: 'solid 3px red',\n            background: 'aliceblue',\n            color: 'black',\n            fontWeight: 'bold'\n          },\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              style: {\n                padding: '10px',\n                border: 'solid 1px gray',\n                background: 'papayawhip'\n              },\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 20\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 14\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EventListTable, \"NahogcvgFA3X5mMAUdNgIL41KEk=\", false, function () {\n  return [useTable];\n});\n\n_c = EventListTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventListTable\");","map":{"version":3,"sources":["C:/Users/treto/OneDrive/Documents/ING 4/WEB/PROJECT_WEB_OCRES/frontend/src/components/events.js"],"names":["React","useEffect","useState","useTable","default","axios","require","EventListTable","dat","setDat","fetchDat","get","then","all","data","useMemo","col1","col2","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","border","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useTable } from 'react-table';\r\nconst { default: axios } = require('axios');\r\n\r\n\r\n// A card used to contain all data from api\r\nexport default function EventListTable(){\r\n\r\n    const [dat, setDat] = useState([]);\r\n\r\n    const fetchDat = async () => {\r\n        await axios.get('http://localhost:9000/albums').then(all => setDat(all.data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDat();\r\n        //console.log( {dat} );\r\n    }, []);\r\n\r\n    const data = React.useMemo(\r\n        () => [\r\n          {\r\n            col1: 'Hello',\r\n            col2: 'World',\r\n          },\r\n          {\r\n            col1: 'react-table',\r\n            col2: 'rocks',\r\n          },\r\n          {\r\n            col1: 'whatever',\r\n            col2: 'you want',\r\n          },\r\n        ],\r\n        []\r\n      )\r\n\r\n      const columns = React.useMemo(\r\n        () => [\r\n          {\r\n            Header: 'Column 1',\r\n            accessor: 'col1', // accessor is the \"key\" in the data\r\n          },\r\n          {\r\n            Header: 'Column 2',\r\n            accessor: 'col2',\r\n          },\r\n        ],\r\n        []\r\n      )\r\n\r\n      const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n      } = useTable({ columns, data })\r\n\r\n    return (\r\n        <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\r\n       <thead>\r\n         {headerGroups.map(headerGroup => (\r\n           <tr {...headerGroup.getHeaderGroupProps()}>\r\n             {headerGroup.headers.map(column => (\r\n               <th\r\n                 {...column.getHeaderProps()}\r\n                 style={{\r\n                   borderBottom: 'solid 3px red',\r\n                   background: 'aliceblue',\r\n                   color: 'black',\r\n                   fontWeight: 'bold',\r\n                 }}\r\n               >\r\n                 {column.render('Header')}\r\n               </th>\r\n             ))}\r\n           </tr>\r\n         ))}\r\n       </thead>\r\n       <tbody {...getTableBodyProps()}>\r\n         {rows.map(row => {\r\n           prepareRow(row)\r\n           return (\r\n             <tr {...row.getRowProps()}>\r\n               {row.cells.map(cell => {\r\n                 return (\r\n                   <td\r\n                     {...cell.getCellProps()}\r\n                     style={{\r\n                       padding: '10px',\r\n                       border: 'solid 1px gray',\r\n                       background: 'papayawhip',\r\n                     }}\r\n                   >\r\n                     {cell.render('Cell')}\r\n                   </td>\r\n                 )\r\n               })}\r\n             </tr>\r\n           )\r\n         })}\r\n       </tbody>\r\n     </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}