{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.run = exports.prettyPrint = exports.print = exports.types = exports.parse = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar fs_1 = tslib_1.__importDefault(require(\"fs\"));\n\nvar types = tslib_1.__importStar(require(\"ast-types\"));\n\nexports.types = types;\n\nvar parser_1 = require(\"./lib/parser\");\n\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return parser_1.parse;\n  }\n});\n\nvar printer_1 = require(\"./lib/printer\");\n/**\r\n * Traverse and potentially modify an abstract syntax tree using a\r\n * convenient visitor syntax:\r\n *\r\n *   recast.visit(ast, {\r\n *     names: [],\r\n *     visitIdentifier: function(path) {\r\n *       var node = path.value;\r\n *       this.visitor.names.push(node.name);\r\n *       this.traverse(path);\r\n *     }\r\n *   });\r\n */\n\n\nvar ast_types_1 = require(\"ast-types\");\n\nObject.defineProperty(exports, \"visit\", {\n  enumerable: true,\n  get: function () {\n    return ast_types_1.visit;\n  }\n});\n/**\r\n * Reprint a modified syntax tree using as much of the original source\r\n * code as possible.\r\n */\n\nfunction print(node, options) {\n  return new printer_1.Printer(options).print(node);\n}\n\nexports.print = print;\n/**\r\n * Print without attempting to reuse any original source code.\r\n */\n\nfunction prettyPrint(node, options) {\n  return new printer_1.Printer(options).printGenerically(node);\n}\n\nexports.prettyPrint = prettyPrint;\n/**\r\n * Convenient command-line interface (see e.g. example/add-braces).\r\n */\n\nfunction run(transformer, options) {\n  return runFile(process.argv[2], transformer, options);\n}\n\nexports.run = run;\n\nfunction runFile(path, transformer, options) {\n  fs_1.default.readFile(path, \"utf-8\", function (err, code) {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    runString(code, transformer, options);\n  });\n}\n\nfunction defaultWriteback(output) {\n  process.stdout.write(output);\n}\n\nfunction runString(code, transformer, options) {\n  var writeback = options && options.writeback || defaultWriteback;\n  transformer(parser_1.parse(code, options), function (node) {\n    writeback(print(node, options).code);\n  });\n}","map":{"version":3,"sources":["C:/Users/tara0/OneDrive/Bureau/Travail/Ing 4/Techno web/PROJECT_WEB_OCRES/frontend/node_modules/jscodeshift/node_modules/recast/main.js"],"names":["Object","defineProperty","exports","value","run","prettyPrint","print","types","parse","tslib_1","require","fs_1","__importDefault","__importStar","parser_1","enumerable","get","printer_1","ast_types_1","visit","node","options","Printer","printGenerically","transformer","runFile","process","argv","path","default","readFile","err","code","console","error","runString","defaultWriteback","output","stdout","write","writeback"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.run = exports.prettyPrint = exports.print = exports.types = exports.parse = void 0;\r\nvar tslib_1 = require(\"tslib\");\r\nvar fs_1 = tslib_1.__importDefault(require(\"fs\"));\r\nvar types = tslib_1.__importStar(require(\"ast-types\"));\r\nexports.types = types;\r\nvar parser_1 = require(\"./lib/parser\");\r\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parser_1.parse; } });\r\nvar printer_1 = require(\"./lib/printer\");\r\n/**\r\n * Traverse and potentially modify an abstract syntax tree using a\r\n * convenient visitor syntax:\r\n *\r\n *   recast.visit(ast, {\r\n *     names: [],\r\n *     visitIdentifier: function(path) {\r\n *       var node = path.value;\r\n *       this.visitor.names.push(node.name);\r\n *       this.traverse(path);\r\n *     }\r\n *   });\r\n */\r\nvar ast_types_1 = require(\"ast-types\");\r\nObject.defineProperty(exports, \"visit\", { enumerable: true, get: function () { return ast_types_1.visit; } });\r\n/**\r\n * Reprint a modified syntax tree using as much of the original source\r\n * code as possible.\r\n */\r\nfunction print(node, options) {\r\n    return new printer_1.Printer(options).print(node);\r\n}\r\nexports.print = print;\r\n/**\r\n * Print without attempting to reuse any original source code.\r\n */\r\nfunction prettyPrint(node, options) {\r\n    return new printer_1.Printer(options).printGenerically(node);\r\n}\r\nexports.prettyPrint = prettyPrint;\r\n/**\r\n * Convenient command-line interface (see e.g. example/add-braces).\r\n */\r\nfunction run(transformer, options) {\r\n    return runFile(process.argv[2], transformer, options);\r\n}\r\nexports.run = run;\r\nfunction runFile(path, transformer, options) {\r\n    fs_1.default.readFile(path, \"utf-8\", function (err, code) {\r\n        if (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n        runString(code, transformer, options);\r\n    });\r\n}\r\nfunction defaultWriteback(output) {\r\n    process.stdout.write(output);\r\n}\r\nfunction runString(code, transformer, options) {\r\n    var writeback = options && options.writeback || defaultWriteback;\r\n    transformer(parser_1.parse(code, options), function (node) {\r\n        writeback(print(node, options).code);\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}